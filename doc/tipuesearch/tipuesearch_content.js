var tipuesearch = {"pages":[{"text":"fBlog preprocess: true fBlog is a stand-alone weblog page generator to be uploaded (website) or viewed on its own computer (diary or notebook). Feature Simple: no templating, themes comes only with style sheets, no programming skills required, standalone binary executable. Human interfaces: command line, console. Powerful: generate thousands entries in few seconds (tested for 1 entry/day/50 years.), low memory footprint. Secure: no JavaScript, no PHP, no *SQL database but plain text files, static web pages, statically typed and compiled programming language. Internationalization: right-to-left direction languages (not fully tested), UTF-8 . Limitations: no commentaries, only 8 bits character length encoding (UTF-8 tested), not yet Markdown support (scheduled), not yet RSS-ATOM feed (coming soon). Target systems Any UNIX/POSIX based systems (Linux x86_64 tested). Dependencies Build time: recent Fortran compiler (gfortran-5.3.0 tested). Web pages generation: POSIX shell (Bash tested), POSIX external commands ( ls rm cp mkdir stty and vi ). Online: Web server (Apache tested). Offline: Web browser (Firefox tested). Quick start 01     $  autoreconf --install\n              02     $ ./configure\n              03     # sudo make install\n              04     $ mkdir blog_dir\n              05     $ fblog blog_dir Environment By default, the text editor is launched according EDITOR environment variable. (If none, vi text editor is launched.) To override it, (i.g. to have nano editor), just enter at command line: $ EDITOR=nano fblog -c blog_dir Uncomment the line beginning by EDITOR and write the name of your preferred editor. Copyright (C) 2016 Denis Bernard\nLicense: GPLv3+ Developer Info Denis BERNARD","tags":"","loc":"index.html","title":" fBlog "},{"text":"Source Code ! Copyright (C) 2016 Denis Bernard. ! License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>. ! This is free software: you are free to change and redistribute it. ! There is NO WARRANTY, to the extent permitted by law. ! Written by Denis Bernard. ! !> The core of fBlog. ! module fblog_m ! implicit none ! private public config_file , bad_argument , create_new_blog , delete_a_css , data_dir , data_post , delete_a_page , delete_a_post , deleted ,& & deleted_file , deleted_page , deleted_you_could_update_the_config , edit_a_page , edit_a_css , edited_page , editor ,& & edit_settings , enter_the_filename_of_the_css_deleted , enter_the_filename_of_the_page_created ,& & enter_the_filename_of_the_page_deleted , enter_the_rank_of_the_post_to_delete , enter_the_rank_of_the_post_to_modify ,& & empty_page , export_html_dir , fblog_dir , i18n , init_conf , init_data , is_a_wrong_argument , is_deleted , modify_a_post ,& & new_post , no_fblog_directory_at , no_fblog_directory_here , no_post , not_modified , now_you_could_edit_settings ,& & now_you_should_update , pages , pages_dir , path , posts , post_amount , quit , show_last_posts , show_full_list_css ,& & show_full_list_pages , show_full_list_posts , show_version , styles , styles_dir , terminate , total_entries , update , version ,& & the_folowing_files_and_directories_will_be_created , there_is_already_a_blog , there_is_not_directory ,& & this_file_doesnt_exist , this_number_is_wrong , too_much_arguments , up , update_all , wrong_entry ! character ( len =* ), parameter :: version = '9999-r412' character ( len =* ), parameter :: copyright = '2016' character ( len =* ), parameter :: config_file = 'fBlog/fblog.conf' character ( len =* ), parameter :: styles_dir = 'fBlog/styles/' character ( len =* ), parameter :: data_dir = 'fBlog/data/' character ( len =* ), parameter :: export_html_dir = 'fBlog/export_http/' character ( len =* ), parameter :: fblog_dir = \"fBlog/\" character ( len =* ), parameter :: pages_dir = 'fBlog/pages/' character ( len =* ), parameter :: empty_page = '[...]' character ( len =* ), parameter :: default_editor = 'vi' integer , parameter :: post_amount = 9 integer entries_per_page , total_entries , year1 , year2 logical css , css_print character ( len = 3 ), save :: direction = 'ltr' character ( len = 80 ), dimension ( 12 ) :: monthes = [ \"jan\" , \"feb\" , \"mar\" , \"apr\" , \"may\" , \"jun\" , \"jul\" , \"aug\" , \"sep\" , \"oct\" , \"nov\" , \"dec\" ] character (:), allocatable :: archive , blog_title , charset , css_file , css_print_file , description , editor , footer , footer_1 ,& & header_1 , header_2 , home , language , menu_html , path , permalink , printer_friendly , str_i18n integer , allocatable :: stats (:,:) type :: post_t integer :: year = 0 integer :: month = 0 integer :: day = 0 integer :: hour = 0 integer :: minute = 0 integer :: seconde = 0 character ( len = 14 ) :: date = \"\" character ( len = 512 ) :: post_title = \"\" endtype post_t type ( post_t ), allocatable :: data_post (:,:) character ( len =* ), parameter :: nl = new_line ( 'a' ) character ( len =* ), parameter :: show_version = 'fBlog ' // version // nl // 'Copyright (C) ' // copyright // ' Denis& & Bernard' // nl // nl // 'License GPLv3+: GNU GPL version 3 or later ' // '<http://gnu.org/licenses/gpl.html>.' // nl // & & 'This is free software: you are free to change and redistribute it.' // nl // 'There is NO WARRANTY, to the extent& & permitted by law.' // nl // nl // 'Written by Denis Bernard.' ! enum , bind ( c ) enumerator bad_argument enumerator begin_update enumerator create_new_blog enumerator copy_css enumerator copy_css_print enumerator deleted enumerator delete_a_css enumerator delete_a_page enumerator delete_a_post enumerator deleted_file enumerator deleted_page enumerator deleted_you_could_update_the_config enumerator edit_a_page enumerator edit_a_css enumerator edited_page enumerator edit_settings enumerator end_clearing_subdirectory enumerator enter_the_filename_of_the_css_deleted enumerator enter_the_filename_of_the_page_created enumerator enter_the_filename_of_the_page_deleted enumerator enter_the_rank_of_the_post_to_delete enumerator enter_the_rank_of_the_post_to_modify enumerator error_css enumerator error_css_print enumerator files_generated_inside_the_subdirectory enumerator initialisation_reading_conf enumerator initialisation_reading_data enumerator is_a_wrong_argument enumerator is_deleted enumerator make_archive_pages enumerator make_clear_subdirectory enumerator make_home_page enumerator make_pages enumerator make_permalink_pages enumerator modify_a_post enumerator monthly_archive_pages_built enumerator new_post enumerator no_fblog_directory_at enumerator no_fblog_directory_here enumerator no_post enumerator not_modified enumerator now_you_could_edit_settings enumerator now_you_should_update enumerator pages enumerator pages_built enumerator permalink_pages_built enumerator posts enumerator quit enumerator show_last_posts enumerator show_full_list_css enumerator show_full_list_pages enumerator show_full_list_posts enumerator styles enumerator the_folowing_files_and_directories_will_be_created enumerator there_is_already_a_blog enumerator there_is_not_directory enumerator this_file_doesnt_exist enumerator this_number_is_wrong enumerator too_much_arguments enumerator up enumerator update_all enumerator update_done enumerator shell_said enumerator system_said enumerator warn_about_no_css enumerator warn_about_no_css_print enumerator wrong_entry end enum ! enum , bind ( c ) enumerator en enumerator fr end enum ! contains ! function i18n ( msg ) !! Provide sentences in the language according the LANG environment variable. integer , intent ( in ) :: msg character (:), allocatable :: i18n integer :: l = 0 , stat character ( len = 2 ) lang character ( len = 256 ), dimension ( en : fr , 0 : wrong_entry ) :: msgstr = \"\" ! include 'i18n.inc' ! call get_environment_variable ( name = \"LANG\" , value = lang , status = stat ) if ( lang == \"en\" ) l = en if ( lang == \"fr\" ) l = fr str_i18n = trim ( msgstr ( l , msg )) if ( len ( str_i18n ) == 0 ) str_i18n = trim ( msgstr ( en , msg )) i18n = str_i18n deallocate ( str_i18n ) end function i18n ! function clock () !! Print the computer clock time for update messages. character ( len = 10 ) :: raw_clock character ( len = 15 ) :: clock ! call date_and_time ( time = raw_clock ) clock = '[' // raw_clock ( 1 : 2 ) // ':' // raw_clock ( 3 : 4 ) // ':' // raw_clock ( 5 : 10 ) // '] ' end function clock ! subroutine html_home ( user_home ) !! Make HTML code for home page. character ( len =* ), intent ( in ) :: user_home integer :: file_length , i , ios , lu_index , lu_post character ( len = 6 ) :: current_entry_txt character ( len = 256 ) :: system_msg character (:), allocatable :: post ! open ( newunit = lu_index , file = path // export_html_dir // \"index.html\" , action = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1171 , sys_msg = system_msg ) write ( unit = lu_index , fmt = '(a)' ) header_1 , '<title>' // blog_title // ' | ' // trim ( user_home ) // '</title>' // header_2 if ( len ( menu_html ) > 0 ) write ( unit = lu_index , fmt = '(a)' ) '<nav>' , '<hr />' , menu_html // '<hr />' , '</nav>' if ( entries_per_page > total_entries ) entries_per_page = total_entries if ( total_entries > 0 ) then do i = 1 , entries_per_page post = \"\" inquire ( file = path // data_dir // data_post ( i , 6 )% date // '.blog' , size = file_length ) post = repeat ( \" \" , file_length ) open ( newunit = lu_post , file = path // data_dir // data_post ( i , 6 )% date // '.blog' , access = 'stream' , action = 'read' ,& & iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1173 , sys_msg = system_msg ) read ( unit = lu_post ) post close ( unit = lu_post ) write ( unit = current_entry_txt , fmt = '(g0)' ) i write ( unit = lu_index , fmt = '(a)' ) '<article>' if ( total_entries > 1 ) then write ( unit = lu_index , fmt = '(a)' , advance = 'no' ) '<header>' , '<h3><a href=\"' // data_post ( i , 6 )% date // '.html\">' & & // trim ( adjustl ( data_post ( i , 7 )% post_title )) // '</a></h3>' , '</header>' else write ( unit = lu_index , fmt = '(a)' , advance = 'no' ) '<header>' , '<h3>' // trim ( adjustl ( data_post ( i , 7 ) % post_title )) & & // '</h3>' , '</header>' end if write ( unit = lu_index , fmt = '(a)' , advance = 'no' ) post ( len_trim (( data_post ( i , 7 )% post_title )) + 2 : file_length ) if ( total_entries > 1 ) write ( unit = lu_index , fmt = '(g0)' ) '<footer>' , '<a href=\"' // data_post ( i , 6 )% date // '.html\"& &>' // permalink // '</a>&nbsp;&nbsp;' , '<a href=\"' // data_post ( i , 6 )% date // '.htm\">' // printer_friendly // '<& &/a                 >&nbsp;&nbsp;' , '<samp dir=\"ltr\"><time dir=\"ltr\" datetime=\"' // data_post ( i , 6 )% date ( 1 : 4 ) // & & '-' // data_post ( i , 6 ) % date ( 5 : 6 ) // '-' // data_post ( i , 6 )% date ( 7 : 8 ) // 'T' // data_post ( i , 6 )% date ( 9 : 10 ) // ':' // & & data_post ( i , 6 ) % date ( 11 : 12 ) // '\">[' // data_post ( i , 6 )% date ( 1 : 4 ) // '-' // data_post ( i , 6 )% date ( 5 : 6 ) // '-' // & & data_post ( i , 6 ) % date ( 7 : 8 ) // ' (' // data_post ( i , 6 )% date ( 9 : 10 ) // ':' // data_post ( i , 6 )% date ( 11 : 12 ) // ')]' // '<& &/time> [# ' // trim ( current_entry_txt ) // ']</samp>' , '</footer>' write ( unit = lu_index , fmt = '(a)' ) '</article>' close ( unit = lu_post ) end do else write ( unit = lu_index , fmt = '(a)' ) '<article><h3>' // empty_page // '</h3></article>' end if if ( total_entries > entries_per_page ) write ( unit = lu_index , fmt = '(a)' ) '<nav>' , '<hr />' , '<a  rel=\"prev\" href=\"' // & & data_post ( entries_per_page + 1 , 6 )% date // '.html\" >&nbsp;=>&nbsp;</a>' , '</nav>' write ( unit = lu_index , fmt = '(a)' ) footer_1 close ( unit = lu_index ) end subroutine html_home ! subroutine html_month_archive ( n_pages ) !! Make HTML code for monthly index pages. !  This routine is a shame. But it works... Maybe I'll rewrite it in the future. integer , intent ( out ) :: n_pages logical :: file_exist integer :: current_entry , i , ios , j , k , lu_m_archive character ( len = 6 ) :: m_archive character ( len = 6 ) :: m_archive1 = \"\" character ( len = 12 ) :: m_archive2 character ( len = 256 ) :: system_msg ! n_pages = 0 do current_entry = 1 , total_entries m_archive = data_post ( current_entry , 6 )% date ( 1 : 6 ) do i = 1 , total_entries if ( m_archive == m_archive1 ) cycle if ( data_post ( i , 6 )% date ( 1 : 6 ) /= m_archive ) cycle if ( i > 1 ) then if ( data_post ( i - 1 , 6 )% date ( 1 : 6 ) == m_archive ) cycle end if inquire ( file = path // export_html_dir // data_post ( current_entry , 6 )% date ( 1 : 6 ) // \".html\" , exist = file_exist ) if ( file_exist ) cycle m_archive1 = m_archive open ( newunit = lu_m_archive , file = path // export_html_dir // data_post ( current_entry , 6 )% date ( 1 : 6 ) // \".html\" , action & & = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1181 , sys_msg = system_msg ) write ( unit = lu_m_archive , fmt = '(a)' ) header_1 , '<title>' // blog_title // ' | ' // trim ( archive ) // ' ' // & & data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // data_post ( current_entry , 6 )% date ( 5 : 6 ) // '</title>' // header_2 if ( len ( menu_html ) > 0 ) write ( unit = lu_m_archive , fmt = '(a)' ) '<nav>' , '<hr />' , menu_html // '<hr />' , '</nav>' write ( unit = lu_m_archive , fmt = '(a)' ) '<article>' , '<header>' , '<h3>' // trim ( archive ) // '<span dir=\"ltr\"><code> [' & & // data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // data_post ( current_entry , 6 )% date ( 5 : 6 ) // ']</code></span></h3>' & &, '</header>' , '<ol>' k = 1 do j = 1 , total_entries m_archive2 = data_post ( j , 6 )% date ( 1 : 12 ) if ( m_archive2 ( 1 : 6 ) /= m_archive1 ) cycle write ( unit = lu_m_archive , fmt = '(a)' ) '<li><span dir=\"ltr\"><code>[' // data_post ( j , 6 )% date ( 1 : 4 ) // '-' // & & data_post ( j , 6 )% date ( 5 : 6 ) // '-' // data_post ( j , 6 )% date ( 7 : 8 ) // ' (' // data_post ( j , 6 )% date ( 9 : 10 ) // ':' // & & data_post ( j , 6 )% date ( 11 : 12 ) // ')] </code></span>&nbsp;<a href=\"' // data_post ( j , 6 )% date ( 1 : 14 ) // '.html' // & & '\">' // trim ( adjustl ( data_post ( j , 7 )% post_title )) // '</a></li>' K = k + 1 end do write ( unit = lu_m_archive , fmt = '(a)' ) '</ol>' , '</article>' , footer_1 close ( unit = lu_m_archive ) n_pages = n_pages + 1 end do end do end subroutine html_month_archive ! subroutine html_page ( n_pages ) !! Make HTML code of extra Web pages use , intrinsic :: iso_fortran_env , only :& iostat_end integer , intent ( out ) :: n_pages integer :: file_length , ios , lu_data_page , lu_page , lu_page_list character (:), allocatable :: post character ( len = 256 ) :: system_msg character ( len = 512 ) :: readline ! n_pages = 0 call execute_command_line ( command = 'ls ' // path // pages_dir // \" > \" // path // fblog_dir // 'pages_list.txt' ) open ( newunit = lu_page_list , file = path // fblog_dir // 'pages_list.txt' , status = 'old' , action = 'read' , iostat = ios ,& & iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1221 , sys_msg = system_msg ) build_pages : do post = \"\" read ( unit = lu_page_list , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit build_pages inquire ( file = path // pages_dir // trim ( readline ), size = file_length ) post = repeat ( \" \" , file_length ) open ( newunit = lu_data_page , file = path // PAGES_DIR // trim ( readline ), access = 'stream' , action = 'read' , iostat = ios ,& & iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1223 , sys_msg = system_msg ) read ( unit = lu_data_page ) post close ( unit = lu_data_page ) open ( newunit = lu_page , file = path // export_html_dir // trim ( readline ), action = 'write' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1222 , sys_msg = system_msg ) write ( unit = lu_page , fmt = '(a)' ) header_1 , '<title>' // trim ( blog_title ) // '</title>' // header_2 , '<nav>' , '<hr />' ,& & menu_html // '<hr />' , '</nav>' , '<article>' , post // '</article>' , footer_1 close ( unit = lu_page ) n_pages = n_pages + 1 end do build_pages close ( unit = lu_page_list , status = 'delete' ) end subroutine html_page ! subroutine html_permalink () !! Make HTML code for permalink pages. integer :: current_entry , file_length , ios , lu_permalink , lu_post , lu_printer_friendly_page character (:), allocatable :: post character ( len = 6 ) :: current_entry_txt character ( len = 256 ) :: system_msg ! do current_entry = 1 , total_entries post = \"\" write ( unit = current_entry_txt , fmt = '(g0)' ) current_entry inquire ( file = path // data_dir // data_post ( current_entry , 6 )% date // '.blog' , size = file_length ) post = repeat ( \" \" , file_length ) open ( newunit = lu_post , file = path // data_dir // data_post ( current_entry , 6 )% date // '.blog' , access = 'stream' , action = & & 'read' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1193 , sys_msg = system_msg ) read ( unit = lu_post ) post close ( unit = lu_post ) ! Printer friendly page open ( newunit = lu_printer_friendly_page , file = path // export_html_dir // data_post ( current_entry , 6 )% date // \".htm\" , action & & = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1241 , sys_msg = system_msg ) write ( unit = lu_printer_friendly_page , fmt = '(a)' ) header_1 , '<title>' // blog_title // ' | ' // & & trim ( data_post ( current_entry , 7 )% post_title ) // '</title>' if ( css_print ) write ( unit = lu_printer_friendly_page , fmt = '(a)' ) '<link rel=\"stylesheet\" href=\"' // css_print_file // '\"& & type=\"text/css\" media=\"all\" />' write ( unit = lu_printer_friendly_page , fmt = '(a)' ) '</head>' , '<body>' , '<article>' , '<h3>' ,& & trim ( adjustl ( data_post ( current_entry , 7 ) % post_title )), '</h3>' , post ( len_trim ( data_post ( current_entry , 7 )% post_title )& & + 2 : len ( post )) // '</article>' , '<footer>' , '<hr />' , '<address>' // blog_title // '</address>' , '<samp dir=\"ltr\">' & & // data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // data_post ( current_entry , 6 )% date ( 5 : 6 ) // '-' // & & data_post ( current_entry , 6 )% date ( 7 : 8 ) // ' (' // data_post ( current_entry , 6 )% date ( 9 : 10 ) // ':' // & & data_post ( current_entry , 6 )% date ( 11 : 12 ) // ')' // '</samp>' , '</footer>' , '</body>' , '</html>' close ( unit = lu_printer_friendly_page ) ! End printer friendly page open ( newunit = lu_permalink , file = path // export_html_dir // data_post ( current_entry , 6 )% date // \".html\" , action = 'write' ,& & iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1191 , sys_msg = system_msg ) write ( unit = lu_permalink , fmt = '(g0)' ) header_1 , '<title>' // blog_title // ' | ' // trim ( data_post ( current_entry , 7 ) & &% post_title ) // '</title>' // header_2 menu : if ( len ( menu_html ) > 0 ) then if ( current_entry < total_entries . and . current_entry /= 1 ) then write ( unit = lu_permalink , fmt = '(g0)' , advance = 'no' ) '<nav>' // nl // '<hr />' // nl // '<a rel=\"next\" href=\"' // & & data_post ( current_entry - 1 , 6 )% date // '.html' // '\">&nbsp;&lt;=&nbsp;</a> ' // ' <a rel& &=\"prev\" href=\"' // data_post ( current_entry + 1 , 6 )% date // '.html\">&nbsp;=>&nbsp;</a>' // nl // menu_html // '<hr& & />' // nl // '</nav>' // nl exit menu end if if ( current_entry == 1 . and . total_entries > 1 ) then write ( unit = lu_permalink , fmt = '(g0)' , advance = 'no' ) '<nav>' // nl // '<hr />' // nl // '<a rel=\"prev\" href=\"' // & & data_post ( current_entry + 1 , 6 )% date // '.html' // '\">&nbsp;=>&nbsp;</a>' // menu_html // '<hr& &  />' // nl // '</nav>' // nl exit menu end if if ( total_entries == current_entry . and . total_entries > 1 ) then write ( unit = lu_permalink , fmt = '(g0)' , advance = 'no' ) '<nav>' // nl // '<hr />' // nl // '<a rel=\"next\" href=\"' // & & data_post ( current_entry - 1 , 6 )% date // '.html' // '\">&nbsp;&lt;=&nbsp;</a>' // nl // menu_html // '<hr />' // & & nl // '</nav>' // nl exit menu end if if ( total_entries == 1 ) then write ( unit = lu_permalink , fmt = '(g0)' , advance = 'no' ) '<nav>' // nl // '<hr />' // nl // menu_html // '<hr />' // & & nl // '</nav>' // nl // '<hr />' // nl // '</nav>' // nl exit menu end if end if menu write ( unit = lu_permalink , fmt = '(g0)' ) '<article>' , '<header>' , '<h3>' // trim ( adjustl ( data_post ( current_entry , 7 )& &% post_title )) // '</h3>' , '</header>' , post ( len_trim ( data_post ( current_entry , 7 )% post_title ) + 2 : file_length ) // '& &<footer>' , '<a href=\"' // data_post ( current_entry , 6 )% date // '.htm\">' // printer_friendly // '</a>&nbsp;&nbsp;' , '& &<samp dir=\"ltr\"><time datetime=\"' // data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // data_post ( current_entry , 6 )& &% date ( 5 : 6 ) // '-' // data_post ( current_entry , 6 )% date ( 7 : 8 ) // 'T' // data_post ( current_entry , 6 )% date ( 9 : 10 ) // ':' // & & data_post ( current_entry , 6 )% date ( 11 : 12 ) // '\">[' // data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // & & data_post ( current_entry , 6 )% date ( 5 : 6 ) // '-' // data_post ( current_entry , 6 )% date ( 7 : 8 ) // ' (' // & & data_post ( current_entry , 6 )% date ( 9 : 10 ) // ':' // data_post ( current_entry , 6 )% date ( 11 : 12 ) // ')]' // '</time>&nbsp;' // & & ' [# ' // trim ( current_entry_txt ) // ']</samp>' , '</footer>' , '</article>' , footer_1 close ( unit = lu_permalink ) end do end subroutine html_permalink ! subroutine html_year_archive () !! Make HTML code of main index page. integer :: i , ios , j , lu_archive , total_month_entries character ( len = 256 ) :: system_msg ! open ( newunit = lu_archive , file = path // export_html_dir // archive // \".html\" , action = 'write' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1201 , sys_msg = system_msg ) write ( unit = lu_archive , fmt = '(a)' ) header_1 // nl // '<title>' // blog_title // ' | ' // trim ( archive ) // '</title>' // & & header_2 if ( len ( menu_html ) > 0 ) write ( unit = lu_archive , fmt = '(a)' ) '<nav>' , '<hr />' , menu_html // '<hr />' , '</nav>' write ( unit = lu_archive , fmt = '(a)' ) '<article>' , '<header>' , '<h3>' // archive // '</h3>' , '</header>' , '<dl>' scan_year : do j = year1 , year2 , - 1 write ( unit = lu_archive , fmt = '(a, i4, 2a)' ) '<dt>' , stats ( j , 0 ), '</dt>' , '<dd>' scan_month : do i = 1 , 12 total_month_entries = stats ( j , i ) if ( total_month_entries == 0 ) cycle write ( unit = lu_archive , fmt = '(a, i4, i2.2, 3a, I2.2, a)' ) '<a href=\"' , j , i , '.html\">' , trim ( monthes ( i )), '</a><code& & dir=\"ltr\">[' , total_month_entries , ']</code>' end do scan_month write ( unit = lu_archive , fmt = '(a)' ) '</dd>' end do scan_year write ( unit = lu_archive , fmt = '(a)' ) '</dl>' , '</article>' , footer_1 close ( unit = lu_archive ) end subroutine html_year_archive ! subroutine init_conf () !! Initialisation according the settings of the configuration file and environment. !! (This is the first step of two.) integer :: ios , lu_config , position_char character ( len = 512 ) :: readline character ( len = 256 ) :: system_msg character (:), allocatable :: label , url , user_editor ! css_file = \"\" css_print_file = \"\" archive = \"Archive\" home = \"Home\" permalink = \"permalink\" printer_friendly = \"printer-friendly page\" call get_environment_variable ( name = \"EDITOR\" , value = readline ) editor = trim ( readline ) if ( len ( editor ) == 0 ) editor = default_editor open ( newunit = lu_config , file = path // config_file , status = 'old' , action = 'read' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1111 , sys_msg = system_msg ) settings : do read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline if ( ios /= 0 ) exit readline = adjustl ( readline ) if ( readline ( 1 : 1 ) == \"#\" . or . len ( trim ( readline )) == 0 ) cycle global : if ( trim ( readline ) == \"[global]\" ) then do user_editor = \"\" read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit global if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit global end if if ( trim ( readline ) == \"\" ) cycle position_char = index ( string = readline , substring = \"=\" ) select case ( readline ( 1 : position_char - 1 )) case ( \"TITLE\" ) blog_title = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"CHARSET\" ) charset = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"LANG\" ) language = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"DIRECTION\" ) direction = adjustl ( readline ( position_char + 1 :)) if ( len ( trim ( direction )) == 0 ) direction = \"ltr\" case ( \"MAX_ENTRIES\" ) readline = adjustl ( readline ( position_char + 1 :)) read ( unit = readline , fmt = '(I2)' ) entries_per_page if ( entries_per_page < 1 ) entries_per_page = 10 case ( \"CSS\" ) css_file = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"CSS_PRINT\" ) css_print_file = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"EDITOR\" ) user_editor = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( user_editor ) > 0 ) editor = user_editor end select end do end if global locale : if ( trim ( readline ) == \"[translation]\" ) then do read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit locale position_char = index ( string = readline , substring = \"=\" ) if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit locale end if if ( trim ( readline ) == \"\" ) cycle select case ( readline ( 1 : position_char - 1 )) case ( \"HOME\" ) home = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( home ) == 0 ) home = \"Home\" case ( \"ARCHIVE\" ) archive = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( archive ) == 0 ) archive = \"Archive\" case ( \"PERMALINK\" ) permalink = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( permalink ) == 0 ) permalink = \"permalink\" case ( \"PRINTER_FRIENDLY\" ) printer_friendly = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( printer_friendly ) == 0 ) printer_friendly = \"printer-friendly page\" case ( \"JANUARY\" ) monthes ( 1 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 1 ) == \"\" ) monthes ( 1 ) = \"jan\" case ( \"FEBRUARY\" ) monthes ( 2 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 2 ) == \"\" ) monthes ( 2 ) = \"feb\" case ( \"MARCH\" ) monthes ( 3 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 3 ) == \"\" ) monthes ( 3 ) = \"mar\" case ( \"APRIL\" ) monthes ( 4 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 4 ) == \"\" ) monthes ( 4 ) = \"apr\" case ( \"MAY\" ) monthes ( 5 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 5 ) == \"\" ) monthes ( 5 ) = \"may\" case ( \"JUNE\" ) monthes ( 6 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 6 ) == \"\" ) monthes ( 6 ) = \"jun\" case ( \"JULY\" ) monthes ( 7 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 7 ) == \"\" ) monthes ( 7 ) = \"jul\" case ( \"AUGUST\" ) monthes ( 8 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 8 ) == \"\" ) monthes ( 8 ) = \"aug\" case ( \"SEPTEMBER\" ) monthes ( 9 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 9 ) == \"\" ) monthes ( 9 ) = \"sep\" case ( \"OCTOBER\" ) monthes ( 10 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 10 ) == \"\" ) monthes ( 10 ) = \"oct\" case ( \"NOVEMBER\" ) monthes ( 11 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 11 ) == \"\" ) monthes ( 11 ) = \"nov\" case ( \"DECEMBER\" ) monthes ( 12 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 12 ) == \"\" ) monthes ( 12 ) = \"dec\" end select end do end if locale menu : if ( trim ( readline ) == \"[menu]\" ) then menu_html = \"\" do url = \"\" read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit menu position_char = index ( string = readline , substring = \"=\" ) if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit menu end if if ( trim ( readline ) == \"\" ) cycle position_char = index ( string = readline , substring = \"=\" ) label = trim ( readline ( 1 : position_char - 1 )) url = trim ( adjustl ( readline ( position_char + 1 :))) menu_html = menu_html // '[<a href=\"' // url // '\">' // label // '</a>]' // nl end do end if menu template_description : if ( trim ( readline ) == \"[description]\" ) then description = \"\" do read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit template_description if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit template_description end if if ( trim ( readline ) == \"\" ) cycle description = description // trim ( readline ) // nl end do end if template_description template_footer : if ( trim ( readline ) == \"[footer]\" ) then footer = \"\" do read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit template_footer if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit template_footer end if if ( trim ( readline ) == \"\" ) cycle footer = trim ( footer ) // trim ( readline ) // nl end do end if template_footer end do settings close ( unit = lu_config ) if ( total_entries < 2 ) then menu_html = '[<a href=\"index.html\">' // home // '</a>]' // nl // trim ( menu_html ) else menu_html = '[<a href=\"index.html\">' // home // '</a>]' // nl // '[<a href=\"' // archive // '.html\">' // archive // '</a>]' & // nl // menu_html end if if ( len ( css_file ) == 0 ) then css = . false . else css = . true . end if if ( len ( css_print_file ) == 0 ) then css_print = . false . else css_print = . true . end if end subroutine init_conf ! subroutine init_data () !! Collect titles and dates of entries. (This is the second step of two.) use , intrinsic :: iso_fortran_env , only : & iostat_end integer :: command_status = 0 , exit_status = 0 , file_length , intreadline , intreadline1 , i , ios , j , lu_lstmp , lu_post ,& & lu_wrong character ( len = 256 ) :: command_msg = \"\" , system_msg character ( len = 512 ) :: readline , readline1 ! if ( allocated ( data_post )) deallocate ( data_post ) if ( allocated ( stats )) deallocate ( stats ) call execute_command_line ( command = 'ls -r ' // path // data_dir // ' > ' // path // fblog_dir // 'data_list.txt' , exitstat = & & exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1121 , cmd_msg = command_msg ) open ( newunit = lu_lstmp , file = path // fblog_dir // \"data_list.txt\" , action = 'read' , status = 'old' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1122 , sys_msg = system_msg ) do read ( unit = lu_lstmp , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit if ( len ( trim ( readline )) /= 19 ) then open ( newunit = lu_wrong , file = path // data_dir // trim ( readline ), status = 'old' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1123 , sys_msg = system_msg ) print * , i18n ( is_deleted ) // path // data_dir // trim ( readline ) close ( unit = lu_wrong , status = 'delete' ) read ( unit = lu_lstmp , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit end if inquire ( file = path // data_dir // trim ( readline ), size = file_length ) if ( file_length < 2 ) then open ( newunit = lu_wrong , file = path // data_dir // trim ( readline ), status = 'old' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1124 , sys_msg = system_msg ) print * , i18n ( is_deleted ) // path // data_dir // trim ( readline ) close ( unit = lu_wrong , status = 'delete' ) end if end do close ( unit = lu_lstmp ) call execute_command_line ( command = 'ls -r ' // path // data_dir // ' > ' // path // FBLOG_DIR // 'data_list.txt' , exitstat = & & exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1125 , cmd_msg = command_msg ) open ( newunit = lu_lstmp , file = path // fblog_dir // \"data_list.txt\" , action = 'read' , status = 'old' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1126 , sys_msg = system_msg ) total_entries = 0 do read ( unit = lu_lstmp , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit total_entries = total_entries + 1 end do if ( total_entries == 0 ) then close ( unit = lu_lstmp , status = 'delete' ) return end if rewind ( unit = lu_lstmp ) allocate ( data_post ( 1 : total_entries , 1 : 7 )) readline = \"\" do i = 1 , total_entries read ( unit = lu_lstmp , fmt = '(a)' ) readline data_post ( i , 6 )% date = trim ( readline ( 1 : 14 )) open ( newunit = lu_post , file = path // data_dir // trim ( readline ), action = 'read' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1127 , sys_msg = system_msg ) read ( unit = lu_post , fmt = '(a)' ) readline1 data_post ( i , 7 )% post_title = trim ( readline1 ) read ( unit = readline ( 1 : 4 ), fmt = * ) intreadline data_post ( i , 1 )% year = intreadline read ( unit = readline ( 5 : 6 ), fmt = * ) intreadline data_post ( i , 2 )% month = intreadline read ( unit = readline ( 7 : 8 ), fmt = * ) intreadline data_post ( i , 3 )% day = intreadline read ( unit = readline ( 9 : 10 ), fmt = * ) intreadline data_post ( i , 4 )% hour = intreadline read ( unit = readline ( 11 : 12 ), fmt = * ) intreadline data_post ( i , 5 )% minute = intreadline read ( unit = readline ( 13 : 14 ), fmt = * ) intreadline data_post ( i , 6 )% seconde = intreadline data_post ( i , 7 )% post_title = trim ( readline1 ) close ( unit = lu_post ) end do year1 = data_post ( 1 , 1 )% year year2 = data_post ( total_entries , 1 )% year allocate ( stats ( year2 : year1 , 0 : 14 )) stats ( year2 : year1 , 0 : 14 ) = 0 do j = year2 , year1 stats ( j , 0 ) = j end do rewind ( unit = lu_lstmp ) do read ( unit = lu_lstmp , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit read ( unit = readline ( 1 : 4 ), fmt = * ) intreadline read ( unit = readline ( 5 : 6 ), fmt = * ) intreadline1 stats ( intreadline , intreadline1 ) = stats ( intreadline , intreadline1 ) + 1 end do close ( unit = lu_lstmp , status = 'delete' ) end subroutine init_data ! subroutine update () !! Build all pages of the blog. The most important procedure of the project! !! This procedure could be called from an other program by including in it module fblog_m. logical :: file_exist integer :: command_status = 0 , count_archive_pages , count_css = 0 , count_pages = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! call init_data () call init_conf () header_1 = '<!DOCTYPE html>' if (( len ( language ) == 0 ) . and . ( direction == \"ltr\" )) header_1 = header_1 // nl // '<html>' if (( len ( language ) == 0 ) . and . ( direction == \"rtl\" )) header_1 = header_1 // nl // '<html dir=\"rtl\">' if (( len ( language ) > 1 ) . and . ( direction == \"ltr\" )) header_1 = header_1 // nl // '<html lang=\"' // language // '\">' if (( len ( language ) > 1 ) . and . ( direction == \"rtl\" )) header_1 = header_1 // nl // '<html lang=\"' // language // '\" dir=\"rtl\">' header_1 = header_1 // nl // '<head>' // nl // '<meta charset=' // '\"' // charset // '\" />' // nl // '<meta name=\"generator\"& & content=\"fBlog ' // VERSION // '\" />' if ( css ) header_2 = nl // '<link rel=\"stylesheet\" href=\"' // css_file // '\" type=\"text/css\" media=\"all\" />' // nl // '</head>' & & // nl // '<body>' // nl // '<header>' // nl // '<h1><a href=\"index.html\">' // blog_title // '</a></h1>' // nl // '<& &/header>' if ( len ( description ) > 0 ) header_2 = header_2 // nl // '<aside>' // nl // description // '</aside>' if ( len ( footer ) > 0 ) footer_1 = '<footer>' // nl // '<hr />' // nl // footer // '</footer>' // nl // '</body>' // nl // '</html& &>' print '(a)' , clock () // i18n ( begin_update ) print '(a)' , clock () // i18n ( initialisation_reading_data ) print '(a)' , clock () // i18n ( initialisation_reading_conf ) inquire ( file = path // export_html_dir // 'index.html' , exist = file_exist ) if ( file_exist ) then print '(6a)' , clock (), i18n ( make_clear_subdirectory ), \"./\" , path , export_html_dir , \"'\" call execute_command_line ( command = \"rm \" // path // export_html_dir // \"*\" , wait = . true ., exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1211 , cmd_msg = command_msg ) print '(6a)' , clock (), i18n ( end_clearing_subdirectory ), \"./\" , path , export_html_dir , \"'\" end if if ( total_entries > 1 ) then print '(6a)' , clock (), i18n ( make_permalink_pages ), \"./\" , path , export_html_dir , \"ccyymmddhhmmss.htm(l)'\" call html_permalink () print '(a,g0,a)' , clock (), 2 * total_entries , \" \" // i18n ( permalink_pages_built ) call html_month_archive ( n_pages = count_archive_pages ) print '(a,g0,2a)' , clock (), count_archive_pages , \" \" , i18n ( monthly_archive_pages_built ) print '(7a)' , clock (), i18n ( make_archive_pages ), \"./\" , path , export_html_dir , archive , \".html'\" call html_year_archive () end if print '(6a)' , clock (), i18n ( make_home_page ), \"./\" , path , export_html_dir , \"index.html'\" call html_home ( user_home = home ) print '(6a)' , clock (), i18n ( make_pages ), \"./\" , path , export_html_dir , \"*.html'\" call html_page ( n_pages = count_pages ) print '(a,g0,2a)' , clock (), count_pages , \" \" , i18n ( pages_built ) if ( css ) then print '(7a)' , clock (), i18n ( copy_css ), \"./\" , path , export_html_dir , css_file , \"'\" call execute_command_line ( command = \"cp \" // path // styles_dir // css_file // \" \" // path // export_html_dir , exitstat = & & exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1212 , inf_msg = i18n ( error_css )) else print '(a)' , i18n ( warn_about_no_css ) end if if ( css_print . and . ( total_entries > 1 )) then print '(7a)' , clock (), i18n ( copy_css_print ), \"./\" , path , export_html_dir , css_print_file , \"'\" call execute_command_line ( command = \"cp \" // path // styles_dir // css_print_file // \" \" // path // export_html_dir ,& & exitstat = exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1213 , inf_msg = i18n ( error_css_print )) else if ( css_print . and . ( total_entries > 1 )) print '(a)' , i18n ( warn_about_no_css_print ) end if print '(2a)' , clock (), i18n ( update_done ) if ( css ) count_css = 1 if ( css_print . and . ( total_entries > 1 )) count_css = count_css + 1 if ( total_entries < 2 ) print '(g0,6a)' , count_pages + 1 + count_css , \" \" , i18n ( files_generated_inside_the_subdirectory ), & & \"./\" , path , export_html_dir , \"'\" if ( total_entries > 1 ) print '(g0,6a)' , count_archive_pages + ( 2 * total_entries ) + count_pages + 2 + count_css , \" \" ,& & i18n ( files_generated_inside_the_subdirectory ), \"./\" // path , export_html_dir , \"'\" end subroutine update ! subroutine terminate ( error_code , cmd_msg , inf_msg , sys_msg ) !! Double role: error function and normal terminaison of job. In case of malfunction, !! an error code is provided. This error code gives location of the failure in source !! code. ! use , intrinsic :: iso_fortran_env , only : error_unit ! integer , intent ( in ) :: error_code character ( len =* ), intent ( in ), optional :: cmd_msg character ( len =* ), intent ( in ), optional :: inf_msg character ( len =* ), intent ( in ), optional :: sys_msg character ( len =* ), parameter :: move_cursor_left = '[20D' ! if ( allocated ( archive )) deallocate ( archive ) if ( allocated ( blog_title )) deallocate ( blog_title ) if ( allocated ( charset )) deallocate ( charset ) if ( allocated ( css_file )) deallocate ( css_file ) if ( allocated ( css_print_file )) deallocate ( css_print_file ) if ( allocated ( data_post )) deallocate ( data_post ) if ( allocated ( description )) deallocate ( description ) if ( allocated ( editor )) deallocate ( editor ) if ( allocated ( footer )) deallocate ( footer ) if ( allocated ( footer_1 )) deallocate ( footer_1 ) if ( allocated ( header_1 )) deallocate ( header_1 ) if ( allocated ( header_2 )) deallocate ( header_2 ) if ( allocated ( home )) deallocate ( home ) if ( allocated ( language )) deallocate ( language ) if ( allocated ( menu_html )) deallocate ( menu_html ) if ( allocated ( path )) deallocate ( path ) if ( allocated ( permalink )) deallocate ( permalink ) if ( allocated ( printer_friendly )) deallocate ( printer_friendly ) if ( allocated ( stats )) deallocate ( stats ) ! !! 1000 -> 1010  subroutine add_post !! 1011 -> 1020  subroutine config !! 1021 -> 1030  subroutine create_blog !! 1031 -> 1040  subroutine delete_css !! 1041 -> 1050  subroutine delete_page !! 1051 -> 1060  subroutine delete_post !! 1061 -> 1070  subroutine edit_css !! 1071 -> 1080  subroutine edit_page !! 1081 -> 1090  subroutine edit_post !! 1091 -> 1100  program main !! 1111 -> 1120  subroutine init_conf !! 1121 -> 1130  subroutine init_data !! 1131 -> 1140  subroutine console !! 1141 -> 1150  subroutine menu_post !! 1151 -> 1160  subroutine list_css !! 1161 -> 1170  subroutine list_pages !! 1171 -> 1180  subroutine html_home !! 1181 -> 1190  subroutine html_month_archive !! 1191 -> 1200  subroutine html_permalink !! 1201 -> 1210  subroutine html_year_archive !! 1211 -> 1220  subroutine update !! 1221 -> 1230  subroutine html_page !! 1231 -> 1240  function console_menu !! 1241 -> 1250  subroutine html_permalink ! if ( error_code /= 0 ) then if ( len ( trim ( sys_msg )) > 0 ) write ( unit = error_unit , fmt = '(3a)' ) i18n ( system_said ), \" \" , trim ( sys_msg ) if ( len ( trim ( cmd_msg )) > 0 ) write ( unit = error_unit , fmt = '(3a)' ) i18n ( shell_said ), \" \" , trim ( cmd_msg ) if ( present ( inf_msg )) write ( unit = error_unit , fmt = '(a)' ) trim ( inf_msg ) write ( unit = error_unit , fmt = '(t12,g0,a)' , advance = 'no' ) error_code , char ( 27 ) // move_cursor_left error stop else if ( present ( inf_msg )) print '(a)' , trim ( inf_msg ) stop end if error stop 'Internal error in subroutine Terminate' end subroutine terminate ! end module fblog_m","tags":"","loc":"sourcefile/mod_fblog.f08.html","title":"mod_fblog.f08 – fBlog"},{"text":"Source Code ! Copyright (C) 2016 Denis Bernard. ! License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>. ! This is free software: you are free to change and redistribute it. ! There is NO WARRANTY, to the extent permitted by law. ! Written by Denis Bernard. ! !> Set of routines that are called either by command line interface !! or by console interface. ! module io_m ! use :: fblog_m , only : config_file , data_dir , data_post , editor , empty_page , export_html_dir , fblog_dir , i18n , init_conf ,& & init_data , no_post , pages_dir , path , styles_dir , the_folowing_files_and_directories_will_be_created ,& & there_is_already_a_blog , this_file_doesnt_exist , this_number_is_wrong , terminate , total_entries , update , version ! implicit none ! character ( len =* ), parameter :: config_txt_1 = & include 'config_txt_1.inc' character ( len =* ), parameter :: config_txt_2 = & include 'config_txt_2.inc' character ( len =* ), parameter :: help = & include 'help.inc' character ( len =* ), parameter :: css_standard_1 = & include 'css_standard_1.inc' character ( len =* ), parameter :: css_standard_2 = & include 'css_standard_2.inc' character ( len =* ), parameter :: css_standard_3 = & include 'css_standard_3.inc' character ( len =* ), parameter :: css_standard_print = & include 'css_standard_print.inc' character ( len =* ), parameter :: css_standard = css_standard_1 // css_standard_2 // css_standard_3 character ( len =* ), parameter :: lorem_ipsum = & include 'lorem_ipsum.inc' ! character ( len = :), allocatable :: config_txt ! private public add_post , config , create_blog , delete_page , delete_css , delete_post , edit_css , edit_page , edit_post , help , list_css ,& & list_pages , list_posts ! contains ! subroutine add_post ( recorded ) !! Display editor to edit a new post entry. logical , intent ( out ) :: recorded integer :: command_status = 0 , exit_status = 0 , ios , lu_post , post_size_after , post_size_before character ( len = 8 ) :: d character ( len = 10 ) :: t character ( len = 19 ) :: f_post character ( len = 256 ) :: command_msg = \"\" , system_msg = \"\" character ( len =* ), parameter :: put_title_and_text_here = 'The title here' // new_line ( 'a' ) // '<p> The text from here. </p>' ! recorded = . true . ! Initialisation needed. call init_conf () call date_and_time ( date = d , time = t ) f_post = d // t ( 1 : 6 ) // '.blog' open ( newunit = lu_post , file = path // data_dir // f_post , status = 'new' , action = 'write' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1001 , sys_msg = system_msg ) write ( unit = lu_post , fmt = '(a)' ) put_title_and_text_here close ( unit = lu_post ) inquire ( file = path // data_dir // f_post , size = post_size_before ) call execute_command_line ( command = editor // ' ' // path // data_dir // f_post , exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1002 , cmd_msg = command_msg ) ! Check if the post has been recorded or not. If not, the post is removed. This verification is done by comparing the length ! of the file before and after. inquire ( file = path // data_dir // f_post , size = post_size_after ) if ( post_size_before == post_size_after ) then recorded = . false . call execute_command_line ( command = 'rm ' // path // data_dir // f_post , exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) end if if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1003 , cmd_msg = command_msg ) end subroutine add_post ! subroutine config ( recorded ) !! Display the editor for modification of the configuration file. logical , intent ( out ) :: recorded integer :: command_status = 0 , exit_status = 0 , file_size_after , file_size_before character ( len = 256 ) :: command_msg = \"\" ! recorded = . true . ! Initialisation required. call init_conf () inquire ( file = path // config_file , size = file_size_before ) call execute_command_line ( command = editor // \" \" // path // config_file , exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1011 , cmd_msg = command_msg ) call init_conf () ! Check if the size of the file has changed. inquire ( file = path // config_file , size = file_size_after ) if ( file_size_before == file_size_after ) recorded = . false . end subroutine config ! subroutine create_blog () !! Create directories, files and install a new blog. ! logical :: file_exist integer :: command_status = 0 , exit_status = 0 , i , ios , lu_config , lu_page , lu_post , lu_style , lu_style_print character ( len = 1 ) :: char_i character ( len = 8 ) :: d character ( len = 10 ) :: t character ( len = 19 ) :: file_name_entry = \"\" character ( len = 256 ) :: command_msg = \"\" , system_msg = \"\" ! config_txt = config_txt_1 // \"CSS=fBlog-\" // version // \".css\" // new_line ( 'a' ) // \"\" // new_line ( 'a' ) // \"CSS_PRINT& &=fBlog_print-\" // version // \".css\" // new_line ( 'a' ) // \"\" // new_line ( 'a' ) // config_txt_2 inquire ( file = path // fblog_dir // '.' , exist = file_exist ) if ( file_exist ) call terminate ( error_code = 1021 , inf_msg = i18n ( there_is_already_a_blog )) print '(a)' , i18n ( the_folowing_files_and_directories_will_be_created ), path // fblog_dir , path // config_file , path // & & data_dir , path // export_html_dir , path // styles_dir , path // styles_dir // \"fBlog-\" // version // \".css\" , path // & & styles_dir // \"fBlog_print-\" // version // \".css\" , path // pages_dir , path // pages_dir // \"page1 to page3.html\" ! Create main directory. call execute_command_line ( command = \"mkdir \" // path // fblog_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1022 , cmd_msg = command_msg ) ! Create subdirectory for data. call execute_command_line ( command = \"mkdir \" // path // data_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1023 , cmd_msg = command_msg ) ! Create subdirectory for output. call execute_command_line ( command = \"mkdir \" // path // export_html_dir , exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1024 , cmd_msg = command_msg ) ! Create subdirectory for CSSs. call execute_command_line ( command = \"mkdir \" // path // styles_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1025 , cmd_msg = command_msg ) ! Create subdirectory for static pages. call execute_command_line ( command = \"mkdir \" // path // pages_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1026 , cmd_msg = command_msg ) ! Begin config file generation. open ( newunit = lu_config , file = path // config_file , status = 'new' , action = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1027 , sys_msg = system_msg ) if ( ios == 0 ) write ( unit = lu_config , fmt = '(a)' ) config_txt ! End of config file generation. close ( unit = lu_config ) ! Begin style sheets generation. open ( newunit = lu_style , file = path // styles_dir // \"fBlog-\" // version // \".css\" , status = 'new' , action = 'write' , iostat & & = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1028 , sys_msg = system_msg ) if ( ios == 0 ) write ( unit = lu_style , fmt = '(a)' ) css_standard ! End style sheet generation. close ( unit = lu_style ) ! Begin style sheets generation. open ( newunit = lu_style_print , file = path // styles_dir // \"fBlog_print-\" // version // \".css\" , status = 'new' , action = & & 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1029 , sys_msg = system_msg ) if ( ios == 0 ) write ( unit = lu_style_print , fmt = '(a)' ) css_standard_print ! End style sheet generation. close ( unit = lu_style_print ) create_3_pages : do i = 1 , 3 ! Create demo static pages. write ( unit = char_i , fmt = '(i1)' ) i open ( newunit = lu_page , file = path // pages_dir // \"page\" // char_i // \".html\" , status = 'new' , action = 'write' , iostat = & & ios ) if ( ios /= 0 ) cycle write ( unit = lu_page , fmt = '(a)' ) \"<h2>Page #\" // char_i // \"</h2>\" // new_line ( 'a' ) // \"<h3>\" // empty_page // \"</h3>\" close ( unit = lu_page ) end do create_3_pages ! Create 1 entry. call date_and_time ( date = d , time = t ) file_name_entry = d // t ( 1 : 6 ) // '.blog' open ( newunit = lu_post , file = path // data_dir // file_name_entry , action = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1030 , sys_msg = system_msg ) write ( unit = lu_post , fmt = '(a)' ) lorem_ipsum close ( unit = lu_post ) if ( allocated ( config_txt )) deallocate ( config_txt ) call update () end subroutine create_blog ! subroutine delete_css ( css2delete ) !! Delete a given cascading style sheet. character ( len = 512 ), intent ( in ) :: css2delete logical :: file_exist integer :: command_status = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! inquire ( file = path // styles_dir // trim ( css2delete ), exist = file_exist ) if (. not . file_exist ) call terminate ( error_code = 1031 , inf_msg = i18n ( this_file_doesnt_exist )) call execute_command_line ( command = \"rm \" // path // styles_dir // trim ( css2delete ), exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1032 , cmd_msg = command_msg ) end subroutine delete_css ! subroutine delete_page ( page2delete ) !! Delete a given static page. character ( len = 512 ), intent ( in ) :: page2delete logical :: file_exist integer :: command_status = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! inquire ( file = path // pages_dir // trim ( page2delete ), exist = file_exist ) if (. not . file_exist ) call terminate ( error_code = 1041 , inf_msg = i18n ( this_file_doesnt_exist )) call execute_command_line ( command = \"rm \" // path // pages_dir // trim ( page2delete ), exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1042 , cmd_msg = command_msg ) end subroutine delete_page ! subroutine delete_post ( rank ) !! Delete a given post entry. integer , intent ( in ) :: rank integer :: ios , lu_post character ( len = 256 ) :: system_msg character ( len = 512 ) :: del_file ! call init_data if ( rank > total_entries . or . rank <= 0 ) call terminate ( error_code = 1051 , inf_msg = i18n ( this_number_is_wrong )) del_file = data_post ( rank , 6 )% date // '.blog' open ( newunit = lu_post , file = path // data_dir // '/' // del_file ( 1 : 19 ), status = 'old' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1052 , sys_msg = system_msg ) close ( unit = lu_post , status = 'delete' ) del_file = data_post ( rank , 7 )% post_title end subroutine delete_post ! subroutine edit_css ( css2edit , recorded ) !! Display the editor to create or modify a cascading style sheeet. character ( len = 512 ), intent ( in ) :: css2edit logical , intent ( out ) :: recorded integer :: command_status = 0 , exit_status = 0 , file_size_before , file_size_after character ( len = 256 ) :: command_msg = \"\" ! recorded = . true . ! Initialisation required. inquire ( file = path // styles_dir // trim ( css2edit ), size = file_size_before ) call execute_command_line ( command = editor // ' ' // path // styles_dir // trim ( css2edit ), exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1061 , cmd_msg = command_msg ) ! Check if size of the file has changed. If not it is supposed that file wasn't modified. (Not always true!) inquire ( file = path // styles_dir // trim ( css2edit ), size = file_size_after ) if ( file_size_before == file_size_after ) recorded = . false . end subroutine edit_css ! subroutine edit_page ( page2edit , recorded ) !! Display the editor to create or modify a static page. character ( len = 512 ), intent ( in ) :: page2edit logical , intent ( out ) :: recorded logical :: file_exist integer :: command_status = 0 , exit_status = 0 , file_size_after , file_size_before character ( len = 256 ) :: command_msg = \"\" ! recorded = . true . ! Initialisation required. ! Check if file exist already and what size is it. inquire ( file = path // pages_dir // trim ( page2edit ), exist = file_exist ) if ( file_exist ) then inquire ( file = path // pages_dir // trim ( page2edit ), size = file_size_before ) else file_size_before = 0 end if call execute_command_line ( command = editor // ' ' // path // pages_dir // trim ( page2edit ), exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1071 , cmd_msg = command_msg ) ! Check if size of the file has changed. If not, it is supposed that file wasn't modified. (Not always true!) inquire ( file = path // pages_dir // trim ( page2edit ), size = file_size_after ) if ( file_size_before == file_size_after ) recorded = . false . end subroutine edit_page ! subroutine edit_post ( rank , recorded ) !! Display the editor to edit a post entry that already exist. integer , intent ( in ) :: rank logical , intent ( out ) :: recorded integer :: command_status = 0 , exit_status = 0 , file_size_after , file_size_before character ( len = 19 ) :: edit_file character ( len = 256 ) :: command_msg = \"\" ! recorded = . true . ! Initialisation required. call init_conf () call init_data () if ( rank > total_entries . or . rank <= 0 ) call terminate ( error_code = 1081 , inf_msg = i18n ( this_number_is_wrong )) edit_file = data_post ( rank , 6 )% date // '.blog' inquire ( file = path // data_dir // trim ( edit_file ( 1 : 19 )), size = file_size_before ) call execute_command_line ( command = editor // ' ' // path // data_dir // trim (( edit_file ( 1 : 19 ))), exitstat = exit_status , cmdstat & & = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1082 , cmd_msg = command_msg ) ! Check if size of the file has changed. If not, it is supposed that file wasn't modified. (Not always true!) inquire ( file = path // data_dir // trim ( edit_file ( 1 : 19 )), size = file_size_after ) if ( file_size_before == file_size_after ) recorded = . false . end subroutine edit_post ! subroutine list_css () !! Display the list of all cascading style sheets avalaible. integer :: command_status = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! call execute_command_line ( command = \"ls -1 \" // path // styles_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1151 , cmd_msg = command_msg ) end subroutine list_css ! subroutine list_pages () !! Display the list of all static pages. integer :: command_status = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! call execute_command_line ( command = \"ls -1 \" // path // pages_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1161 , cmd_msg = command_msg ) end subroutine list_pages ! subroutine list_posts ( limit ) !! Display a list of post entries (last ones or all of them). integer , intent ( in ), optional :: limit logical :: ok_limit integer :: i ! ok_limit = present ( limit ) call init_data () if ( ok_limit ) then if ( limit < total_entries ) total_entries = limit end if if ( total_entries == 0 ) print '(a)' , i18n ( no_post ) do i = total_entries , 1 , - 1 print '(a,g0,a)' , '#' , i , ' [' // data_post ( i , 6 )% date ( 1 : 4 ) // '-' // data_post ( i , 6 )% date ( 5 : 6 ) // '-' // data_post ( i , 6 )& &% date ( 7 : 8 ) // ' (' // data_post ( i , 6 )% date ( 9 : 10 ) // ':' // data_post ( i , 6 )% date ( 11 : 12 ) // ')] ' // trim ( data_post ( i , 7 )& &% post_title ) end do end subroutine list_posts ! end module io_m","tags":"","loc":"sourcefile/mod_io.f08.html","title":"mod_io.f08 – fBlog"},{"text":"Source Code ! Copyright (C) 2016 Denis Bernard. ! License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>. ! This is free software: you are free to change and redistribute it. ! There is NO WARRANTY, to the extent permitted by law. ! Written by Denis Bernard. ! program fblog ! use :: fblog_m , only : config_file , bad_argument , deleted , deleted_file , deleted_you_could_update_the_config , fblog_dir , i18n ,& & is_a_wrong_argument , init_conf , path , no_fblog_directory_at , no_fblog_directory_here , not_modified , now_you_should_update & &, post_amount , show_version , terminate , there_is_not_directory , too_much_arguments , update use :: io_m , only : add_post , config , create_blog , delete_css , delete_page , delete_post , edit_css , edit_page , edit_post , help ,& & list_css , list_pages , list_posts use :: tty_m , only : console ! implicit none ! logical :: config_has_been_recorded , css_has_been_recorded , file_exist , page_has_been_recorded , post_has_been_recorded integer :: argc , i , ios , len_path , rank_val character ( len = 80 ) :: arg ( 0 : 2 ), char_rank character ( len = 512 ) :: css_2_delete , css_2_edit , page_2_edit , page_2_delete ! argc = command_argument_count () if ( argc > 2 ) call terminate ( error_code = 1091 , inf_msg = i18n ( too_much_arguments )) do i = 0 , argc call get_command_argument ( number = i , value = arg ( i )) end do if ( argc == 0 ) then path = \"\" call console () end if if ( argc == 1 . and . ( arg ( 1 )( 1 : 1 ) /= '-' )) then path = trim ( arg ( 1 )) len_path = len ( path ) if ( path ( len_path : len_path ) /= '/' ) path = path // '/' inquire ( file = path // '.' , exist = file_exist ) if (. not . file_exist ) call terminate ( error_code = 1092 , inf_msg = i18n ( there_is_not_directory ) // \" \" // path (: len ( path ) - 1 )) call console () end if if ( argc == 2 . and . ( arg ( 2 )( 1 : 1 ) == '-' )) call terminate ( error_code = 1093 , inf_msg = i18n ( bad_argument ) // '\"' // trim ( arg ( 2 )) & & // '\"' ) if ( argc == 2 ) then path = trim ( arg ( 2 )) len_path = len ( path ) if ( path ( len_path : len_path ) /= '/' ) path = path // '/' inquire ( file = path // '.' , exist = file_exist ) if (. not . file_exist ) call terminate ( error_code = 1094 , inf_msg = i18n ( there_is_not_directory ) // \" \" // path ) end if select case ( trim ( arg ( 1 ))) case ( '-h' , '-help' , '--help' , '-?' , '?' ) print '(a)' , help call terminate ( error_code = 0 ) case ( '-v' , '--version' ) print '(a)' , show_version call terminate ( error_code = 0 ) end select inquire ( file = path // config_file , exist = file_exist ) if ( file_exist ) call init_conf () if ( arg ( 1 ) == '--create' ) then call create_blog call terminate ( error_code = 0 ) end if inquire ( file = path // fblog_dir // '.' , exist = file_exist ) if ((. not . file_exist ) . and . ( len ( path ) > 0 )) call terminate ( error_code = 1095 , inf_msg = i18n ( no_fblog_directory_at ) // \" \" // & & path ) if ((. not . file_exist ) . and . ( len ( path ) == 0 )) call terminate ( error_code = 1096 , inf_msg = i18n ( no_fblog_directory_here )) if ( arg ( 1 )( 1 : 12 ) == '--edit-post=' ) then char_rank = trim ( arg ( 1 )( 13 :)) read ( unit = char_rank , fmt = * , iostat = ios ) rank_val if ( ios /= 0 ) call terminate ( error_code = 1097 , inf_msg = trim ( char_rank ) // \" \" // i18n ( is_a_wrong_argument )) call edit_post ( rank = rank_val , recorded = post_has_been_recorded ) if ( post_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) end if end if if ( arg ( 1 )( 1 : 11 ) == '--edit-css=' ) then css_2_edit = trim ( arg ( 1 )( 12 :)) call edit_css ( css2edit = css_2_edit , recorded = css_has_been_recorded ) if ( css_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( not_modified )) end if end if if ( arg ( 1 )( 1 : 12 ) == '--edit-page=' ) then page_2_edit = trim ( arg ( 1 )( 13 :)) call edit_page ( page2edit = page_2_edit , recorded = page_has_been_recorded ) if ( page_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( not_modified )) end if end if if ( arg ( 1 )( 1 : 14 ) == '--delete-post=' ) then char_rank = trim ( arg ( 1 )( 15 :)) read ( unit = char_rank , fmt = * , iostat = ios ) rank_val if ( ios /= 0 ) call terminate ( error_code = 1098 , inf_msg = trim ( char_rank ) // \" \" // i18n ( is_a_wrong_argument )) call delete_post ( rank = rank_val ) call terminate ( error_code = 0 , inf_msg = i18n ( deleted_file ) // \" \" // trim ( char_rank ) // new_line ( 'a' ) // & & i18n ( now_you_should_update )) end if if ( arg ( 1 )( 1 : 14 ) == \"--delete-page=\" ) then page_2_delete = trim ( arg ( 1 )( 15 :)) call delete_page ( page2delete = page_2_delete ) call terminate ( error_code = 0 , inf_msg = 'Page ' // trim ( arg ( 1 )( 15 :)) // \" \" // i18n ( deleted_you_could_update_the_config )) end if if ( arg ( 1 )( 1 : 13 ) == \"--delete-css=\" ) then css_2_delete = trim ( arg ( 1 )( 14 :)) call delete_css ( css2delete = css_2_delete ) call terminate ( error_code = 0 , inf_msg = 'Css ' // trim ( arg ( 1 )( 14 :)) // \" \" // i18n ( deleted )) end if select case ( trim ( arg ( 1 ))) case ( '-L' , '--list-all' ) call list_posts () call terminate ( error_code = 0 ) case ( '-l' , '--list-last' ) call list_posts ( limit = post_amount ) call terminate ( error_code = 0 ) case ( '-u' , '--update' ) call update () call terminate ( error_code = 0 ) case ( '-a' , '--add-post' ) call add_post ( recorded = post_has_been_recorded ) if ( post_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( not_modified )) end if case ( '-c' , '--config' ) call config ( recorded = config_has_been_recorded ) if ( config_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( not_modified )) end if case ( '--list-css' ) call list_css () call terminate ( error_code = 0 ) case ( '--list-pages' ) call list_pages () call terminate ( error_code = 0 ) case default call terminate ( error_code = 1099 , inf_msg = i18n ( bad_argument ) // ' \"' // trim ( arg ( 1 )) // '\"' ) end select error stop 'Internal error in Main' end program fblog","tags":"","loc":"sourcefile/main.f08.html","title":"main.f08 – fBlog"},{"text":"Source Code ! Copyright (C) 2016 Denis Bernard. ! License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>. ! This is free software: you are free to change and redistribute it. ! There is NO WARRANTY, to the extent permitted by law. ! Written by Denis Bernard. ! !> Provide interactive menu using POSIX command stty. !! There is **no use** of the well known programming library !! [Curses](https://en.wikipedia.org/wiki/Curses_%28programming_library%29)). !! Instead the command-line `stty` is used to set the terminal in *raw mode* !! in order to catch a unique key stroke without the need to press the key !! `<Enter>`. *(This could be done with a call to libc to set `canon / icanon`.)* !! !! Some ECMA-48 characters are emitted in order to change attributs (colors, !!  font weight) of strings displayed in console menus. *(ECMA-48 is also known as !! \"ANSI escape sequences\")*. !! !! References !! !!   * man pages stty(1) and console_codes(4), !!   * [Open group](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap11.html), !!   * [ECMA-48](http://www.ecma-international.org/publications/standards/Ecma-048.htm). ! module tty_m ! use :: fblog_m , only : create_new_blog , delete_a_css , delete_a_page , deleted_page , edit_a_css , edited_page ,& & enter_the_filename_of_the_css_deleted , enter_the_filename_of_the_page_created , delete_a_post , deleted_file , edit_a_page ,& & edit_settings , enter_the_filename_of_the_page_deleted , enter_the_rank_of_the_post_to_delete ,& & enter_the_rank_of_the_post_to_modify , fblog_dir , i18n , init_conf , init_data , is_deleted , modify_a_post , new_post ,& & not_modified , now_you_could_edit_settings , now_you_should_update , pages , path , post_amount , posts , quit , show_last_posts ,& & show_full_list_css , show_full_list_pages , show_full_list_posts , show_version , styles , terminate ,& & the_folowing_files_and_directories_will_be_created , there_is_already_a_blog , this_file_doesnt_exist , this_number_is_wrong & &, total_entries , up , update , update_all , wrong_entry use :: io_m , only : add_post , config , create_blog , delete_css , delete_page , delete_post , edit_css , edit_page , edit_post , list_css & & , list_pages , list_posts ! implicit none ! private public console ! ! ECMA-48 (ANSI ESC sequence) character ( len =* ), parameter :: bye = char ( 27 ) // '[1m' // char ( 27 ) // '[33m' // 'BYE' // char ( 27 ) // '[0m' character ( len =* ), parameter :: ga = char ( 27 ) // '[1m' // char ( 27 ) // '[33m' // 'GA' // char ( 27 ) // '[0m' character ( len =* ), parameter :: ok = char ( 27 ) // '[1m' // char ( 27 ) // '[32m' // 'OK' // char ( 27 ) // '[0m' character ( len =* ), parameter :: reset = char ( 27 ) // '[0m' character ( len =* ), parameter :: set_blue = char ( 27 ) // '[1m' // char ( 27 ) // '[34m' character ( len =* ), parameter :: set_bold = char ( 27 ) // '[1m' character ( len =* ), parameter :: false_entry = char ( 27 ) // '[1m' // char ( 27 ) // '[31m' ! logical :: file_exist , directory_exist integer :: command_status = 0 , exit_status = 0 , ios , lu_stty_g character ( len = 1 ) :: choice character ( len = 256 ) :: command_msg = \"\" , system_msg character ( len = 512 ) :: terminal_settings ! contains ! function console_menu ( items ) !! Auxilary routine for displaying the menus in console mode. character ( len =* ), intent ( in ) :: items character ( len = 1 ) console_menu integer :: command_status = 0 , exit_status = 0 , i , ios , j , k , pos character ( len = len ( items )) :: read_items character ( len = 80 ), dimension ( 10 ) :: item character ( len = 1 ) :: keystroke ! read_items = items j = 1 do i = 1 , 10 pos = index ( string = read_items (:), substring = \",\" ) if (( pos == 0 ) . and . ( len_trim ( read_items ) == 0 )) exit if (( pos == 0 ) . and . ( len ( read_items ) > 0 )) then item ( i ) = read_items exit end if item ( i ) = read_items (: pos - 1 ) read_items = read_items ( pos + 1 :) j = j + 1 end do write ( unit = * , fmt = '(a)' , advance = 'no' ) set_bold do k = 1 , j print '(2x,i1,a)' , k - 1 , \"  \" // trim ( item ( k )) end do print '(a)' , ga call execute_command_line ( command = 'stty raw' , exitstat = exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1231 , cmd_msg = command_msg ) write ( unit = * , fmt = '(a)' , advance = 'no' ) set_blue read ( unit = * , fmt = '(a)' , advance = 'no' , iostat = ios ) keystroke write ( unit = * , fmt = '(a)' , advance = 'no' ) reset call execute_command_line ( command = 'stty ' // trim ( terminal_settings ), exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1232 , cmd_msg = command_msg ) print * console_menu = keystroke end function console_menu ! subroutine console () !! Head routine for console mode. ! use , intrinsic :: iso_fortran_env , only : compiler_version , compiler_options ! print '(a,2/,a,2/)' , show_version , compiler_version () // ' (' // compiler_options () // ')' inquire ( file = path // fblog_dir // '.' , exist = file_exist ) if (. not . file_exist ) then inquire ( file = path // FBLOG_DIR // '.' , exist = directory_exist ) if (. not . directory_exist ) then call execute_command_line ( command = 'stty -g > ' // path // 'stty_g' , exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1131 , cmd_msg = command_msg ) open ( newunit = lu_stty_g , file = path // 'stty_g' , status = 'old' , action = 'read' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1132 , sys_msg = system_msg ) read ( unit = lu_stty_g , fmt = '(a)' ) terminal_settings close ( unit = lu_stty_g , status = 'delete' ) else if ( directory_exist ) then call execute_command_line ( command = 'stty -g > ' // path // fblog_dir // 'stty_g' , exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1133 , cmd_msg = command_msg ) open ( newunit = lu_stty_g , file = path // fblog_dir // 'stty_g' , status = 'old' , action = 'read' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1134 , sys_msg = system_msg ) read ( unit = lu_stty_g , fmt = '(a)' ) terminal_settings close ( unit = lu_stty_g , status = 'delete' ) end if choice = console_menu ( i18n ( quit ) // ',' // i18n ( create_new_blog )) select case ( choice ) case ( 'q' , 'Q' , '0' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '1' ) call create_blog () print '(a)' , ok case default call terminate ( error_code = 1135 , inf_msg = i18n ( wrong_entry )) end select end if call execute_command_line ( command = 'stty -g > ' // trim ( path ) // fblog_dir // 'stty_g' , exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1136 , cmd_msg = command_msg ) open ( newunit = lu_stty_g , file = path // fblog_dir // 'stty_g' , status = 'old' , action = 'read' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1137 , sys_msg = system_msg ) read ( unit = lu_stty_g , fmt = '(a)' ) terminal_settings close ( unit = lu_stty_g , status = 'delete' ) call init_conf () call menu_main () error stop 'Internal error in subroutine console()' end subroutine console ! recursive subroutine menu_main () !! Provide top menu in console mode. use , intrinsic :: iso_fortran_env , only : compiler_version , compiler_options logical :: config_has_been_recorded character ( len = 1 ) :: choice ! choice = console_menu ( & i18n ( quit ) // ',' // & i18n ( update_all ) // ',' // & i18n ( posts ) // ',' // & i18n ( pages ) // ',' // & i18n ( styles ) // ',' // & i18n ( edit_settings ) & ) select case ( choice ) case ( 'q' , 'Q' , '0' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '1' ) call update () print '(a)' , ok call menu_main () case ( '2' ) call init_data () call menu_post () case ( '3' ) call menu_page () case ( '4' ) call menu_css () case ( '5' ) call config ( recorded = config_has_been_recorded ) if ( config_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_main () case default print '(a)' , false_entry // i18n ( wrong_entry ) // reset call menu_main () end select end subroutine menu_main ! recursive subroutine menu_page () !! Provide sub menu for static pages in console mode. character ( len = 1 ) :: choice character ( len = 512 ) :: page_2_delete , & page_2_edit logical :: page_has_been_recorded ! choice = console_menu ( & i18n ( up ) // ',' // & i18n ( show_full_list_pages ) // ',' // & i18n ( edit_a_page ) // ',' // & i18n ( delete_a_page ) & ) select case ( choice ) case ( 'q' , 'Q' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '0' ) call menu_main () case ( '1' ) call list_pages print '(a)' , ok call menu_page () case ( '2' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_filename_of_the_page_created ) // \" \" read ( unit = * , fmt = * ) page_2_edit print '(a,g0,a)' , set_blue , trim ( page_2_edit ), reset call edit_page ( page2edit = page_2_edit , recorded = page_has_been_recorded ) if ( page_has_been_recorded ) then print '(a)' , i18n ( edited_page ) // \" \" // trim ( page_2_edit ) // new_line ( 'a' ) // i18n ( now_you_could_edit_settings ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_page () case ( '3' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_filename_of_the_page_deleted ) // \" \" read ( unit = * , fmt = * ) page_2_delete print '(a,g0,a)' , set_blue , trim ( page_2_delete ), reset call delete_page ( page2delete = page_2_delete ) print '(a)' , i18n ( deleted_page ) // \" \" // trim ( page_2_delete ) // new_line ( 'a' ) // i18n ( now_you_could_edit_settings ), ok call menu_page () case default print '(a)' , false_entry // i18n ( wrong_entry ) // reset call menu_page () end select end subroutine menu_page ! recursive subroutine menu_post () !! Provide sub menu for post entries in console mode. character ( len = 1 ) :: choice integer :: int_keystroke , ios , rank_val logical :: post_has_been_recorded ! if ( total_entries > 0 ) then choice = console_menu ( & i18n ( up ) // ',' // & i18n ( show_last_posts ) // ',' // & i18n ( new_post ) // ',' // & i18n ( modify_a_post ) // ',' // & i18n ( delete_a_post ) // ',' // & i18n ( show_full_list_posts ) & ) select case ( choice ) case ( 'q' , 'Q' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '0' ) call menu_main () case ( '1' ) call list_posts ( limit = post_amount ) print '(a)' , ok call menu_post () case ( '2' ) print '(a)' , ok call add_post ( recorded = post_has_been_recorded ) if ( post_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_main () case ( '3' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_rank_of_the_post_to_modify ) // \" \" read ( unit = * , fmt = * , iostat = ios ) int_keystroke if ( ios /= 0 ) call terminate ( error_code = 1141 , inf_msg = i18n ( wrong_entry )) rank_val = int_keystroke print '(a,g0,a)' , set_blue , rank_val , reset call edit_post ( rank = rank_val , recorded = post_has_been_recorded ) if ( post_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_main () case ( '4' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_rank_of_the_post_to_delete ) // \" \" read ( unit = * , fmt = * , iostat = ios ) int_keystroke if ( ios /= 0 ) call terminate ( error_code = 1142 , inf_msg = i18n ( wrong_entry )) rank_val = int_keystroke print '(a,g0,a)' , set_blue , rank_val , reset call delete_post ( rank = rank_val ) print '(a, g0, 2a)' , i18n ( deleted_file ) // \" \" , rank_val , new_line ( 'a' ), i18n ( now_you_should_update ) print '(a)' , ok call menu_main () case ( '5' ) call list_posts () print '(a)' , ok call menu_post () case default print '(a)' , false_entry // i18n ( wrong_entry ) // reset call menu_post () end select else choice = console_menu ( & i18n ( up ) // ',' // & i18n ( new_post ) & ) select case ( choice ) case ( 'q' , 'Q' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '0' ) call menu_main () case ( '1' ) call add_post ( recorded = post_has_been_recorded ) print '(a)' , ok if ( post_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_main () case default print '(a)' , false_entry call menu_post () end select end if end subroutine menu_post ! recursive subroutine menu_css () !! Provide a sub menu for CSS in console mode. logical :: css_has_been_recorded character ( len = 1 ) :: choice character ( len = 512 ) :: css_2_delete , css_2_edit ! choice = console_menu ( & i18n ( up ) // ',' // & i18n ( show_full_list_css ) // ',' // & i18n ( edit_a_css ) // ',' // & i18n ( delete_a_css ) & ) select case ( choice ) case ( 'q' , 'Q' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '0' ) call menu_main () case ( '1' ) call list_css () print '(a)' , ok call menu_css () case ( '2' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_filename_of_the_page_created ) // \" \" read ( unit = * , fmt = '(a)' ) css_2_edit print '(a,g0,a)' , set_blue , trim ( css_2_edit ), reset call edit_css ( css2edit = css_2_edit , recorded = css_has_been_recorded ) if ( css_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_css () case ( '3' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_filename_of_the_css_deleted ) // \" \" read ( unit = * , fmt = * ) css_2_delete print '(a,g0,a)' , set_blue , trim ( css_2_delete ), reset call delete_css ( css2delete = css_2_delete ) print '(a)' , i18n ( is_deleted ) // \" \" // trim ( css_2_delete ), ok call menu_css () case default print '(a)' , false_entry // i18n ( wrong_entry ) // reset call menu_css () end select end subroutine menu_css ! end module tty_m","tags":"","loc":"sourcefile/mod_tty.f08.html","title":"mod_tty.f08 – fBlog"},{"text":"Source Code \"`fBlog' generates static web pages.\" //                                & new_line ( ' a ' ) //                                                         & new_line ( ' a ' ) //                                                         & \"Usage:  fblog [path]\" // new_line('a') //                               & \"   or:  fblog [option] [path]\" // new_line('a') //                      & new_line ( ' a ' ) //                                                         & \"Interactive mode:\" // new_line('a') //                                  & \"  Type `fblog' without option.\" //                                      & new_line ( ' a ' ) //                                                         & new_line ( ' a ' ) //                                                         & \"Examples:\" //new_line('a') //                                            & \"  -`fblog'          run in interactive mode (in the curent directory)\" & //  new_line('a') //  & \"  -`fblog foo/bar'  run in interactive mode\" //                         & new_line ( ' a ' ) //  & \"                    (in the directory `./foo/bar')\" //                  & new_line ( ' a ' ) // & new_line ( ' a ' ) // & \"Command-line mode:\" // new_line('a') //                                 & \"  Type `fblog' with only one option (and path if any)\" //new_line('a')//& \"Options:\" //new_line('a') //                                             & \"  -a, --add-post            add a post\" // new_line('a') //             & \"  -c, --config              setting of the blog\" // new_line('a') //    & \"      --create              create a new blog\" // new_line('a') //      & \"      --delete-post=NUMBER  delete a post (NUMBER= rank of the post)\" & // new_line('a') //  & \"      --delete-page=FILE    delete a page (FILE= page filename)\" & // new_line('a') // & \"      --delete-css=FILE     delete a style sheet (FILE= CSS filename)\" & // new_line('a') // & \"      --edit-post=NUMBER    edit a post (NUMBER= rank of the post)\" & // new_line('a') // & \"      --edit-css=FILE       edit a style sheet (FILE= CSS filename)\" & // new_line('a') // & \"      --edit-page=FILE      edit a page (FILE= page filename)\" //       & new_line ( ' a ' ) // & \"  -h, --help                display this help and exit\" // new_line('a')& // & \"  -L, --list-all            display all posts in reverse\" //            & \" chronological order\" // new_line('a') //  & \"  -l, --list-last           display last posts in reverse\" //           & \" chronological order\" // new_line('a') //  & \"      --list-css            display avalaible style sheets\" //          & new_line ( ' a ' ) // & \"      --list-pages          display avalaible pages\" // new_line('a') //& \"  -u, --update              update the weblog\" // new_line('a') //      & \"  -v, --version             give version of program\" // new_line('a') // & \"(The rank of a post is given by the options `-l' and `-L'; or, \" //     & \"looking at the\" // new_line('a') // & \"weblog, at the bottom of the posted entry, close to the date. \" //      & \"The newest post\" // new_line('a') // & \"get the rank `1' and the oldest one holds the amount of total \" //      & \"posted entries.)\" // new_line('a') // & new_line ( ' a ' ) //                                                         & \"Exit status:\" // new_line('a') //                                       & \"  0: ok, 1: failed\" // new_line('a') //                                 & new_line ( ' a ' ) //                                                         & \"Environment:\" // new_line('a') //                                        & \"  -EDITOR  user's prefered text editor (default is 'vi') \" //            & new_line ( ' a ' ) //                                                         & \"  -LANG    user's language (default is English)\" //                     & new_line ( ' a ' ) //                                                         & new_line ( ' a ' ) //                                                         & \"Files:\" // new_line('a') //                                             & \"  -./fBlog/fblog.conf  the configuration file\" //                       & new_line ( ' a ' ) //                                                         & new_line ( ' a ' ) //                                                         & \"Examples:\" //new_line('a') //                                            & \"  -`fblog --create'              build a new weblog\" // new_line('a') //& \"  -`fblog -a'                    add a new post\" // new_line('a') //    & \"  -`fblog --edit-post=2'         modify the second most recent post\" & // new_line('a') // & \"  -`fblog --edit-page=foo.html'  create (or modify) a static \" & // \"page named `foo.html'\" //       & new_line ( ' a ' ) // & \"  -`fblog -u'                    generate the web site into `./fBlog/\" & // \"export_http'\" // new_line('a') // & \"  -`fblog -u foo/bar'            generate the web site into\" //         & new_line ( ' a ' ) // & \"                                 `./foo/bar/fBlog/export_http'\" //      & new_line ( ' a ' ) // & \"  -`EDITOR=nano fblog'           use text editor `nano'\" //             & new_line ( ' a ' ) // & new_line ( ' a ' ) //                                                         & \"Report fBlog bugs to <deber@users.sf.net>\"","tags":"","loc":"sourcefile/help.inc.html","title":"help.inc – fBlog"},{"text":"Source Code \"# Configuration file of fBlog.\" // new_line('a') //                     & \"\" // new_line('a') //                                                   & \"[global]\" // new_line('a') //                                           & \"\" // new_line('a') //                                                   & \"TITLE=My Blog\" // new_line('a') //                                      & \"\" // new_line('a') //                                                   & \"CHARSET=UTF-8\" // new_line('a') //                                      & \"\" // new_line('a') //                                                   & \"LANG=en\" // new_line('a') //                                            & \"\" // new_line('a') //                                                   & \"#  rtl' is for languages written from right to left.\" & // new_line('a') //                                                      & \"#DIRECTION=rtl\" // new_line('a') //                                     & \"\" // new_line('a') //                                                   & \"#  Number of posts at home page. (Default is ten).\" // new_line('a') // & \"MAX_ENTRIES=10\" // new_line('a') //                                     & \"\" // new_line('a')","tags":"","loc":"sourcefile/config_txt_1.inc.html","title":"config_txt_1.inc – fBlog"},{"text":"Source Code \"# Uncomment and write your prefered text editor:\" // new_line('a') //   & \"#EDITOR=nano\" // new_line('a') //                                       & \"\" // new_line('a') //                                                   & \"[description]\" // new_line('a') //                                      & \"\" // new_line('a') //                                                   & \"Yet another fBlog website\" // new_line('a') //                          & \"\" // new_line('a') //                                                   & \"[footer]\" // new_line('a') //                                           & \"\" // new_line('a') //                                                   & \"<address>\" // new_line('a') //                                          & 'Powered by <a href=\"http://sourceforge.net/' //                         & 'projects/fortranblog\">fBlog</a>' // new_line('a') //                 & \"</address >\" // new_line('a') //                                        & \"\" // new_line('a') //                                                   & \"[translation]\" // new_line('a') //                                      & \"\" // new_line('a') //                                                   & \"HOME=Home\" // new_line('a') //                                          & \"ARCHIVE=Archives\" // new_line('a') //                                   & \"PERMALINK=permalink\" // new_line('a') //                                & \"PRINTER_FRIENDLY=printer-friendly page\" // new_line('a') //             & \"\" // new_line('a') //                                                   & \"JANUARY=jan\" // new_line('a') //                                        & \"FEBRUARY=feb\" // new_line('a') //                                       & \"MARCH=mar\" // new_line('a') //                                          & \"APRIL=apr\" // new_line('a') //                                          & \"MAY=may\" // new_line('a') //                                            & \"JUNE=jun\" // new_line('a') //                                           & \"JULY=jul\" // new_line('a') //                                           & \"AUGUST=aug\" // new_line('a') //                                         & \"SEPTEMBER=sep\" // new_line('a') //                                      & \"OCTOBER=oct\" // new_line('a') //                                        & \"NOVEMBER=nov\" // new_line('a') //                                       & \"DECEMBER=dec\" // new_line('a') //                                       & \"\" // new_line('a') //                                                   & \"[menu]\" // new_line('a') //                                             & \"\" // new_line('a') //                                                   & \"# Left side: label. Right side: any URL or\" //                          & \" filename of a given page.\" // new_line('a') //                      & \"# MyLabel=http://www.example.com/\" // new_line('a') //                  & \"\" // new_line('a') //                                                   & \"Page #1=page1.html\" // new_line('a') //                                 & \"Page #2=page2.html\" // new_line('a') //                                 & \"Page #3=page3.html\" // new_line('a') //                                 & \"\" // new_line('a') //                                                   & \"# End of configuration file.\"","tags":"","loc":"sourcefile/config_txt_2.inc.html","title":"config_txt_2.inc – fBlog"},{"text":"Source Code '' // new_line('a') // & ' /* Articles */ ' // new_line('a') // & ' article { ' // new_line('a') // & ' margin : 0 0 0 235 px ; ' // new_line('a') // & ' border - left : silver solid thick ; ' // new_line('a') // & ' padding : 0 20 px ; ' // new_line('a') // & ' text - align : justify ; ' // new_line('a') // & ' - moz - hyphens : auto ; ' // new_line('a') // & ' - ms - hyphens : auto ; ' // new_line('a') // & ' - webkit - hyphens : auto ; ' // new_line('a') // & ' hyphens : auto ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' article > header { ' // new_line('a') // & ' padding - bottom : 0.15 ex ; ' // new_line('a') // & ' border - bottom : thin solid # ff9040 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' article > header > h3 { ' // new_line('a') // & ' margin : 0 - 20 px ; ' // new_line('a') // & ' color : # 506088 ; ' // new_line('a') // & ' text - shadow : 1 px 1 px # ccc ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' article > header > h3 > a { ' // new_line('a') // & ' text - decoration : none ; ' // new_line('a') // & ' background : transparent ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' article > header > h3 > a : focus { ' // new_line('a') // & ' text - shadow : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' article > * { ' // new_line('a') // & ' margin - top : 2 ex ; ' // new_line('a') // & ' padding : inherit ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' article > p { ' // new_line('a') // & ' text - indent : 1.0 em ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' article img { ' // new_line('a') // & ' border : silver solid thin ; ' // new_line('a') // & ' border - radius : 4 px ; ' // new_line('a') // & ' box - shadow : 2 px 2 px silver ; ' // new_line('a') // & ' max - width : 100 % ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' article > footer { ' // new_line('a') // & ' display : block ; ' // new_line('a') // & ' text - align : right ; ' // new_line('a') // & ' font - size : 8 pt ; ' // new_line('a') // & ' font - weight : bolder ; ' // new_line('a') // & ' padding : 3 px ; ' // new_line('a') // & ' background : # ddd ; ' // new_line('a') // & ' background : linear - gradient ( 270 deg , # ddd , # eee ); ' // new_line('a') // & ' border - radius : 3 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Bottom arrow (home page) */ ' // new_line('a') // & ' body > nav : nth - of - type ( 2 ) > a { ' // new_line('a') // & ' clear : both ; ' // new_line('a') // & ' float : right ; ' // new_line('a') // & ' margin : 30 px 20 px 10 px 20 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Text from the config file in [footer] */ ' // new_line('a') // & ' body > footer { ' // new_line('a') // & ' clear : both ; ' // new_line('a') // & ' float : left ; ' // new_line('a') // & ' padding : 5 px 10 px ; ' // new_line('a') // & ' font - style : italic ; ' // new_line('a') // & ' font - size : 8 pt ; ' // new_line('a') // & ' opacity : 0.7 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body :: after { ' // new_line('a') // & ' clear : both ; ' // new_line('a') // & ' width : 100 % ; ' // new_line('a') // & ' display : block ; ' // new_line('a') // & ' border - top : thin solid # ff9040 ; ' // new_line('a') // & ' margin - top : 15 px ; ' // new_line('a') // & ' padding : 5 px 0 10 px 0 ; ' // new_line('a') // & ' font - size : 8 pt ; ' // new_line('a') // & ' color : # 777 ; ' // new_line('a') // & ' content : \"fBlog - SlateBlue\" ; ' // new_line('a') // & ' text - align : center ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* ---- Case of language with rigth to left direction ---*/ ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] dd { ' // new_line('a') // & ' margin : 0 4 em 1 em 0 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > aside { ' // new_line('a') // & ' float : right ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : first - of - type { ' // new_line('a') // & ' margin : 0 10 px 20 px 0 ; ' // new_line('a') // & ' float : right ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : first - of - type > a [ rel = \"prev\" ] { ' // new_line('a') // & ' margin : 0 0 2 ex 10 px ; ' // new_line('a') // & ' float : left ; ' // new_line('a') // & ' clear : left ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : first - of - type > a [ rel = \"next\" ] { ' // new_line('a') // & ' margin : 0 10 px 2 ex 0 ; ' // new_line('a') // & ' float : right ; ' // new_line('a') // & ' clear : left ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] article { ' // new_line('a') // & ' margin : 0 235 px 3 em 0 ; ' // new_line('a') // & ' border - left : none ; ' // new_line('a') // & ' border - right : silver solid thick ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] article > p { ' // new_line('a') // & ' text - indent : 0 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : nth - of - type ( 2 ) > a { ' // new_line('a') // & ' float : left ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > footer { ' // new_line('a') // & ' float : right ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /*@media screen and (max-width: 1100px){*/ ' // new_line('a') // & '@ media screen and ( max - width : 1280 px ){ ' // new_line('a') // & '' // new_line('a') // & '' // new_line('a') // & ' body { ' // new_line('a') // & ' font - size : 11 pt ; ' // new_line('a') // & ' margin - top : 40 px ; ' // new_line('a') // & ' box - shadow : none ; ' // new_line('a') // & ' border - radius : 0 ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '' // new_line('a') // & '@ media screen and ( max - width : 1024 px ){ ' // new_line('a') // & '' // new_line('a') // & ' body { ' // new_line('a') // & ' font - size : 10 pt ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '' // new_line('a') // & '@ media screen and ( max - width : 800 px ) { ' // new_line('a') // & '' // new_line('a') // & ' body { ' // new_line('a') // & ' width : auto ; ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' padding - top : 0 ; ' // new_line('a') // & ' min - width : 480 px ; ' // new_line('a') // & ' font - size : 11 pt ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > header { ' // new_line('a') // & ' position : relative ; ' // new_line('a') // & ' margin : - 1 px ; ' // new_line('a') // & ' padding : 0 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Description of the blog */ ' // new_line('a') // & ' body > aside { ' // new_line('a') // & ' width : auto ; ' // new_line('a') // & ' padding : 5 px 15 px ; ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' text - align : inherit ; ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav : first - of - type { ' // new_line('a') // & ' width : auto ; ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' padding : 5 px 10 px 7 px 10 px ; ' // new_line('a') // & ' border - top : # 506088 thin solid ; ' // new_line('a') // & ' border - bottom : # 506088 thin solid ; ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' header + nav : first - of - type { ' // new_line('a') // & ' margin - top : 5 px ; ' // new_line('a') // & ' } ' // new_line('a') // & ''","tags":"","loc":"sourcefile/css_standard_2.inc.html","title":"css_standard_2.inc – fBlog"},{"text":"Source Code ' html { ' // new_line('a') // & ' background : # ddd ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body { ' // new_line('a') // & ' margin - top : 50 px ; ' // new_line('a') // & ' padding - top : 10 px ; ' // new_line('a') // & ' max - width : 1100 px ; ' // new_line('a') // & ' margin - left : auto ; ' // new_line('a') // & ' margin - right : auto ; ' // new_line('a') // & ' min - width : 780 px ; ' // new_line('a') // & ' box - shadow : 0 px 0 px 7 px 5 px silver ; ' // new_line('a') // & ' border : # eee solid thin ; ' // new_line('a') // & ' border - radius : 5 px ; ' // new_line('a') // & ' background : white ; ' // new_line('a') // & ' font - size : 12 pt ; ' // new_line('a') // & ' font - family : \"Verdana\" , \"Geneva\" , \"Arial\" , \"Lucida Grande\" , \"Gill Sans\" , sans - serif ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' h1 , h2 , h3 { ' // new_line('a') // & ' font - weight : normal ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' a : link , a : visited { ' // new_line('a') // & ' color : # 506088 ; ' // new_line('a') // & ' background : transparent ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' a : hover { ' // new_line('a') // & ' color : # ff9040 ; ' // new_line('a') // & ' background : transparent ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' a : focus { ' // new_line('a') // & ' color : # ff9040 ; ' // new_line('a') // & ' background : transparent ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' nav > hr , footer > hr { ' // new_line('a') // & ' display : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' dd { ' // new_line('a') // & ' margin : 0 0 1 em 4 em ; ' // new_line('a') // & ' font - size : 93 %' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' code , pre , samp { ' // new_line('a') // & ' overflow - x : auto ; ' // new_line('a') // & ' overflow - y : auto ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' pre > code { ' // new_line('a') // & ' display : block ; ' // new_line('a') // & ' padding : 1 em ; ' // new_line('a') // & ' font : bold 10 pt \"Courier New\" , courier , monospace ; ' // new_line('a') // & ' color : white ; ' // new_line('a') // & ' border : black thin solid ; ' // new_line('a') // & ' background : # 555 ; ' // new_line('a') // & ' border - radius : 3 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' figcaption { ' // new_line('a') // & ' font - size : smaller ; ' // new_line('a') // & ' text - align : center ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' mark { ' // new_line('a') // & ' background - color : # ff9040 ; ' // new_line('a') // & ' border - radius : 3 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > header { ' // new_line('a') // & ' position : absolute ; ' // new_line('a') // & ' height : 40 px ; ' // new_line('a') // & ' top : 0 ; ' // new_line('a') // & ' left : 0 ; ' // new_line('a') // & ' right : 0 ; ' // new_line('a') // & ' width : auto ; ' // new_line('a') // & ' border - bottom : # 506088 thin solid ; ' // new_line('a') // & ' background : # 8090 a8 ; ' // new_line('a') // & ' background : linear - gradient ( # 99 acc8 , # 8090 a8 ); ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > header > h1 { ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' text - align : center ; ' // new_line('a') // & ' font - size : 30 px ; ' // new_line('a') // & ' font - weight : bold ; ' // new_line('a') // & ' text - shadow : 0 2 px # 777 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Title of the blog */ ' // new_line('a') // & ' body > header > h1 > a { ' // new_line('a') // & ' text - decoration : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > header > h1 > a : link { ' // new_line('a') // & ' color : white ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > header > h1 > a : visited { ' // new_line('a') // & ' color : white ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > header > h1 > a : hover { ' // new_line('a') // & ' color : # ff9040 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > header > h1 > a : focus { ' // new_line('a') // & ' text - shadow : none ; ' // new_line('a') // & ' color : # ff9040 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Description of the blog */ ' // new_line('a') // & ' body > aside { ' // new_line('a') // & ' width : 200 px ; ' // new_line('a') // & ' margin : 20 px 10 px 40 px 10 px ; ' // new_line('a') // & ' padding : 5 px ; ' // new_line('a') // & ' font - size : 14 px ; ' // new_line('a') // & ' text - align : center ; ' // new_line('a') // & ' font - style : italic ; ' // new_line('a') // & ' border - radius : 5 px ; ' // new_line('a') // & ' float : left ; ' // new_line('a') // & ' clear : both ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav > a { ' // new_line('a') // & ' text - decoration : none ; ' // new_line('a') // & ' border : # 2 C354B solid thin ; ' // new_line('a') // & ' box - shadow : 0 2 px # 999 ; ' // new_line('a') // & ' border - radius : 5 px ; ' // new_line('a') // & ' margin : 0.35 ex 0 ; ' // new_line('a') // & ' text - align : center ; ' // new_line('a') // & ' padding : 0.7 ex 10 px ; ' // new_line('a') // & ' font - weight : bold ; ' // new_line('a') // & ' text - shadow : 0 1 px # 555 ; ' // new_line('a') // & ' font - size : 13 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav > a : link { ' // new_line('a') // & ' color : white ; ' // new_line('a') // & ' background : # 506088 ; ' // new_line('a') // & ' background : linear - gradient ( # 5 e72a0 , # 506088 ); ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav > a : visited { ' // new_line('a') // & ' color : white ; ' // new_line('a') // & ' background : # 506088 ; ' // new_line('a') // & ' background : linear - gradient ( # 5 e72a0 , # 506088 ); ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav > a : hover { ' // new_line('a') // & ' background : # 8090 a8 ; ' // new_line('a') // & ' background : linear - gradient ( # 99 acc8 , # 8090 a8 ); ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav > a : focus { ' // new_line('a') // & ' box - shadow : none ; ' // new_line('a') // & ' background : # 8090 a8 ; ' // new_line('a') // & ' background : linear - gradient ( # 99 acc8 , # 8090 a8 ); ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' header + nav : first - of - type { ' // new_line('a') // & ' padding - top : 60 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav : first - of - type { ' // new_line('a') // & ' width : 200 px ; ' // new_line('a') // & ' margin : 0 0 20 px 10 px ; ' // new_line('a') // & ' float : left ; ' // new_line('a') // & ' clear : both ; ' // new_line('a') // & ' color : transparent ; ' // new_line('a') // & ' font - size : 0 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Top arrows and bottom arrow of main page. */ ' // new_line('a') // & ' body > nav > a [ rel ] { ' // new_line('a') // & ' display : inline ; ' // new_line('a') // & ' width : 60 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav : first - of - type > a [ rel = \"prev\" ] { ' // new_line('a') // & ' margin : 0 10 px 2 ex 0 ; ' // new_line('a') // & ' float : right ; ' // new_line('a') // & ' clear : right ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav : first - of - type > a [ rel = \"next\" ] { ' // new_line('a') // & ' margin : 0 0 2 ex 10 px ; ' // new_line('a') // & ' float : left ; ' // new_line('a') // & ' clear : right ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '' // new_line('a') // & ' /* Menu items */ ' // new_line('a') // & ' body > nav : first - of - type > a { ' // new_line('a') // & ' clear : both ; ' // new_line('a') // & ' display : block ; ' // new_line('a') // & ' } '","tags":"","loc":"sourcefile/css_standard_1.inc.html","title":"css_standard_1.inc – fBlog"},{"text":"Source Code ' /* Menu items */ ' // new_line('a') // & ' body > nav : first - of - type > a { ' // new_line('a') // & ' margin : 0 3 px ; ' // new_line('a') // & ' padding : 2 px 5 px ; ' // new_line('a') // & ' display : inline ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Top arrows */ ' // new_line('a') // & ' body > nav : first - of - type > a [ rel ] { ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' margin : 0 3 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav : first - of - type > a [ rel = \"prev\" ] { ' // new_line('a') // & ' margin - right : 15 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Articles */ ' // new_line('a') // & ' article { ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' padding : 0 20 px ; ' // new_line('a') // & ' border : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > aside { ' // new_line('a') // & ' width : auto ; ' // new_line('a') // & ' padding : 5 px 15 px ; ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' text - align : inherit ; ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : first - of - type { ' // new_line('a') // & ' margin : auto 0 0 0 ; ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] header + nav : first - of - type { ' // new_line('a') // & ' margin - top : 5 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : first - of - type > a [ rel ] { ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' margin : 0 3 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : first - of - type > a [ rel = \"prev\" ] { ' // new_line('a') // & ' margin - left : 15 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] article { ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' padding : 0 20 px ; ' // new_line('a') // & ' border : none ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '@ media screen and ( orientation : portrait ) { ' // new_line('a') // & '' // new_line('a') // & ' body { ' // new_line('a') // & ' width : auto ; ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' padding - top : 0 ; ' // new_line('a') // & ' min - width : 480 px ; ' // new_line('a') // & ' font - size : 12 pt ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > header { ' // new_line('a') // & ' position : relative ; ' // new_line('a') // & ' margin : - 1 px ; ' // new_line('a') // & ' padding : 0 ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Description of the blog */ ' // new_line('a') // & ' body > aside { ' // new_line('a') // & ' width : auto ; ' // new_line('a') // & ' padding : 5 px 15 px ; ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' text - align : inherit ; ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav : first - of - type { ' // new_line('a') // & ' width : auto ; ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' padding : 5 px 10 px 7 px 10 px ; ' // new_line('a') // & ' border - top : # 506088 thin solid ; ' // new_line('a') // & ' border - bottom : # 506088 thin solid ; ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' header + nav : first - of - type { ' // new_line('a') // & ' margin - top : 5 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Menu items */ ' // new_line('a') // & ' body > nav : first - of - type > a { ' // new_line('a') // & ' margin : 0 3 px ; ' // new_line('a') // & ' padding : 2 px 5 px ; ' // new_line('a') // & ' display : inline ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Top arrows */ ' // new_line('a') // & ' body > nav : first - of - type > a [ rel ] { ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' margin : 0 3 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' body > nav : first - of - type > a [ rel = \"prev\" ] { ' // new_line('a') // & ' margin - right : 15 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' /* Articles */ ' // new_line('a') // & ' article { ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' padding : 0 20 px ; ' // new_line('a') // & ' border : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > aside { ' // new_line('a') // & ' width : auto ; ' // new_line('a') // & ' padding : 5 px 15 px ; ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' text - align : inherit ; ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : first - of - type { ' // new_line('a') // & ' margin : auto 0 0 0 ; ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] header + nav : first - of - type { ' // new_line('a') // & ' margin - top : 5 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : first - of - type > a [ rel ] { ' // new_line('a') // & ' float : none ; ' // new_line('a') // & ' margin : 0 3 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] body > nav : first - of - type > a [ rel = \"prev\" ] { ' // new_line('a') // & ' margin - left : 15 px ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' html [ dir = \"rtl\" ] article { ' // new_line('a') // & ' margin : 0 ; ' // new_line('a') // & ' padding : 0 20 px ; ' // new_line('a') // & ' border : none ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } '","tags":"","loc":"sourcefile/css_standard_3.inc.html","title":"css_standard_3.inc – fBlog"},{"text":"Source Code ! Copyright ( C ) 2016 Denis Bernard . ! License GPLv3 + : GNU GPL version 3 or later < http : //gnu.org/licenses/gpl.html>. ! This is free software : you are free to change and redistribute it . ! There is NO WARRANTY , to the extent permitted by law . ! Written by Denis Bernard . ! !! Internationalization of messages according setting of LANG ( English , French ... ) ! ! English translator : Denis BERNARD ! French translator : Denis BERNARD ( mother tongue ) ! ! msgstr ( en , bad_argument ) = \"Bad argument:\" msgstr ( fr , bad_argument ) = \"Mauvais argument :\" ! msgstr ( en , begin_update ) = \"Begin update\" msgstr ( fr , begin_update ) = \"Début de la mise à jour\" ! msgstr ( en , create_new_blog ) = \"Create new blog\" msgstr ( fr , create_new_blog ) = \"Créer un nouveau blog\" ! msgstr ( en , copy_css ) = \"Copy CSS to `\" msgstr ( fr , copy_css ) = \"Copie la feuille de style vers `\" ! msgstr ( en , copy_css_print ) = \"Copy CSS for printer to `\" msgstr ( fr , copy_css_print ) = \"Copie la feuille de style des permaliens imprimables vers `\" ! msgstr ( en , deleted ) = \"deleted\" msgstr ( fr , deleted ) = \"effacé\" ! msgstr ( en , delete_a_css ) = \"Delete a style sheet\" msgstr ( fr , delete_a_css ) = \"Supprimer une feuille de style\" ! msgstr ( en , delete_a_page ) = \"Delete a page\" msgstr ( fr , delete_a_page ) = \"Supprimer une page\" ! msgstr ( en , delete_a_post ) = \"Delete a post\" msgstr ( fr , delete_a_post ) = \"Supprimer un billet\" ! msgstr ( en , deleted_file ) = \"Deleted file:\" msgstr ( fr , deleted_file ) = \"Supprimé le fichier :\" ! msgstr ( en , deleted_page ) = \"Deleted page:\" msgstr ( fr , deleted_page ) = \"Supprimé la page :\" ! msgstr ( en , deleted_you_could_update_the_config ) = \"deleted. You could update the configuration file!\" msgstr ( fr , deleted_you_could_update_the_config ) = \"supprimé. Maintenant vous devriez mettre à jour la configuration !\" ! msgstr ( en , edit_a_page ) = \"New page or modify a page\" msgstr ( fr , edit_a_page ) = \"Modifier ou créer une page\" ! msgstr ( en , edit_a_css ) = \"New style sheet or modify a style sheet\" msgstr ( fr , edit_a_css ) = \"Modifier ou créer une feuille de style\" ! msgstr ( en , edited_page ) = \"Edited page:\" msgstr ( fr , edited_page ) = \"Édité la page :\" ! msgstr ( en , edit_settings ) = \"Edit settings\" msgstr ( fr , edit_settings ) = \"Configurer\" ! msgstr ( en , end_clearing_subdirectory ) = \"End clearing subdirectory `\" msgstr ( fr , end_clearing_subdirectory ) = \"Fin du nettoyage du sous-répertoire `\" ! msgstr ( en , enter_the_filename_of_the_css_deleted ) = \"Enter the file name of the style sheet to be deleted:\" msgstr ( fr , enter_the_filename_of_the_css_deleted ) = \"Entrez le nom de fichier de la feuille de style à supprimer :\" ! msgstr ( en , enter_the_filename_of_the_page_created ) = \"Enter the file name of the page to be created or modified:\" msgstr ( fr , enter_the_filename_of_the_page_created ) = \"Entrez le nom de fichier de la page à créer ou à modifier :\" ! msgstr ( en , enter_the_filename_of_the_page_deleted ) = \"Enter the file name of the page to be deleted:\" msgstr ( fr , enter_the_filename_of_the_page_deleted ) = \"Entrez le nom de fichier de la page à supprimer :\" ! msgstr ( en , enter_the_rank_of_the_post_to_delete ) = \"Enter the rank of the post to delete (the newest one is: < 1 >)\" msgstr ( fr , enter_the_rank_of_the_post_to_delete ) = \"Entrez le numéro du billet à supprimer (le  plus récent est : <1>)\" ! msgstr ( en , enter_the_rank_of_the_post_to_modify ) = \"Enter the rank of the post to modify (the newest one is: < 1 >)\" msgstr ( fr , enter_the_rank_of_the_post_to_modify ) = \"Entrez le numéro du billet à modifier (le plus récent est : <1>)\" ! msgstr ( en , error_css ) = \"Erroneous CSS name. Please, verify the configuration file.\" msgstr ( fr , error_css ) = \"Nom de la CSS erronnée. Merci de vérifier le fichier de configuration.\" ! msgstr ( en , error_css_print ) = \"Erroneous name CSS for printer. Verify configuration file.\" msgstr ( fr , error_css_print ) = \"Nom de la CSS pour l'imprimante erroné. Merci de vérifier le fichier de configuration.\" ! msgstr ( en , files_generated_inside_the_subdirectory ) = \"files generated within the subdirectory `\" msgstr ( fr , files_generated_inside_the_subdirectory ) = \"fichiers générés dans le sous-répertoire `\" ! msgstr ( en , initialisation_reading_conf ) = \"Initialisation 2/2: reading configuration\" msgstr ( fr , initialisation_reading_conf ) = \"Initialisation 2/2: lecture de la configuration\" ! msgstr ( en , initialisation_reading_data ) = \"Initialisation 1/2: reading data\" msgstr ( fr , initialisation_reading_data ) = \"Initialisation 1/2 : lecture des données\" ! msgstr ( en , is_a_wrong_argument ) = \"is a wrong argument.\" msgstr ( fr , is_a_wrong_argument ) = \"est un mauvais argument.\" ! msgstr ( en , is_deleted ) = \"deleted:\" msgstr ( fr , is_deleted ) = \"effacé :\" ! msgstr ( en , make_archive_pages ) = \"Make archive page `\" msgstr ( fr , make_archive_pages ) = \"Génère l'index des archives `\" ! msgstr ( en , make_clear_subdirectory ) = \"Make clear subdirectory `\" msgstr ( fr , make_clear_subdirectory ) = \"Début du nettoyage du sous-répertoire `\" ! msgstr ( en , make_home_page ) = \"Make home page `\" msgstr ( fr , make_home_page ) = \"Génère la page d'accueil `\" ! msgstr ( en , make_pages ) = \"Make pages `\" msgstr ( fr , make_pages ) = \"Génère les pages statiques `\" ! msgstr ( en , make_permalink_pages ) = \"Make permalink pages `\" msgstr ( fr , make_permalink_pages ) = \"Génère les permaliens `\" ! msgstr ( en , modify_a_post ) = \"Modify a post\" msgstr ( fr , modify_a_post ) = \"Modifier un billet\" ! msgstr ( en , monthly_archive_pages_built ) = \"monthly archive pages built\" msgstr ( fr , monthly_archive_pages_built ) = \"index mensuels générés\" ! msgstr ( en , new_post ) = \"New post\" msgstr ( fr , new_post ) = \"Nouveau billet\" ! msgstr ( en , no_fblog_directory_at ) = \"No `fBlog' directory at\" msgstr ( fr , no_fblog_directory_at ) = \"Pas de répertoire `fBlog' à\" ! msgstr ( en , no_fblog_directory_here ) = \"No `fBlog' directory here.\" msgstr ( fr , no_fblog_directory_here ) = \"Pas de répertoire `fBlog' ici.\" ! msgstr ( en , no_post ) = \"No post.\" msgstr ( fr , no_post ) = \"Pas de billet.\" ! msgstr ( en , not_modified ) = \"Not modified.\" msgstr ( fr , not_modified ) = \"Pas de modification.\" ! msgstr ( en , now_you_could_edit_settings ) = \"Now, you could edit the menu in settings!\" msgstr ( fr , now_you_could_edit_settings ) = \"Maintenant, vous pourriez éditer le menu dans le fichier de configuration !\" ! msgstr ( en , now_you_should_update ) = \"Now, you should update!\" msgstr ( fr , now_you_should_update ) = \"Maintenant, vous devriez mettre à jour !\" ! msgstr ( en , pages ) = \"Pages...\" msgstr ( fr , pages ) = \"Pages...\" ! msgstr ( en , pages_built ) = \"pages built\" msgstr ( fr , pages_built ) = \"pages générées\" ! msgstr ( en , permalink_pages_built ) = \"permalink pages built\" msgstr ( fr , permalink_pages_built ) = \"permaliens générés\" ! msgstr ( en , posts ) = \"Posts...\" msgstr ( fr , posts ) = \"Billets...\" ! msgstr ( en , quit ) = \"Quit\" msgstr ( fr , quit ) = \"Quitter\" ! msgstr ( en , show_last_posts ) = \"Show last posts\" msgstr ( fr , show_last_posts ) = \"Liste des derniers billets\" ! msgstr ( en , show_full_list_css ) = \"Show list of style sheets\" msgstr ( fr , show_full_list_css ) = \"Liste des feuilles de style\" ! msgstr ( en , show_full_list_pages ) = \"Show list of pages\" msgstr ( fr , show_full_list_pages ) = \"Liste des pages\" ! msgstr ( en , show_full_list_posts ) = \"Show full list of posts\" msgstr ( fr , show_full_list_posts ) = \"Liste de tous les billets\" ! msgstr ( en , styles ) = \"Styles...\" msgstr ( fr , styles ) = \"Styles...\" ! msgstr ( en , the_folowing_files_and_directories_will_be_created ) = \"The folowing files and directories will be created:\" msgstr ( fr , the_folowing_files_and_directories_will_be_created ) = \"Les fichiers suivants vont être créés :\" ! msgstr ( en , there_is_already_a_blog ) = \"There is already a fBlog here!\" msgstr ( fr , there_is_already_a_blog ) = \"Il y a déjà un fBlog ici !\" ! msgstr ( en , there_is_not_directory ) = \"There is not directory\" msgstr ( fr , there_is_not_directory ) = \"Pas de répertoire\" ! msgstr ( en , this_file_doesnt_exist ) = \"This file doesn't exist.\" msgstr ( fr , this_file_doesnt_exist ) = \"Pas de fichier à ce nom.\" ! msgstr ( en , this_number_is_wrong ) = \"This number is wrong.\" msgstr ( fr , this_number_is_wrong ) = \"Ce chiffre est incorrect.\" ! msgstr ( en , too_much_arguments ) = \"Too much arguments.\" msgstr ( fr , too_much_arguments ) = \"Arguments trop nombreux.\" ! msgstr ( en , up ) = \"Up\" msgstr ( fr , up ) = \"Précédent\" ! msgstr ( en , update_all ) = \"Update all\" msgstr ( fr , update_all ) = \"Tout mettre à jour\" ! msgstr ( en , update_done ) = \"Update done\" msgstr ( fr , update_done ) = \"Mise à jour achevée\" ! msgstr ( en , shell_said ) = \"Shell said:\" msgstr ( fr , shell_said ) = \"Le shell dit :\" ! msgstr ( en , system_said ) = \"System said:\" msgstr ( fr , system_said ) = \"Le système dit :\" ! msgstr ( en , warn_about_no_css ) = \"Warning: no CSS defined. However, CSS file is optional.\" msgstr ( fr , warn_about_no_css ) = \"ATTENTION : Pas de CSS définie. Toutefois, la feuille de style est facultative.\" ! msgstr ( en , warn_about_no_css_print ) = \"Warning: no CSS for defined printer-friendly permalink pages.& & However, this CSS is optional.\" msgstr ( fr , warn_about_no_css_print ) = \"ATTENTION : pas de CSS définie pour les permaliens imprimables. Toutefois, cette CSS & &est facultative.\" ! msgstr ( en , wrong_entry ) = \"Wrong entry.\" msgstr ( fr , wrong_entry ) = \"Mauvaise saisie.\" !","tags":"","loc":"sourcefile/i18n.inc.html","title":"i18n.inc – fBlog"},{"text":"Source Code ' body { ' // new_line('a') // & ' text - align : justify ; ' // new_line('a') // & ' font - size : 12 pt ; ' // new_line('a') // & ' font - family : serif ; ' // new_line('a') // & ' hyphens : auto ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' p { ' // new_line('a') // & ' text - indent : 1.0 em ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & ' article img { ' // new_line('a') // & ' max - width : 100 % ; ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '@ media print and ( max - width : 150 mm ){ ' // new_line('a') // & ' body { ' // new_line('a') // & ' font - size : 10 pt ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '@ media screen { ' // new_line('a') // & ' body { ' // new_line('a') // & ' padding : 0 px 40 px ; ' // new_line('a') // & ' max - width : 800 px ; ' // new_line('a') // & ' margin - left : auto ; ' // new_line('a') // & ' margin - right : auto ; ' // new_line('a') // & ' font - size : 14 pt ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '@ media screen and ( max - width : 1200 px ){ ' // new_line('a') // & ' body { ' // new_line('a') // & ' padding : 0 30 px ; ' // new_line('a') // & ' max - width : 750 px ; ' // new_line('a') // & ' font - size : 12.5 pt ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '@ media screen and ( max - width : 900 px ){ ' // new_line('a') // & '' // new_line('a') // & ' body { ' // new_line('a') // & ' padding : 0 20 px ; ' // new_line('a') // & ' max - width : 700 px ; ' // new_line('a') // & ' font - size : 11 pt ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '@ media screen and ( max - width : 600 px ) { ' // new_line('a') // & ' body { ' // new_line('a') // & ' padding : 0 15 px ; ' // new_line('a') // & ' font - size : 10.5 pt ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } ' // new_line('a') // & '' // new_line('a') // & '@ media screen and ( max - width : 450 px ) { ' // new_line('a') // & ' body { ' // new_line('a') // & ' padding : 0 10 px ; ' // new_line('a') // & ' font - size : 10 pt ; ' // new_line('a') // & ' min - width : 250 px ; ' // new_line('a') // & ' } ' // new_line('a') // & ' } '","tags":"","loc":"sourcefile/css_standard_print.inc.html","title":"css_standard_print.inc – fBlog"},{"text":"Source Code ' Lorem ipsum ' //  new_line('a') // & ' < p > ' // new_line('a') // & ' Lorem ipsum dolor sit amet , consectetur adipiscing elit . Sed non ' // new_line('a') // & ' risus . Suspendisse lectus tortor , dignissim sit amet , adipiscing nec , ' // new_line('a') // & ' ultricies sed , dolor . Cras elementum ultrices diam . Maecenas ligula ' // new_line('a') // & ' massa , varius a , semper congue , euismod non , mi . Proin porttitor , ' // new_line('a') // & ' orci nec nonummy molestie , enim est eleifend mi , non fermentum diam ' // new_line('a') // & ' nisl sit amet erat . Duis semper . Duis arcu massa , scelerisque vitae , ' // new_line('a') // & ' consequat in , pretium a , enim . Pellentesque congue . Ut in risus ' // new_line('a') // & ' volutpat libero pharetra tempor . Cras vestibulum bibendum augue .' // new_line('a') // & ' Praesent egestas leo in pede . Praesent blandit odio eu enim .' // new_line('a') // & ' Pellentesque sed dui ut augue blandit sodales . Vestibulum ante ipsum ' // new_line('a') // & ' primis in faucibus orci luctus et ultrices posuere cubilia Curae ; ' // new_line('a') // & ' Aliquam nibh . Mauris ac mauris sed pede pellentesque fermentum .' // new_line('a') // & ' Maecenas adipiscing ante non diam sodales hendrerit .' // new_line('a') // & ' < / p > ' // new_line('a') // & ' < p > ' // new_line('a') // & ' Ut velit mauris , egestas sed , gravida nec , ornare ut , mi . Aenean ut ' // new_line('a') // & ' orci vel massa suscipit pulvinar . Nulla sollicitudin . Fusce varius , ' // new_line('a') // & ' ligula non tempus aliquam , nunc turpis ullamcorper nibh , in tempus ' // new_line('a') // & ' sapien eros vitae ligula . Pellentesque rhoncus nunc et augue . Integer ' // new_line('a') // & ' id felis . Curabitur aliquet pellentesque diam . Integer quis metus ' // new_line('a') // & ' vitae elit lobortis egestas . Lorem ipsum dolor sit amet , consectetuer ' // new_line('a') // & ' adipiscing elit . Morbi vel erat non mauris convallis vehicula . Nulla et ' // new_line('a') // & ' sapien . Integer tortor tellus , aliquam faucibus , convallis id , congue ' // new_line('a') // & ' eu , quam . Mauris ullamcorper felis vitae erat . Proin feugiat , augue ' // new_line('a') // & ' non elementum posuere , metus purus iaculis lectus , et tristique ligula ' // new_line('a') // & ' justo vitae magna .' // new_line('a') // & ' < / p > ' // new_line('a') // & ' < p > ' // new_line('a') // & ' Aliquam convallis sollicitudin purus . Praesent aliquam , enim at ' // new_line('a') // & ' fermentum mollis , ligula massa adipiscing nisl , ac euismod nibh nisl ' // new_line('a') // & ' eu lectus . Fusce vulputate sem at sapien . Vivamus leo . Aliquam euismod ' // new_line('a') // & ' libero eu enim . Nulla nec felis sed leo placerat imperdiet . Aenean ' // new_line('a') // & ' suscipit nulla in justo . Suspendisse cursus rutrum augue . Nulla ' // new_line('a') // & ' tincidunt tincidunt mi . Curabitur iaculis , lorem vel rhoncus faucibus , ' // new_line('a') // & ' felis magna fermentum augue , et ultricies lacus lorem varius purus .' // new_line('a') // & ' Curabitur eu amet .' // new_line('a') // & ' < / p > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < p >< samp >< mark > & lt ; p >< / mark >< / samp > ' // new_line('a') // & ' Aliquam convallis sollicitudin purus . Praesent aliquam , enim at ' // new_line('a') // & ' fermentum mollis , ligula massa adipiscing nisl , ac euismod nibh nisl ' // new_line('a') // & ' eu lectus . Fusce vulputate sem at sapien . Vivamus leo . Aliquam ' // new_line('a') // & ' euismod libero eu enim . Nulla nec felis sed leo placerat imperdiet .' // new_line('a') // & ' Aenean suscipit nulla in justo . Suspendisse cursus rutrum augue .' // new_line('a') // & ' Nulla tincidunt tincidunt mi . Curabitur iaculis , lorem vel rhoncus ' // new_line('a') // & ' faucibus , felis magna fermentum augue , et ultricies lacus lorem varius ' // new_line('a') // & ' purus . Curabitur eu amet .' // new_line('a') // & ' < samp >< mark > & lt ; / p >< / mark >< / samp >< / p > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; q >< / mark >< / samp > < q > dolor < / q > < samp > ' // new_line('a') // & ' < mark > & lt ; / q >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; em >< / mark >< / samp > < em > dolor < / em > < samp > ' // new_line('a') // & ' < mark > & lt ; / em >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; i >< / mark >< / samp > < i > dolor < / i > < samp > ' // new_line('a') // & ' < mark > & lt ; / i >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; cite >< / mark >< / samp > < cite > dolor < / cite > ' // new_line('a') // & ' < samp >< mark > & lt ; / cite >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; kbd >< / mark >< / samp > < kbd > dolor < / kbd > ' // new_line('a') // & ' < samp >< mark > & lt ; / kbd >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; abbr >< / mark >< / samp > < abbr > dolor < / abbr > ' // new_line('a') // & ' < samp >< mark > & lt ; / abbr >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; dfn >< / mark >< / samp > < dfn > dolor < / dfn > ' // new_line('a') // & ' < samp >< mark > & lt ; / dfn >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; strong >< / mark >< / samp > < strong > dolor ' // new_line('a') // & ' < / strong > < samp >< mark > & lt ; / strong >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; b >< / mark >< / samp > < b > dolor < / b > < samp > ' // new_line('a') // & ' < mark > & lt ; / b >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; small >< / mark >< / samp > < small > dolor < / small > ' // new_line('a') // & ' < samp >< mark > & lt ; / small >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; sup >< / mark >< / samp > < sup > dolor < / sup > ' // new_line('a') // & ' < samp >< mark > & lt ; / sup >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; sub >< / mark >< / samp > < sub > dolor < / sub > ' // new_line('a') // & ' < samp >< mark > & lt ; / sub >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; u >< / mark >< / samp > < u > dolor < / u > < samp > ' // new_line('a') // & ' < mark > & lt ; / u >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; ins >< / mark >< / samp > < ins > dolor < / ins > ' // new_line('a') // & ' < samp >< mark > & lt ; / ins >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; del >< / mark >< / samp > < del > dolor < / del > ' // new_line('a') // & ' < samp >< mark > & lt ; / del >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; s >< / mark >< / samp > < s > dolor < / s > < samp > ' // new_line('a') // & ' < mark > & lt ; / s >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark style = \"background-color:transparent; border:' // new_line('a') // & '#ff9040 solid medium;\" > & lt ; mark >< / mark >< / samp > < mark > dolor < / mark > ' // new_line('a') // & ' < samp > ' // new_line('a') // & ' < mark style = \"background-color:transparent; border:#ff9040 solid' // new_line('a') // & ' medium;\" > & lt ; / mark >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' Lorem ipsum < samp >< mark > & lt ; a href = \"http://www.example.com\" >< / mark > ' // new_line('a') // & ' < / samp > < a href = \"http://www.example.com\" > dolor < / a > < samp >< mark > & lt ; / a >< / mark >< / samp > sit amet < br / > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; dl >< / mark >< / samp > ' // new_line('a') // & ' < dl > ' // new_line('a') // & ' < dt >< samp >< mark > & lt ; dt >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / dt >< / mark >< / samp >< / dt > ' // new_line('a') // & ' < dd >< samp >< mark > & lt ; dd >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / dd >< / mark >< / samp >< / dd > ' // new_line('a') // & ' < dt >< samp >< mark > & lt ; dt >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / dt >< / mark >< / samp >< / dt > ' // new_line('a') // & ' < dd >< samp >< mark > & lt ; dd >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / dd >< / mark >< / samp >< / dd > ' // new_line('a') // & ' < / dl > ' // new_line('a') // & ' < samp >< mark > & lt ; / dl >< / mark >< / samp > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; ul >< / mark >< / samp > ' // new_line('a') // & ' < ul > ' // new_line('a') // & ' < li >< samp >< mark > & lt ; li >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / li >< / mark >< / samp >< / li > ' // new_line('a') // & ' < li >< samp >< mark > & lt ; li >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / li >< / mark >< / samp >< / li > ' // new_line('a') // & ' < li >< samp >< mark > & lt ; li >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / li >< / mark >< / samp >< / li > ' // new_line('a') // & ' < / ul > ' // new_line('a') // & ' < samp >< mark > & lt ; / ul >< / mark >< / samp > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; ol >< / mark >< / samp > ' // new_line('a') // & ' < ol > ' // new_line('a') // & ' < li >< samp >< mark > & lt ; li >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / li >< / mark >< / samp >< / li > ' // new_line('a') // & ' < li >< samp >< mark > & lt ; li >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / li >< / mark >< / samp >< / li > ' // new_line('a') // & ' < li >< samp >< mark > & lt ; li >< / mark >< / samp > Lorem ipsum < samp > ' // new_line('a') // & ' < mark > & lt ; / li >< / mark >< / samp >< / li > ' // new_line('a') // & ' < / ol > ' // new_line('a') // & ' < samp >< mark > & lt ; / ol >< / mark >< / samp > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; h6 >< / mark >< / samp >< h6 style = \"display:inline\" > Lorem ' // new_line('a') // & ' ipsum < / h6 >< samp >< mark > & lt ; / h6 >< / mark >< / samp >< br / > ' // new_line('a') // & ' < samp >< mark > & lt ; h5 >< / mark >< / samp >< h5 style = \"display:inline\" > Lorem ' // new_line('a') // & ' ipsum < / h5 >< samp >< mark > & lt ; / h5 >< / mark >< / samp >< br / > ' // new_line('a') // & ' < samp >< mark > & lt ; h4 >< / mark >< / samp >< h4 style = \"display:inline\" > Lorem ' // new_line('a') // & ' ipsum < / h4 >< samp >< mark > & lt ; / h4 >< / mark >< / samp >< br / > ' // new_line('a') // & ' < samp >< mark > & lt ; h3 >< / mark >< / samp >< h3 style = \"display:inline\" > Lorem ' // new_line('a') // & ' ipsum < / h3 >< samp >< mark > & lt ; / h3 >< / mark >< / samp >< br / > ' // new_line('a') // & ' < samp >< mark > & lt ; h2 >< / mark >< / samp >< h2 style = \"display:inline\" > Lorem ' // new_line('a') // & ' ipsum < / h2 >< samp >< mark > & lt ; / h2 >< / mark >< / samp >< br / > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; pre >< / mark >< / samp >< pre > ' // new_line('a') // & ' Aliquam convallis sollicitudin purus . Praesent aliquam , enim at ' // new_line('a') // & ' fermentum mollis , ligula massa adipiscing nisl , ac euismod nibh nisl ' // new_line('a') // & ' eu lectus . Fusce vulputate sem at sapien . Vivamus leo . Aliquam ' // new_line('a') // & ' euismod libero eu enim . Nulla nec felis sed leo placerat imperdiet .' // new_line('a') // & ' Aenean suscipit nulla in justo . Suspendisse cursus rutrum augue .' // new_line('a') // & ' Nulla tincidunt tincidunt mi . Curabitur iaculis , lorem vel rhoncus ' // new_line('a') // & ' faucibus , felis magna fermentum augue , et ultricies lacus lorem ' // new_line('a') // & ' varius purus . Curabitur eu amet .' // new_line('a') // & ' < / pre >< samp >< mark > & lt ; / pre >< / mark >< / samp > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; samp >< / mark >< / samp > < samp > character ( len = 15 ) function ' // new_line('a') // & ' clock ()< / samp > < samp >< mark > & lt ; / samp >< / mark >< / samp >< br / > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; pre > & lt ; code >< / mark >< / samp > ' // new_line('a') // & ' < pre >< code > ' // new_line('a') // & '!' // new_line('a') // & '! & lt ; ----------------------------- code ---------------------------------------- > ' // new_line('a') // & '!' // new_line('a') // & ' character ( len = 15 ) function clock () ' // new_line('a') // & '!' // new_line('a') // & '! ------------------------------ head ----------------------------------------- ' // new_line('a') // & ' character ( len = 10 ) :: raw_clock ' // new_line('a') // & '! ------------------------------ body ----------------------------------------- ' // new_line('a') // & ' call date_and_time ( &' // new_line('a') // & ' time = raw_clock &' // new_line('a') // & ' ) ' // new_line('a') // & \"   clock = '[' // raw_clock(1:2) // ':' // raw_clock(3:4) // ':'               &\" // new_line('a') // & \"           // raw_clock (5:10) // ']'                                           \" // new_line('a') // & '! ----------------------------------------------------------------------------- ' // new_line('a') // & '!' // new_line('a') // & ' end function clock ' // new_line('a') // & '!' // new_line('a') // & '! & lt ; ----------------------------- code ---------------------------------------- > ' // new_line('a') // & '!' // new_line('a') // & ' < / code >< / pre > ' // new_line('a') // & ' < samp >< mark > & lt ; / pre > & lt ; / code >< / mark >< / samp > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; blockquote >< / mark >< / samp >< blockquote > ' // new_line('a') // & ' Aliquam convallis sollicitudin purus . Praesent aliquam , enim at ' // new_line('a') // & ' fermentum mollis , ligula massa adipiscing nisl , ac euismod nibh nisl ' // new_line('a') // & ' eu lectus . Fusce vulputate sem at sapien . Vivamus leo . Aliquam euismod ' // new_line('a') // & ' libero eu enim . Nulla nec felis sed leo placerat imperdiet . Aenean ' // new_line('a') // & ' suscipit nulla in justo . Suspendisse cursus rutrum augue . Nulla ' // new_line('a') // & ' tincidunt tincidunt mi . Curabitur iaculis , lorem vel rhoncus faucibus , ' // new_line('a') // & ' felis magna fermentum augue , et ultricies lacus lorem varius purus .' // new_line('a') // & ' Curabitur eu amet . < br / > ' // new_line('a') // & ' < / blockquote >< samp >< mark > & lt ; / blockquote >< / mark >< / samp > ' // new_line('a') // & ' < hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; address >< / mark >< / samp >< address > Aliquam Convallis ' // new_line('a') // & ' < samp >< mark > & lt ; br / >< / mark >< / samp >< br / > ' // new_line('a') // & ' Nulla nec felis sed < samp >< mark > & lt ; br / >< / mark >< / samp >< br / > ' // new_line('a') // & ' Aenean ' // new_line('a') // & ' < / address >< samp >< mark > & lt ; / address >< / mark >< / samp >< hr / > ' // new_line('a') // & ' < samp >< mark > & lt ; hr style = \"width:30%\" / >< / mark >< / samp > < hr ' // new_line('a') // & ' style = \"width:30%;margin-top:-0.7ex;\" / > '","tags":"","loc":"sourcefile/lorem_ipsum.inc.html","title":"lorem_ipsum.inc – fBlog"},{"text":"type, private :: post_t Components Type Visibility Attributes Name Initial character(len=14), public :: date = \"\" character(len=512), public :: post_title = \"\" integer, public :: year = 0 integer, public :: month = 0 integer, public :: day = 0 integer, public :: hour = 0 integer, public :: minute = 0 integer, public :: seconde = 0 Source Code type :: post_t integer :: year = 0 integer :: month = 0 integer :: day = 0 integer :: hour = 0 integer :: minute = 0 integer :: seconde = 0 character ( len = 14 ) :: date = \"\" character ( len = 512 ) :: post_title = \"\" endtype post_t","tags":"","loc":"type/post_t.html","title":"post_t – fBlog "},{"text":"private function clock() Arguments None Return Value character(len=15) Description Print the computer clock time for update messages. Called By proc~~clock~~CalledByGraph proc~clock clock proc~update update proc~update->proc~clock Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=10), public :: raw_clock Source Code function clock () !! Print the computer clock time for update messages. character ( len = 10 ) :: raw_clock character ( len = 15 ) :: clock ! call date_and_time ( time = raw_clock ) clock = '[' // raw_clock ( 1 : 2 ) // ':' // raw_clock ( 3 : 4 ) // ':' // raw_clock ( 5 : 10 ) // '] ' end function clock","tags":"","loc":"proc/clock.html","title":"clock – fBlog"},{"text":"public function i18n(msg) Arguments Type Intent Optional Attributes Name integer, intent(in) :: msg Return Value character(len=:),\n  allocatable Description Provide sentences in the language according the LANG environment variable. Called By proc~~i18n~~CalledByGraph proc~i18n i18n proc~terminate terminate proc~terminate->proc~i18n proc~update update proc~update->proc~i18n proc~update->proc~terminate proc~init_data init_data proc~update->proc~init_data proc~html_home html_home proc~update->proc~html_home proc~html_year_archive html_year_archive proc~update->proc~html_year_archive proc~html_page html_page proc~update->proc~html_page proc~init_conf init_conf proc~update->proc~init_conf proc~html_permalink html_permalink proc~update->proc~html_permalink proc~html_month_archive html_month_archive proc~update->proc~html_month_archive proc~init_data->proc~i18n proc~init_data->proc~terminate proc~html_home->proc~terminate proc~html_year_archive->proc~terminate proc~html_page->proc~terminate proc~init_conf->proc~terminate proc~html_permalink->proc~terminate proc~html_month_archive->proc~terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=2), public :: lang character(len=256), public, dimension(en:fr, 0:wrong_entry) :: msgstr = \"\" Internationalization of messages according setting of LANG (English, French...) integer, public :: l = 0 integer, public :: stat Source Code function i18n ( msg ) !! Provide sentences in the language according the LANG environment variable. integer , intent ( in ) :: msg character (:), allocatable :: i18n integer :: l = 0 , stat character ( len = 2 ) lang character ( len = 256 ), dimension ( en : fr , 0 : wrong_entry ) :: msgstr = \"\" ! include 'i18n.inc' ! call get_environment_variable ( name = \"LANG\" , value = lang , status = stat ) if ( lang == \"en\" ) l = en if ( lang == \"fr\" ) l = fr str_i18n = trim ( msgstr ( l , msg )) if ( len ( str_i18n ) == 0 ) str_i18n = trim ( msgstr ( en , msg )) i18n = str_i18n deallocate ( str_i18n ) end function i18n","tags":"","loc":"proc/i18n.html","title":"i18n – fBlog"},{"text":"private subroutine html_home(user_home) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: user_home Description Make HTML code for home page. Calls proc~~html_home~~CallsGraph proc~html_home html_home proc~terminate terminate proc~html_home->proc~terminate proc~i18n i18n proc~terminate->proc~i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~html_home~~CalledByGraph proc~html_home html_home proc~update update proc~update->proc~html_home Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: system_msg character(len=6), public :: current_entry_txt character(len=:), public, allocatable :: post integer, public :: file_length integer, public :: i integer, public :: ios integer, public :: lu_index integer, public :: lu_post Source Code subroutine html_home ( user_home ) !! Make HTML code for home page. character ( len =* ), intent ( in ) :: user_home integer :: file_length , i , ios , lu_index , lu_post character ( len = 6 ) :: current_entry_txt character ( len = 256 ) :: system_msg character (:), allocatable :: post ! open ( newunit = lu_index , file = path // export_html_dir // \"index.html\" , action = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1171 , sys_msg = system_msg ) write ( unit = lu_index , fmt = '(a)' ) header_1 , '<title>' // blog_title // ' | ' // trim ( user_home ) // '</title>' // header_2 if ( len ( menu_html ) > 0 ) write ( unit = lu_index , fmt = '(a)' ) '<nav>' , '<hr />' , menu_html // '<hr />' , '</nav>' if ( entries_per_page > total_entries ) entries_per_page = total_entries if ( total_entries > 0 ) then do i = 1 , entries_per_page post = \"\" inquire ( file = path // data_dir // data_post ( i , 6 )% date // '.blog' , size = file_length ) post = repeat ( \" \" , file_length ) open ( newunit = lu_post , file = path // data_dir // data_post ( i , 6 )% date // '.blog' , access = 'stream' , action = 'read' ,& & iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1173 , sys_msg = system_msg ) read ( unit = lu_post ) post close ( unit = lu_post ) write ( unit = current_entry_txt , fmt = '(g0)' ) i write ( unit = lu_index , fmt = '(a)' ) '<article>' if ( total_entries > 1 ) then write ( unit = lu_index , fmt = '(a)' , advance = 'no' ) '<header>' , '<h3><a href=\"' // data_post ( i , 6 )% date // '.html\">' & & // trim ( adjustl ( data_post ( i , 7 )% post_title )) // '</a></h3>' , '</header>' else write ( unit = lu_index , fmt = '(a)' , advance = 'no' ) '<header>' , '<h3>' // trim ( adjustl ( data_post ( i , 7 ) % post_title )) & & // '</h3>' , '</header>' end if write ( unit = lu_index , fmt = '(a)' , advance = 'no' ) post ( len_trim (( data_post ( i , 7 )% post_title )) + 2 : file_length ) if ( total_entries > 1 ) write ( unit = lu_index , fmt = '(g0)' ) '<footer>' , '<a href=\"' // data_post ( i , 6 )% date // '.html\"& &>' // permalink // '</a>&nbsp;&nbsp;' , '<a href=\"' // data_post ( i , 6 )% date // '.htm\">' // printer_friendly // '<& &/a                 >&nbsp;&nbsp;' , '<samp dir=\"ltr\"><time dir=\"ltr\" datetime=\"' // data_post ( i , 6 )% date ( 1 : 4 ) // & & '-' // data_post ( i , 6 ) % date ( 5 : 6 ) // '-' // data_post ( i , 6 )% date ( 7 : 8 ) // 'T' // data_post ( i , 6 )% date ( 9 : 10 ) // ':' // & & data_post ( i , 6 ) % date ( 11 : 12 ) // '\">[' // data_post ( i , 6 )% date ( 1 : 4 ) // '-' // data_post ( i , 6 )% date ( 5 : 6 ) // '-' // & & data_post ( i , 6 ) % date ( 7 : 8 ) // ' (' // data_post ( i , 6 )% date ( 9 : 10 ) // ':' // data_post ( i , 6 )% date ( 11 : 12 ) // ')]' // '<& &/time> [# ' // trim ( current_entry_txt ) // ']</samp>' , '</footer>' write ( unit = lu_index , fmt = '(a)' ) '</article>' close ( unit = lu_post ) end do else write ( unit = lu_index , fmt = '(a)' ) '<article><h3>' // empty_page // '</h3></article>' end if if ( total_entries > entries_per_page ) write ( unit = lu_index , fmt = '(a)' ) '<nav>' , '<hr />' , '<a  rel=\"prev\" href=\"' // & & data_post ( entries_per_page + 1 , 6 )% date // '.html\" >&nbsp;=>&nbsp;</a>' , '</nav>' write ( unit = lu_index , fmt = '(a)' ) footer_1 close ( unit = lu_index ) end subroutine html_home","tags":"","loc":"proc/html_home.html","title":"html_home – fBlog"},{"text":"private subroutine html_month_archive(n_pages) Arguments Type Intent Optional Attributes Name integer, intent(out) :: n_pages Description Make HTML code for monthly index pages. Calls proc~~html_month_archive~~CallsGraph proc~html_month_archive html_month_archive proc~terminate terminate proc~html_month_archive->proc~terminate proc~i18n i18n proc~terminate->proc~i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~html_month_archive~~CalledByGraph proc~html_month_archive html_month_archive proc~update update proc~update->proc~html_month_archive Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=12), public :: m_archive2 character(len=256), public :: system_msg character(len=6), public :: m_archive character(len=6), public :: m_archive1 = \"\" integer, public :: current_entry integer, public :: i integer, public :: ios integer, public :: j integer, public :: k integer, public :: lu_m_archive logical, public :: file_exist Source Code subroutine html_month_archive ( n_pages ) !! Make HTML code for monthly index pages. !  This routine is a shame. But it works... Maybe I'll rewrite it in the future. integer , intent ( out ) :: n_pages logical :: file_exist integer :: current_entry , i , ios , j , k , lu_m_archive character ( len = 6 ) :: m_archive character ( len = 6 ) :: m_archive1 = \"\" character ( len = 12 ) :: m_archive2 character ( len = 256 ) :: system_msg ! n_pages = 0 do current_entry = 1 , total_entries m_archive = data_post ( current_entry , 6 )% date ( 1 : 6 ) do i = 1 , total_entries if ( m_archive == m_archive1 ) cycle if ( data_post ( i , 6 )% date ( 1 : 6 ) /= m_archive ) cycle if ( i > 1 ) then if ( data_post ( i - 1 , 6 )% date ( 1 : 6 ) == m_archive ) cycle end if inquire ( file = path // export_html_dir // data_post ( current_entry , 6 )% date ( 1 : 6 ) // \".html\" , exist = file_exist ) if ( file_exist ) cycle m_archive1 = m_archive open ( newunit = lu_m_archive , file = path // export_html_dir // data_post ( current_entry , 6 )% date ( 1 : 6 ) // \".html\" , action & & = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1181 , sys_msg = system_msg ) write ( unit = lu_m_archive , fmt = '(a)' ) header_1 , '<title>' // blog_title // ' | ' // trim ( archive ) // ' ' // & & data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // data_post ( current_entry , 6 )% date ( 5 : 6 ) // '</title>' // header_2 if ( len ( menu_html ) > 0 ) write ( unit = lu_m_archive , fmt = '(a)' ) '<nav>' , '<hr />' , menu_html // '<hr />' , '</nav>' write ( unit = lu_m_archive , fmt = '(a)' ) '<article>' , '<header>' , '<h3>' // trim ( archive ) // '<span dir=\"ltr\"><code> [' & & // data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // data_post ( current_entry , 6 )% date ( 5 : 6 ) // ']</code></span></h3>' & &, '</header>' , '<ol>' k = 1 do j = 1 , total_entries m_archive2 = data_post ( j , 6 )% date ( 1 : 12 ) if ( m_archive2 ( 1 : 6 ) /= m_archive1 ) cycle write ( unit = lu_m_archive , fmt = '(a)' ) '<li><span dir=\"ltr\"><code>[' // data_post ( j , 6 )% date ( 1 : 4 ) // '-' // & & data_post ( j , 6 )% date ( 5 : 6 ) // '-' // data_post ( j , 6 )% date ( 7 : 8 ) // ' (' // data_post ( j , 6 )% date ( 9 : 10 ) // ':' // & & data_post ( j , 6 )% date ( 11 : 12 ) // ')] </code></span>&nbsp;<a href=\"' // data_post ( j , 6 )% date ( 1 : 14 ) // '.html' // & & '\">' // trim ( adjustl ( data_post ( j , 7 )% post_title )) // '</a></li>' K = k + 1 end do write ( unit = lu_m_archive , fmt = '(a)' ) '</ol>' , '</article>' , footer_1 close ( unit = lu_m_archive ) n_pages = n_pages + 1 end do end do end subroutine html_month_archive","tags":"","loc":"proc/html_month_archive.html","title":"html_month_archive – fBlog"},{"text":"private subroutine html_page(n_pages) Uses: iso_fortran_env Arguments Type Intent Optional Attributes Name integer, intent(out) :: n_pages Description Make HTML code of extra Web pages Calls proc~~html_page~~CallsGraph proc~html_page html_page proc~terminate terminate proc~html_page->proc~terminate proc~i18n i18n proc~terminate->proc~i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~html_page~~CalledByGraph proc~html_page html_page proc~update update proc~update->proc~html_page Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: system_msg character(len=512), public :: readline character(len=:), public, allocatable :: post integer, public :: file_length integer, public :: ios integer, public :: lu_data_page integer, public :: lu_page integer, public :: lu_page_list Source Code subroutine html_page ( n_pages ) !! Make HTML code of extra Web pages use , intrinsic :: iso_fortran_env , only :& iostat_end integer , intent ( out ) :: n_pages integer :: file_length , ios , lu_data_page , lu_page , lu_page_list character (:), allocatable :: post character ( len = 256 ) :: system_msg character ( len = 512 ) :: readline ! n_pages = 0 call execute_command_line ( command = 'ls ' // path // pages_dir // \" > \" // path // fblog_dir // 'pages_list.txt' ) open ( newunit = lu_page_list , file = path // fblog_dir // 'pages_list.txt' , status = 'old' , action = 'read' , iostat = ios ,& & iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1221 , sys_msg = system_msg ) build_pages : do post = \"\" read ( unit = lu_page_list , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit build_pages inquire ( file = path // pages_dir // trim ( readline ), size = file_length ) post = repeat ( \" \" , file_length ) open ( newunit = lu_data_page , file = path // PAGES_DIR // trim ( readline ), access = 'stream' , action = 'read' , iostat = ios ,& & iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1223 , sys_msg = system_msg ) read ( unit = lu_data_page ) post close ( unit = lu_data_page ) open ( newunit = lu_page , file = path // export_html_dir // trim ( readline ), action = 'write' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1222 , sys_msg = system_msg ) write ( unit = lu_page , fmt = '(a)' ) header_1 , '<title>' // trim ( blog_title ) // '</title>' // header_2 , '<nav>' , '<hr />' ,& & menu_html // '<hr />' , '</nav>' , '<article>' , post // '</article>' , footer_1 close ( unit = lu_page ) n_pages = n_pages + 1 end do build_pages close ( unit = lu_page_list , status = 'delete' ) end subroutine html_page","tags":"","loc":"proc/html_page.html","title":"html_page – fBlog"},{"text":"private subroutine html_permalink() Arguments None Description Make HTML code for permalink pages. Calls proc~~html_permalink~~CallsGraph proc~html_permalink html_permalink proc~terminate terminate proc~html_permalink->proc~terminate proc~i18n i18n proc~terminate->proc~i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~html_permalink~~CalledByGraph proc~html_permalink html_permalink proc~update update proc~update->proc~html_permalink Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: system_msg character(len=6), public :: current_entry_txt character(len=:), public, allocatable :: post integer, public :: current_entry integer, public :: file_length integer, public :: ios integer, public :: lu_permalink integer, public :: lu_post integer, public :: lu_printer_friendly_page Source Code subroutine html_permalink () !! Make HTML code for permalink pages. integer :: current_entry , file_length , ios , lu_permalink , lu_post , lu_printer_friendly_page character (:), allocatable :: post character ( len = 6 ) :: current_entry_txt character ( len = 256 ) :: system_msg ! do current_entry = 1 , total_entries post = \"\" write ( unit = current_entry_txt , fmt = '(g0)' ) current_entry inquire ( file = path // data_dir // data_post ( current_entry , 6 )% date // '.blog' , size = file_length ) post = repeat ( \" \" , file_length ) open ( newunit = lu_post , file = path // data_dir // data_post ( current_entry , 6 )% date // '.blog' , access = 'stream' , action = & & 'read' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1193 , sys_msg = system_msg ) read ( unit = lu_post ) post close ( unit = lu_post ) ! Printer friendly page open ( newunit = lu_printer_friendly_page , file = path // export_html_dir // data_post ( current_entry , 6 )% date // \".htm\" , action & & = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1241 , sys_msg = system_msg ) write ( unit = lu_printer_friendly_page , fmt = '(a)' ) header_1 , '<title>' // blog_title // ' | ' // & & trim ( data_post ( current_entry , 7 )% post_title ) // '</title>' if ( css_print ) write ( unit = lu_printer_friendly_page , fmt = '(a)' ) '<link rel=\"stylesheet\" href=\"' // css_print_file // '\"& & type=\"text/css\" media=\"all\" />' write ( unit = lu_printer_friendly_page , fmt = '(a)' ) '</head>' , '<body>' , '<article>' , '<h3>' ,& & trim ( adjustl ( data_post ( current_entry , 7 ) % post_title )), '</h3>' , post ( len_trim ( data_post ( current_entry , 7 )% post_title )& & + 2 : len ( post )) // '</article>' , '<footer>' , '<hr />' , '<address>' // blog_title // '</address>' , '<samp dir=\"ltr\">' & & // data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // data_post ( current_entry , 6 )% date ( 5 : 6 ) // '-' // & & data_post ( current_entry , 6 )% date ( 7 : 8 ) // ' (' // data_post ( current_entry , 6 )% date ( 9 : 10 ) // ':' // & & data_post ( current_entry , 6 )% date ( 11 : 12 ) // ')' // '</samp>' , '</footer>' , '</body>' , '</html>' close ( unit = lu_printer_friendly_page ) ! End printer friendly page open ( newunit = lu_permalink , file = path // export_html_dir // data_post ( current_entry , 6 )% date // \".html\" , action = 'write' ,& & iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1191 , sys_msg = system_msg ) write ( unit = lu_permalink , fmt = '(g0)' ) header_1 , '<title>' // blog_title // ' | ' // trim ( data_post ( current_entry , 7 ) & &% post_title ) // '</title>' // header_2 menu : if ( len ( menu_html ) > 0 ) then if ( current_entry < total_entries . and . current_entry /= 1 ) then write ( unit = lu_permalink , fmt = '(g0)' , advance = 'no' ) '<nav>' // nl // '<hr />' // nl // '<a rel=\"next\" href=\"' // & & data_post ( current_entry - 1 , 6 )% date // '.html' // '\">&nbsp;&lt;=&nbsp;</a> ' // ' <a rel& &=\"prev\" href=\"' // data_post ( current_entry + 1 , 6 )% date // '.html\">&nbsp;=>&nbsp;</a>' // nl // menu_html // '<hr& & />' // nl // '</nav>' // nl exit menu end if if ( current_entry == 1 . and . total_entries > 1 ) then write ( unit = lu_permalink , fmt = '(g0)' , advance = 'no' ) '<nav>' // nl // '<hr />' // nl // '<a rel=\"prev\" href=\"' // & & data_post ( current_entry + 1 , 6 )% date // '.html' // '\">&nbsp;=>&nbsp;</a>' // menu_html // '<hr& &  />' // nl // '</nav>' // nl exit menu end if if ( total_entries == current_entry . and . total_entries > 1 ) then write ( unit = lu_permalink , fmt = '(g0)' , advance = 'no' ) '<nav>' // nl // '<hr />' // nl // '<a rel=\"next\" href=\"' // & & data_post ( current_entry - 1 , 6 )% date // '.html' // '\">&nbsp;&lt;=&nbsp;</a>' // nl // menu_html // '<hr />' // & & nl // '</nav>' // nl exit menu end if if ( total_entries == 1 ) then write ( unit = lu_permalink , fmt = '(g0)' , advance = 'no' ) '<nav>' // nl // '<hr />' // nl // menu_html // '<hr />' // & & nl // '</nav>' // nl // '<hr />' // nl // '</nav>' // nl exit menu end if end if menu write ( unit = lu_permalink , fmt = '(g0)' ) '<article>' , '<header>' , '<h3>' // trim ( adjustl ( data_post ( current_entry , 7 )& &% post_title )) // '</h3>' , '</header>' , post ( len_trim ( data_post ( current_entry , 7 )% post_title ) + 2 : file_length ) // '& &<footer>' , '<a href=\"' // data_post ( current_entry , 6 )% date // '.htm\">' // printer_friendly // '</a>&nbsp;&nbsp;' , '& &<samp dir=\"ltr\"><time datetime=\"' // data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // data_post ( current_entry , 6 )& &% date ( 5 : 6 ) // '-' // data_post ( current_entry , 6 )% date ( 7 : 8 ) // 'T' // data_post ( current_entry , 6 )% date ( 9 : 10 ) // ':' // & & data_post ( current_entry , 6 )% date ( 11 : 12 ) // '\">[' // data_post ( current_entry , 6 )% date ( 1 : 4 ) // '-' // & & data_post ( current_entry , 6 )% date ( 5 : 6 ) // '-' // data_post ( current_entry , 6 )% date ( 7 : 8 ) // ' (' // & & data_post ( current_entry , 6 )% date ( 9 : 10 ) // ':' // data_post ( current_entry , 6 )% date ( 11 : 12 ) // ')]' // '</time>&nbsp;' // & & ' [# ' // trim ( current_entry_txt ) // ']</samp>' , '</footer>' , '</article>' , footer_1 close ( unit = lu_permalink ) end do end subroutine html_permalink","tags":"","loc":"proc/html_permalink.html","title":"html_permalink – fBlog"},{"text":"private subroutine html_year_archive() Arguments None Description Make HTML code of main index page. Calls proc~~html_year_archive~~CallsGraph proc~html_year_archive html_year_archive proc~terminate terminate proc~html_year_archive->proc~terminate proc~i18n i18n proc~terminate->proc~i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~html_year_archive~~CalledByGraph proc~html_year_archive html_year_archive proc~update update proc~update->proc~html_year_archive Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: system_msg integer, public :: i integer, public :: ios integer, public :: j integer, public :: lu_archive integer, public :: total_month_entries Source Code subroutine html_year_archive () !! Make HTML code of main index page. integer :: i , ios , j , lu_archive , total_month_entries character ( len = 256 ) :: system_msg ! open ( newunit = lu_archive , file = path // export_html_dir // archive // \".html\" , action = 'write' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1201 , sys_msg = system_msg ) write ( unit = lu_archive , fmt = '(a)' ) header_1 // nl // '<title>' // blog_title // ' | ' // trim ( archive ) // '</title>' // & & header_2 if ( len ( menu_html ) > 0 ) write ( unit = lu_archive , fmt = '(a)' ) '<nav>' , '<hr />' , menu_html // '<hr />' , '</nav>' write ( unit = lu_archive , fmt = '(a)' ) '<article>' , '<header>' , '<h3>' // archive // '</h3>' , '</header>' , '<dl>' scan_year : do j = year1 , year2 , - 1 write ( unit = lu_archive , fmt = '(a, i4, 2a)' ) '<dt>' , stats ( j , 0 ), '</dt>' , '<dd>' scan_month : do i = 1 , 12 total_month_entries = stats ( j , i ) if ( total_month_entries == 0 ) cycle write ( unit = lu_archive , fmt = '(a, i4, i2.2, 3a, I2.2, a)' ) '<a href=\"' , j , i , '.html\">' , trim ( monthes ( i )), '</a><code& & dir=\"ltr\">[' , total_month_entries , ']</code>' end do scan_month write ( unit = lu_archive , fmt = '(a)' ) '</dd>' end do scan_year write ( unit = lu_archive , fmt = '(a)' ) '</dl>' , '</article>' , footer_1 close ( unit = lu_archive ) end subroutine html_year_archive","tags":"","loc":"proc/html_year_archive.html","title":"html_year_archive – fBlog"},{"text":"public subroutine init_conf() Arguments None Description Initialisation according the settings of the configuration file and environment.\n (This is the first step of two.) Calls proc~~init_conf~~CallsGraph proc~init_conf init_conf proc~terminate terminate proc~init_conf->proc~terminate proc~i18n i18n proc~terminate->proc~i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~init_conf~~CalledByGraph proc~init_conf init_conf proc~update update proc~update->proc~init_conf Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: system_msg character(len=512), public :: readline character(len=:), public, allocatable :: label character(len=:), public, allocatable :: url character(len=:), public, allocatable :: user_editor integer, public :: ios integer, public :: lu_config integer, public :: position_char Source Code subroutine init_conf () !! Initialisation according the settings of the configuration file and environment. !! (This is the first step of two.) integer :: ios , lu_config , position_char character ( len = 512 ) :: readline character ( len = 256 ) :: system_msg character (:), allocatable :: label , url , user_editor ! css_file = \"\" css_print_file = \"\" archive = \"Archive\" home = \"Home\" permalink = \"permalink\" printer_friendly = \"printer-friendly page\" call get_environment_variable ( name = \"EDITOR\" , value = readline ) editor = trim ( readline ) if ( len ( editor ) == 0 ) editor = default_editor open ( newunit = lu_config , file = path // config_file , status = 'old' , action = 'read' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1111 , sys_msg = system_msg ) settings : do read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline if ( ios /= 0 ) exit readline = adjustl ( readline ) if ( readline ( 1 : 1 ) == \"#\" . or . len ( trim ( readline )) == 0 ) cycle global : if ( trim ( readline ) == \"[global]\" ) then do user_editor = \"\" read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit global if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit global end if if ( trim ( readline ) == \"\" ) cycle position_char = index ( string = readline , substring = \"=\" ) select case ( readline ( 1 : position_char - 1 )) case ( \"TITLE\" ) blog_title = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"CHARSET\" ) charset = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"LANG\" ) language = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"DIRECTION\" ) direction = adjustl ( readline ( position_char + 1 :)) if ( len ( trim ( direction )) == 0 ) direction = \"ltr\" case ( \"MAX_ENTRIES\" ) readline = adjustl ( readline ( position_char + 1 :)) read ( unit = readline , fmt = '(I2)' ) entries_per_page if ( entries_per_page < 1 ) entries_per_page = 10 case ( \"CSS\" ) css_file = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"CSS_PRINT\" ) css_print_file = trim ( adjustl ( readline ( position_char + 1 :))) case ( \"EDITOR\" ) user_editor = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( user_editor ) > 0 ) editor = user_editor end select end do end if global locale : if ( trim ( readline ) == \"[translation]\" ) then do read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit locale position_char = index ( string = readline , substring = \"=\" ) if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit locale end if if ( trim ( readline ) == \"\" ) cycle select case ( readline ( 1 : position_char - 1 )) case ( \"HOME\" ) home = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( home ) == 0 ) home = \"Home\" case ( \"ARCHIVE\" ) archive = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( archive ) == 0 ) archive = \"Archive\" case ( \"PERMALINK\" ) permalink = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( permalink ) == 0 ) permalink = \"permalink\" case ( \"PRINTER_FRIENDLY\" ) printer_friendly = trim ( adjustl ( readline ( position_char + 1 :))) if ( len ( printer_friendly ) == 0 ) printer_friendly = \"printer-friendly page\" case ( \"JANUARY\" ) monthes ( 1 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 1 ) == \"\" ) monthes ( 1 ) = \"jan\" case ( \"FEBRUARY\" ) monthes ( 2 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 2 ) == \"\" ) monthes ( 2 ) = \"feb\" case ( \"MARCH\" ) monthes ( 3 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 3 ) == \"\" ) monthes ( 3 ) = \"mar\" case ( \"APRIL\" ) monthes ( 4 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 4 ) == \"\" ) monthes ( 4 ) = \"apr\" case ( \"MAY\" ) monthes ( 5 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 5 ) == \"\" ) monthes ( 5 ) = \"may\" case ( \"JUNE\" ) monthes ( 6 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 6 ) == \"\" ) monthes ( 6 ) = \"jun\" case ( \"JULY\" ) monthes ( 7 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 7 ) == \"\" ) monthes ( 7 ) = \"jul\" case ( \"AUGUST\" ) monthes ( 8 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 8 ) == \"\" ) monthes ( 8 ) = \"aug\" case ( \"SEPTEMBER\" ) monthes ( 9 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 9 ) == \"\" ) monthes ( 9 ) = \"sep\" case ( \"OCTOBER\" ) monthes ( 10 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 10 ) == \"\" ) monthes ( 10 ) = \"oct\" case ( \"NOVEMBER\" ) monthes ( 11 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 11 ) == \"\" ) monthes ( 11 ) = \"nov\" case ( \"DECEMBER\" ) monthes ( 12 ) = adjustl ( readline ( position_char + 1 :)) if ( monthes ( 12 ) == \"\" ) monthes ( 12 ) = \"dec\" end select end do end if locale menu : if ( trim ( readline ) == \"[menu]\" ) then menu_html = \"\" do url = \"\" read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit menu position_char = index ( string = readline , substring = \"=\" ) if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit menu end if if ( trim ( readline ) == \"\" ) cycle position_char = index ( string = readline , substring = \"=\" ) label = trim ( readline ( 1 : position_char - 1 )) url = trim ( adjustl ( readline ( position_char + 1 :))) menu_html = menu_html // '[<a href=\"' // url // '\">' // label // '</a>]' // nl end do end if menu template_description : if ( trim ( readline ) == \"[description]\" ) then description = \"\" do read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit template_description if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit template_description end if if ( trim ( readline ) == \"\" ) cycle description = description // trim ( readline ) // nl end do end if template_description template_footer : if ( trim ( readline ) == \"[footer]\" ) then footer = \"\" do read ( unit = lu_config , fmt = '(a)' , iostat = ios ) readline readline = adjustl ( readline ) if ( ios /= 0 ) exit template_footer if ( readline ( 1 : 1 ) == \"#\" ) cycle if ( readline ( 1 : 1 ) == \"[\" ) then backspace ( unit = lu_config ) exit template_footer end if if ( trim ( readline ) == \"\" ) cycle footer = trim ( footer ) // trim ( readline ) // nl end do end if template_footer end do settings close ( unit = lu_config ) if ( total_entries < 2 ) then menu_html = '[<a href=\"index.html\">' // home // '</a>]' // nl // trim ( menu_html ) else menu_html = '[<a href=\"index.html\">' // home // '</a>]' // nl // '[<a href=\"' // archive // '.html\">' // archive // '</a>]' & // nl // menu_html end if if ( len ( css_file ) == 0 ) then css = . false . else css = . true . end if if ( len ( css_print_file ) == 0 ) then css_print = . false . else css_print = . true . end if end subroutine init_conf","tags":"","loc":"proc/init_conf.html","title":"init_conf – fBlog"},{"text":"public subroutine init_data() Uses: iso_fortran_env Arguments None Description Collect titles and dates of entries. (This is the second step of two.) Calls proc~~init_data~~CallsGraph proc~init_data init_data proc~terminate terminate proc~init_data->proc~terminate proc~i18n i18n proc~init_data->proc~i18n proc~terminate->proc~i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~init_data~~CalledByGraph proc~init_data init_data proc~update update proc~update->proc~init_data Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: command_msg = \"\" character(len=256), public :: system_msg character(len=512), public :: readline character(len=512), public :: readline1 integer, public :: command_status = 0 integer, public :: exit_status = 0 integer, public :: file_length integer, public :: intreadline integer, public :: intreadline1 integer, public :: i integer, public :: ios integer, public :: j integer, public :: lu_lstmp integer, public :: lu_post integer, public :: lu_wrong Source Code subroutine init_data () !! Collect titles and dates of entries. (This is the second step of two.) use , intrinsic :: iso_fortran_env , only : & iostat_end integer :: command_status = 0 , exit_status = 0 , file_length , intreadline , intreadline1 , i , ios , j , lu_lstmp , lu_post ,& & lu_wrong character ( len = 256 ) :: command_msg = \"\" , system_msg character ( len = 512 ) :: readline , readline1 ! if ( allocated ( data_post )) deallocate ( data_post ) if ( allocated ( stats )) deallocate ( stats ) call execute_command_line ( command = 'ls -r ' // path // data_dir // ' > ' // path // fblog_dir // 'data_list.txt' , exitstat = & & exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1121 , cmd_msg = command_msg ) open ( newunit = lu_lstmp , file = path // fblog_dir // \"data_list.txt\" , action = 'read' , status = 'old' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1122 , sys_msg = system_msg ) do read ( unit = lu_lstmp , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit if ( len ( trim ( readline )) /= 19 ) then open ( newunit = lu_wrong , file = path // data_dir // trim ( readline ), status = 'old' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1123 , sys_msg = system_msg ) print * , i18n ( is_deleted ) // path // data_dir // trim ( readline ) close ( unit = lu_wrong , status = 'delete' ) read ( unit = lu_lstmp , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit end if inquire ( file = path // data_dir // trim ( readline ), size = file_length ) if ( file_length < 2 ) then open ( newunit = lu_wrong , file = path // data_dir // trim ( readline ), status = 'old' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1124 , sys_msg = system_msg ) print * , i18n ( is_deleted ) // path // data_dir // trim ( readline ) close ( unit = lu_wrong , status = 'delete' ) end if end do close ( unit = lu_lstmp ) call execute_command_line ( command = 'ls -r ' // path // data_dir // ' > ' // path // FBLOG_DIR // 'data_list.txt' , exitstat = & & exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1125 , cmd_msg = command_msg ) open ( newunit = lu_lstmp , file = path // fblog_dir // \"data_list.txt\" , action = 'read' , status = 'old' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1126 , sys_msg = system_msg ) total_entries = 0 do read ( unit = lu_lstmp , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit total_entries = total_entries + 1 end do if ( total_entries == 0 ) then close ( unit = lu_lstmp , status = 'delete' ) return end if rewind ( unit = lu_lstmp ) allocate ( data_post ( 1 : total_entries , 1 : 7 )) readline = \"\" do i = 1 , total_entries read ( unit = lu_lstmp , fmt = '(a)' ) readline data_post ( i , 6 )% date = trim ( readline ( 1 : 14 )) open ( newunit = lu_post , file = path // data_dir // trim ( readline ), action = 'read' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1127 , sys_msg = system_msg ) read ( unit = lu_post , fmt = '(a)' ) readline1 data_post ( i , 7 )% post_title = trim ( readline1 ) read ( unit = readline ( 1 : 4 ), fmt = * ) intreadline data_post ( i , 1 )% year = intreadline read ( unit = readline ( 5 : 6 ), fmt = * ) intreadline data_post ( i , 2 )% month = intreadline read ( unit = readline ( 7 : 8 ), fmt = * ) intreadline data_post ( i , 3 )% day = intreadline read ( unit = readline ( 9 : 10 ), fmt = * ) intreadline data_post ( i , 4 )% hour = intreadline read ( unit = readline ( 11 : 12 ), fmt = * ) intreadline data_post ( i , 5 )% minute = intreadline read ( unit = readline ( 13 : 14 ), fmt = * ) intreadline data_post ( i , 6 )% seconde = intreadline data_post ( i , 7 )% post_title = trim ( readline1 ) close ( unit = lu_post ) end do year1 = data_post ( 1 , 1 )% year year2 = data_post ( total_entries , 1 )% year allocate ( stats ( year2 : year1 , 0 : 14 )) stats ( year2 : year1 , 0 : 14 ) = 0 do j = year2 , year1 stats ( j , 0 ) = j end do rewind ( unit = lu_lstmp ) do read ( unit = lu_lstmp , fmt = '(a)' , iostat = ios ) readline if ( ios == iostat_end ) exit read ( unit = readline ( 1 : 4 ), fmt = * ) intreadline read ( unit = readline ( 5 : 6 ), fmt = * ) intreadline1 stats ( intreadline , intreadline1 ) = stats ( intreadline , intreadline1 ) + 1 end do close ( unit = lu_lstmp , status = 'delete' ) end subroutine init_data","tags":"","loc":"proc/init_data.html","title":"init_data – fBlog"},{"text":"public subroutine update() Arguments None Description Build all pages of the blog. The most important procedure of the project!\n This procedure could be called from an other program by including in it module fblog_m. Calls proc~~update~~CallsGraph proc~update update proc~terminate terminate proc~update->proc~terminate proc~html_home html_home proc~update->proc~html_home proc~html_year_archive html_year_archive proc~update->proc~html_year_archive proc~clock clock proc~update->proc~clock proc~html_page html_page proc~update->proc~html_page proc~init_conf init_conf proc~update->proc~init_conf proc~i18n i18n proc~update->proc~i18n proc~html_permalink html_permalink proc~update->proc~html_permalink proc~init_data init_data proc~update->proc~init_data proc~html_month_archive html_month_archive proc~update->proc~html_month_archive proc~terminate->proc~i18n proc~html_home->proc~terminate proc~html_year_archive->proc~terminate proc~html_page->proc~terminate proc~init_conf->proc~terminate proc~html_permalink->proc~terminate proc~init_data->proc~terminate proc~init_data->proc~i18n proc~html_month_archive->proc~terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: command_msg = \"\" integer, public :: command_status = 0 integer, public :: count_archive_pages integer, public :: count_css = 0 integer, public :: count_pages = 0 integer, public :: exit_status = 0 logical, public :: file_exist Source Code subroutine update () !! Build all pages of the blog. The most important procedure of the project! !! This procedure could be called from an other program by including in it module fblog_m. logical :: file_exist integer :: command_status = 0 , count_archive_pages , count_css = 0 , count_pages = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! call init_data () call init_conf () header_1 = '<!DOCTYPE html>' if (( len ( language ) == 0 ) . and . ( direction == \"ltr\" )) header_1 = header_1 // nl // '<html>' if (( len ( language ) == 0 ) . and . ( direction == \"rtl\" )) header_1 = header_1 // nl // '<html dir=\"rtl\">' if (( len ( language ) > 1 ) . and . ( direction == \"ltr\" )) header_1 = header_1 // nl // '<html lang=\"' // language // '\">' if (( len ( language ) > 1 ) . and . ( direction == \"rtl\" )) header_1 = header_1 // nl // '<html lang=\"' // language // '\" dir=\"rtl\">' header_1 = header_1 // nl // '<head>' // nl // '<meta charset=' // '\"' // charset // '\" />' // nl // '<meta name=\"generator\"& & content=\"fBlog ' // VERSION // '\" />' if ( css ) header_2 = nl // '<link rel=\"stylesheet\" href=\"' // css_file // '\" type=\"text/css\" media=\"all\" />' // nl // '</head>' & & // nl // '<body>' // nl // '<header>' // nl // '<h1><a href=\"index.html\">' // blog_title // '</a></h1>' // nl // '<& &/header>' if ( len ( description ) > 0 ) header_2 = header_2 // nl // '<aside>' // nl // description // '</aside>' if ( len ( footer ) > 0 ) footer_1 = '<footer>' // nl // '<hr />' // nl // footer // '</footer>' // nl // '</body>' // nl // '</html& &>' print '(a)' , clock () // i18n ( begin_update ) print '(a)' , clock () // i18n ( initialisation_reading_data ) print '(a)' , clock () // i18n ( initialisation_reading_conf ) inquire ( file = path // export_html_dir // 'index.html' , exist = file_exist ) if ( file_exist ) then print '(6a)' , clock (), i18n ( make_clear_subdirectory ), \"./\" , path , export_html_dir , \"'\" call execute_command_line ( command = \"rm \" // path // export_html_dir // \"*\" , wait = . true ., exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1211 , cmd_msg = command_msg ) print '(6a)' , clock (), i18n ( end_clearing_subdirectory ), \"./\" , path , export_html_dir , \"'\" end if if ( total_entries > 1 ) then print '(6a)' , clock (), i18n ( make_permalink_pages ), \"./\" , path , export_html_dir , \"ccyymmddhhmmss.htm(l)'\" call html_permalink () print '(a,g0,a)' , clock (), 2 * total_entries , \" \" // i18n ( permalink_pages_built ) call html_month_archive ( n_pages = count_archive_pages ) print '(a,g0,2a)' , clock (), count_archive_pages , \" \" , i18n ( monthly_archive_pages_built ) print '(7a)' , clock (), i18n ( make_archive_pages ), \"./\" , path , export_html_dir , archive , \".html'\" call html_year_archive () end if print '(6a)' , clock (), i18n ( make_home_page ), \"./\" , path , export_html_dir , \"index.html'\" call html_home ( user_home = home ) print '(6a)' , clock (), i18n ( make_pages ), \"./\" , path , export_html_dir , \"*.html'\" call html_page ( n_pages = count_pages ) print '(a,g0,2a)' , clock (), count_pages , \" \" , i18n ( pages_built ) if ( css ) then print '(7a)' , clock (), i18n ( copy_css ), \"./\" , path , export_html_dir , css_file , \"'\" call execute_command_line ( command = \"cp \" // path // styles_dir // css_file // \" \" // path // export_html_dir , exitstat = & & exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1212 , inf_msg = i18n ( error_css )) else print '(a)' , i18n ( warn_about_no_css ) end if if ( css_print . and . ( total_entries > 1 )) then print '(7a)' , clock (), i18n ( copy_css_print ), \"./\" , path , export_html_dir , css_print_file , \"'\" call execute_command_line ( command = \"cp \" // path // styles_dir // css_print_file // \" \" // path // export_html_dir ,& & exitstat = exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1213 , inf_msg = i18n ( error_css_print )) else if ( css_print . and . ( total_entries > 1 )) print '(a)' , i18n ( warn_about_no_css_print ) end if print '(2a)' , clock (), i18n ( update_done ) if ( css ) count_css = 1 if ( css_print . and . ( total_entries > 1 )) count_css = count_css + 1 if ( total_entries < 2 ) print '(g0,6a)' , count_pages + 1 + count_css , \" \" , i18n ( files_generated_inside_the_subdirectory ), & & \"./\" , path , export_html_dir , \"'\" if ( total_entries > 1 ) print '(g0,6a)' , count_archive_pages + ( 2 * total_entries ) + count_pages + 2 + count_css , \" \" ,& & i18n ( files_generated_inside_the_subdirectory ), \"./\" // path , export_html_dir , \"'\" end subroutine update","tags":"","loc":"proc/update.html","title":"update – fBlog"},{"text":"public subroutine terminate(error_code, cmd_msg, inf_msg, sys_msg) Uses: iso_fortran_env Arguments Type Intent Optional Attributes Name integer, intent(in) :: error_code character(len=*), intent(in), optional :: cmd_msg character(len=*), intent(in), optional :: inf_msg character(len=*), intent(in), optional :: sys_msg Description Double role: error function and normal terminaison of job. In case of malfunction,\n an error code is provided. This error code gives location of the failure in source\n code. 1000 -> 1010  subroutine add_post\n 1011 -> 1020  subroutine config\n 1021 -> 1030  subroutine create_blog\n 1031 -> 1040  subroutine delete_css\n 1041 -> 1050  subroutine delete_page\n 1051 -> 1060  subroutine delete_post\n 1061 -> 1070  subroutine edit_css\n 1071 -> 1080  subroutine edit_page\n 1081 -> 1090  subroutine edit_post\n 1091 -> 1100  program main\n 1111 -> 1120  subroutine init_conf\n 1121 -> 1130  subroutine init_data\n 1131 -> 1140  subroutine console\n 1141 -> 1150  subroutine menu_post\n 1151 -> 1160  subroutine list_css\n 1161 -> 1170  subroutine list_pages\n 1171 -> 1180  subroutine html_home\n 1181 -> 1190  subroutine html_month_archive\n 1191 -> 1200  subroutine html_permalink\n 1201 -> 1210  subroutine html_year_archive\n 1211 -> 1220  subroutine update\n 1221 -> 1230  subroutine html_page\n 1231 -> 1240  function console_menu\n 1241 -> 1250  subroutine html_permalink Calls proc~~terminate~~CallsGraph proc~terminate terminate proc~i18n i18n proc~terminate->proc~i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~terminate~~CalledByGraph proc~terminate terminate proc~update update proc~update->proc~terminate proc~html_home html_home proc~update->proc~html_home proc~html_year_archive html_year_archive proc~update->proc~html_year_archive proc~html_page html_page proc~update->proc~html_page proc~init_conf init_conf proc~update->proc~init_conf proc~init_data init_data proc~update->proc~init_data proc~html_permalink html_permalink proc~update->proc~html_permalink proc~html_month_archive html_month_archive proc~update->proc~html_month_archive proc~html_home->proc~terminate proc~html_year_archive->proc~terminate proc~html_page->proc~terminate proc~init_conf->proc~terminate proc~init_data->proc~terminate proc~html_permalink->proc~terminate proc~html_month_archive->proc~terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: move_cursor_left = '[20D' Source Code subroutine terminate ( error_code , cmd_msg , inf_msg , sys_msg ) !! Double role: error function and normal terminaison of job. In case of malfunction, !! an error code is provided. This error code gives location of the failure in source !! code. ! use , intrinsic :: iso_fortran_env , only : error_unit ! integer , intent ( in ) :: error_code character ( len =* ), intent ( in ), optional :: cmd_msg character ( len =* ), intent ( in ), optional :: inf_msg character ( len =* ), intent ( in ), optional :: sys_msg character ( len =* ), parameter :: move_cursor_left = '[20D' ! if ( allocated ( archive )) deallocate ( archive ) if ( allocated ( blog_title )) deallocate ( blog_title ) if ( allocated ( charset )) deallocate ( charset ) if ( allocated ( css_file )) deallocate ( css_file ) if ( allocated ( css_print_file )) deallocate ( css_print_file ) if ( allocated ( data_post )) deallocate ( data_post ) if ( allocated ( description )) deallocate ( description ) if ( allocated ( editor )) deallocate ( editor ) if ( allocated ( footer )) deallocate ( footer ) if ( allocated ( footer_1 )) deallocate ( footer_1 ) if ( allocated ( header_1 )) deallocate ( header_1 ) if ( allocated ( header_2 )) deallocate ( header_2 ) if ( allocated ( home )) deallocate ( home ) if ( allocated ( language )) deallocate ( language ) if ( allocated ( menu_html )) deallocate ( menu_html ) if ( allocated ( path )) deallocate ( path ) if ( allocated ( permalink )) deallocate ( permalink ) if ( allocated ( printer_friendly )) deallocate ( printer_friendly ) if ( allocated ( stats )) deallocate ( stats ) ! !! 1000 -> 1010  subroutine add_post !! 1011 -> 1020  subroutine config !! 1021 -> 1030  subroutine create_blog !! 1031 -> 1040  subroutine delete_css !! 1041 -> 1050  subroutine delete_page !! 1051 -> 1060  subroutine delete_post !! 1061 -> 1070  subroutine edit_css !! 1071 -> 1080  subroutine edit_page !! 1081 -> 1090  subroutine edit_post !! 1091 -> 1100  program main !! 1111 -> 1120  subroutine init_conf !! 1121 -> 1130  subroutine init_data !! 1131 -> 1140  subroutine console !! 1141 -> 1150  subroutine menu_post !! 1151 -> 1160  subroutine list_css !! 1161 -> 1170  subroutine list_pages !! 1171 -> 1180  subroutine html_home !! 1181 -> 1190  subroutine html_month_archive !! 1191 -> 1200  subroutine html_permalink !! 1201 -> 1210  subroutine html_year_archive !! 1211 -> 1220  subroutine update !! 1221 -> 1230  subroutine html_page !! 1231 -> 1240  function console_menu !! 1241 -> 1250  subroutine html_permalink ! if ( error_code /= 0 ) then if ( len ( trim ( sys_msg )) > 0 ) write ( unit = error_unit , fmt = '(3a)' ) i18n ( system_said ), \" \" , trim ( sys_msg ) if ( len ( trim ( cmd_msg )) > 0 ) write ( unit = error_unit , fmt = '(3a)' ) i18n ( shell_said ), \" \" , trim ( cmd_msg ) if ( present ( inf_msg )) write ( unit = error_unit , fmt = '(a)' ) trim ( inf_msg ) write ( unit = error_unit , fmt = '(t12,g0,a)' , advance = 'no' ) error_code , char ( 27 ) // move_cursor_left error stop else if ( present ( inf_msg )) print '(a)' , trim ( inf_msg ) stop end if error stop 'Internal error in subroutine Terminate' end subroutine terminate","tags":"","loc":"proc/terminate.html","title":"terminate – fBlog"},{"text":"public subroutine add_post(recorded) Arguments Type Intent Optional Attributes Name logical, intent(out) :: recorded Description Display editor to edit a new post entry. Calls proc~~add_post~~CallsGraph proc~add_post add_post init_conf init_conf proc~add_post->init_conf terminate terminate proc~add_post->terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: put_title_and_text_here = 'The title here'//new_line('a')//' The text from here. ' character(len=10), public :: t character(len=19), public :: f_post character(len=256), public :: command_msg = \"\" character(len=256), public :: system_msg = \"\" character(len=8), public :: d integer, public :: command_status = 0 integer, public :: exit_status = 0 integer, public :: ios integer, public :: lu_post integer, public :: post_size_after integer, public :: post_size_before Source Code subroutine add_post ( recorded ) !! Display editor to edit a new post entry. logical , intent ( out ) :: recorded integer :: command_status = 0 , exit_status = 0 , ios , lu_post , post_size_after , post_size_before character ( len = 8 ) :: d character ( len = 10 ) :: t character ( len = 19 ) :: f_post character ( len = 256 ) :: command_msg = \"\" , system_msg = \"\" character ( len =* ), parameter :: put_title_and_text_here = 'The title here' // new_line ( 'a' ) // '<p> The text from here. </p>' ! recorded = . true . ! Initialisation needed. call init_conf () call date_and_time ( date = d , time = t ) f_post = d // t ( 1 : 6 ) // '.blog' open ( newunit = lu_post , file = path // data_dir // f_post , status = 'new' , action = 'write' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1001 , sys_msg = system_msg ) write ( unit = lu_post , fmt = '(a)' ) put_title_and_text_here close ( unit = lu_post ) inquire ( file = path // data_dir // f_post , size = post_size_before ) call execute_command_line ( command = editor // ' ' // path // data_dir // f_post , exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1002 , cmd_msg = command_msg ) ! Check if the post has been recorded or not. If not, the post is removed. This verification is done by comparing the length ! of the file before and after. inquire ( file = path // data_dir // f_post , size = post_size_after ) if ( post_size_before == post_size_after ) then recorded = . false . call execute_command_line ( command = 'rm ' // path // data_dir // f_post , exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) end if if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1003 , cmd_msg = command_msg ) end subroutine add_post","tags":"","loc":"proc/add_post.html","title":"add_post – fBlog"},{"text":"public subroutine config(recorded) Arguments Type Intent Optional Attributes Name logical, intent(out) :: recorded Description Display the editor for modification of the configuration file. Calls proc~~config~~CallsGraph proc~config config init_conf init_conf proc~config->init_conf terminate terminate proc~config->terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: command_msg = \"\" integer, public :: command_status = 0 integer, public :: exit_status = 0 integer, public :: file_size_after integer, public :: file_size_before Source Code subroutine config ( recorded ) !! Display the editor for modification of the configuration file. logical , intent ( out ) :: recorded integer :: command_status = 0 , exit_status = 0 , file_size_after , file_size_before character ( len = 256 ) :: command_msg = \"\" ! recorded = . true . ! Initialisation required. call init_conf () inquire ( file = path // config_file , size = file_size_before ) call execute_command_line ( command = editor // \" \" // path // config_file , exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1011 , cmd_msg = command_msg ) call init_conf () ! Check if the size of the file has changed. inquire ( file = path // config_file , size = file_size_after ) if ( file_size_before == file_size_after ) recorded = . false . end subroutine config","tags":"","loc":"proc/config.html","title":"config – fBlog"},{"text":"public subroutine create_blog() Arguments None Description Create directories, files and install a new blog. Calls proc~~create_blog~~CallsGraph proc~create_blog create_blog update update proc~create_blog->update terminate terminate proc~create_blog->terminate i18n i18n proc~create_blog->i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=1), public :: char_i character(len=10), public :: t character(len=19), public :: file_name_entry = \"\" character(len=256), public :: command_msg = \"\" character(len=256), public :: system_msg = \"\" character(len=8), public :: d integer, public :: command_status = 0 integer, public :: exit_status = 0 integer, public :: i integer, public :: ios integer, public :: lu_config integer, public :: lu_page integer, public :: lu_post integer, public :: lu_style integer, public :: lu_style_print logical, public :: file_exist Source Code subroutine create_blog () !! Create directories, files and install a new blog. ! logical :: file_exist integer :: command_status = 0 , exit_status = 0 , i , ios , lu_config , lu_page , lu_post , lu_style , lu_style_print character ( len = 1 ) :: char_i character ( len = 8 ) :: d character ( len = 10 ) :: t character ( len = 19 ) :: file_name_entry = \"\" character ( len = 256 ) :: command_msg = \"\" , system_msg = \"\" ! config_txt = config_txt_1 // \"CSS=fBlog-\" // version // \".css\" // new_line ( 'a' ) // \"\" // new_line ( 'a' ) // \"CSS_PRINT& &=fBlog_print-\" // version // \".css\" // new_line ( 'a' ) // \"\" // new_line ( 'a' ) // config_txt_2 inquire ( file = path // fblog_dir // '.' , exist = file_exist ) if ( file_exist ) call terminate ( error_code = 1021 , inf_msg = i18n ( there_is_already_a_blog )) print '(a)' , i18n ( the_folowing_files_and_directories_will_be_created ), path // fblog_dir , path // config_file , path // & & data_dir , path // export_html_dir , path // styles_dir , path // styles_dir // \"fBlog-\" // version // \".css\" , path // & & styles_dir // \"fBlog_print-\" // version // \".css\" , path // pages_dir , path // pages_dir // \"page1 to page3.html\" ! Create main directory. call execute_command_line ( command = \"mkdir \" // path // fblog_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1022 , cmd_msg = command_msg ) ! Create subdirectory for data. call execute_command_line ( command = \"mkdir \" // path // data_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1023 , cmd_msg = command_msg ) ! Create subdirectory for output. call execute_command_line ( command = \"mkdir \" // path // export_html_dir , exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1024 , cmd_msg = command_msg ) ! Create subdirectory for CSSs. call execute_command_line ( command = \"mkdir \" // path // styles_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1025 , cmd_msg = command_msg ) ! Create subdirectory for static pages. call execute_command_line ( command = \"mkdir \" // path // pages_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1026 , cmd_msg = command_msg ) ! Begin config file generation. open ( newunit = lu_config , file = path // config_file , status = 'new' , action = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1027 , sys_msg = system_msg ) if ( ios == 0 ) write ( unit = lu_config , fmt = '(a)' ) config_txt ! End of config file generation. close ( unit = lu_config ) ! Begin style sheets generation. open ( newunit = lu_style , file = path // styles_dir // \"fBlog-\" // version // \".css\" , status = 'new' , action = 'write' , iostat & & = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1028 , sys_msg = system_msg ) if ( ios == 0 ) write ( unit = lu_style , fmt = '(a)' ) css_standard ! End style sheet generation. close ( unit = lu_style ) ! Begin style sheets generation. open ( newunit = lu_style_print , file = path // styles_dir // \"fBlog_print-\" // version // \".css\" , status = 'new' , action = & & 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1029 , sys_msg = system_msg ) if ( ios == 0 ) write ( unit = lu_style_print , fmt = '(a)' ) css_standard_print ! End style sheet generation. close ( unit = lu_style_print ) create_3_pages : do i = 1 , 3 ! Create demo static pages. write ( unit = char_i , fmt = '(i1)' ) i open ( newunit = lu_page , file = path // pages_dir // \"page\" // char_i // \".html\" , status = 'new' , action = 'write' , iostat = & & ios ) if ( ios /= 0 ) cycle write ( unit = lu_page , fmt = '(a)' ) \"<h2>Page #\" // char_i // \"</h2>\" // new_line ( 'a' ) // \"<h3>\" // empty_page // \"</h3>\" close ( unit = lu_page ) end do create_3_pages ! Create 1 entry. call date_and_time ( date = d , time = t ) file_name_entry = d // t ( 1 : 6 ) // '.blog' open ( newunit = lu_post , file = path // data_dir // file_name_entry , action = 'write' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1030 , sys_msg = system_msg ) write ( unit = lu_post , fmt = '(a)' ) lorem_ipsum close ( unit = lu_post ) if ( allocated ( config_txt )) deallocate ( config_txt ) call update () end subroutine create_blog","tags":"","loc":"proc/create_blog.html","title":"create_blog – fBlog"},{"text":"public subroutine delete_css(css2delete) Arguments Type Intent Optional Attributes Name character(len=512), intent(in) :: css2delete Description Delete a given cascading style sheet. Calls proc~~delete_css~~CallsGraph proc~delete_css delete_css terminate terminate proc~delete_css->terminate i18n i18n proc~delete_css->i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: command_msg = \"\" integer, public :: command_status = 0 integer, public :: exit_status = 0 logical, public :: file_exist Source Code subroutine delete_css ( css2delete ) !! Delete a given cascading style sheet. character ( len = 512 ), intent ( in ) :: css2delete logical :: file_exist integer :: command_status = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! inquire ( file = path // styles_dir // trim ( css2delete ), exist = file_exist ) if (. not . file_exist ) call terminate ( error_code = 1031 , inf_msg = i18n ( this_file_doesnt_exist )) call execute_command_line ( command = \"rm \" // path // styles_dir // trim ( css2delete ), exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1032 , cmd_msg = command_msg ) end subroutine delete_css","tags":"","loc":"proc/delete_css.html","title":"delete_css – fBlog"},{"text":"public subroutine delete_page(page2delete) Arguments Type Intent Optional Attributes Name character(len=512), intent(in) :: page2delete Description Delete a given static page. Calls proc~~delete_page~~CallsGraph proc~delete_page delete_page terminate terminate proc~delete_page->terminate i18n i18n proc~delete_page->i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: command_msg = \"\" integer, public :: command_status = 0 integer, public :: exit_status = 0 logical, public :: file_exist Source Code subroutine delete_page ( page2delete ) !! Delete a given static page. character ( len = 512 ), intent ( in ) :: page2delete logical :: file_exist integer :: command_status = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! inquire ( file = path // pages_dir // trim ( page2delete ), exist = file_exist ) if (. not . file_exist ) call terminate ( error_code = 1041 , inf_msg = i18n ( this_file_doesnt_exist )) call execute_command_line ( command = \"rm \" // path // pages_dir // trim ( page2delete ), exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1042 , cmd_msg = command_msg ) end subroutine delete_page","tags":"","loc":"proc/delete_page.html","title":"delete_page – fBlog"},{"text":"public subroutine delete_post(rank) Arguments Type Intent Optional Attributes Name integer, intent(in) :: rank Description Delete a given post entry. Calls proc~~delete_post~~CallsGraph proc~delete_post delete_post data_post data_post proc~delete_post->data_post init_data init_data proc~delete_post->init_data i18n i18n proc~delete_post->i18n terminate terminate proc~delete_post->terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: system_msg character(len=512), public :: del_file integer, public :: ios integer, public :: lu_post Source Code subroutine delete_post ( rank ) !! Delete a given post entry. integer , intent ( in ) :: rank integer :: ios , lu_post character ( len = 256 ) :: system_msg character ( len = 512 ) :: del_file ! call init_data if ( rank > total_entries . or . rank <= 0 ) call terminate ( error_code = 1051 , inf_msg = i18n ( this_number_is_wrong )) del_file = data_post ( rank , 6 )% date // '.blog' open ( newunit = lu_post , file = path // data_dir // '/' // del_file ( 1 : 19 ), status = 'old' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1052 , sys_msg = system_msg ) close ( unit = lu_post , status = 'delete' ) del_file = data_post ( rank , 7 )% post_title end subroutine delete_post","tags":"","loc":"proc/delete_post.html","title":"delete_post – fBlog"},{"text":"public subroutine edit_css(css2edit, recorded) Arguments Type Intent Optional Attributes Name character(len=512), intent(in) :: css2edit logical, intent(out) :: recorded Description Display the editor to create or modify a cascading style sheeet. Calls proc~~edit_css~~CallsGraph proc~edit_css edit_css terminate terminate proc~edit_css->terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: command_msg = \"\" integer, public :: command_status = 0 integer, public :: exit_status = 0 integer, public :: file_size_before integer, public :: file_size_after Source Code subroutine edit_css ( css2edit , recorded ) !! Display the editor to create or modify a cascading style sheeet. character ( len = 512 ), intent ( in ) :: css2edit logical , intent ( out ) :: recorded integer :: command_status = 0 , exit_status = 0 , file_size_before , file_size_after character ( len = 256 ) :: command_msg = \"\" ! recorded = . true . ! Initialisation required. inquire ( file = path // styles_dir // trim ( css2edit ), size = file_size_before ) call execute_command_line ( command = editor // ' ' // path // styles_dir // trim ( css2edit ), exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1061 , cmd_msg = command_msg ) ! Check if size of the file has changed. If not it is supposed that file wasn't modified. (Not always true!) inquire ( file = path // styles_dir // trim ( css2edit ), size = file_size_after ) if ( file_size_before == file_size_after ) recorded = . false . end subroutine edit_css","tags":"","loc":"proc/edit_css.html","title":"edit_css – fBlog"},{"text":"public subroutine edit_page(page2edit, recorded) Arguments Type Intent Optional Attributes Name character(len=512), intent(in) :: page2edit logical, intent(out) :: recorded Description Display the editor to create or modify a static page. Calls proc~~edit_page~~CallsGraph proc~edit_page edit_page terminate terminate proc~edit_page->terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: command_msg = \"\" integer, public :: command_status = 0 integer, public :: exit_status = 0 integer, public :: file_size_after integer, public :: file_size_before logical, public :: file_exist Source Code subroutine edit_page ( page2edit , recorded ) !! Display the editor to create or modify a static page. character ( len = 512 ), intent ( in ) :: page2edit logical , intent ( out ) :: recorded logical :: file_exist integer :: command_status = 0 , exit_status = 0 , file_size_after , file_size_before character ( len = 256 ) :: command_msg = \"\" ! recorded = . true . ! Initialisation required. ! Check if file exist already and what size is it. inquire ( file = path // pages_dir // trim ( page2edit ), exist = file_exist ) if ( file_exist ) then inquire ( file = path // pages_dir // trim ( page2edit ), size = file_size_before ) else file_size_before = 0 end if call execute_command_line ( command = editor // ' ' // path // pages_dir // trim ( page2edit ), exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1071 , cmd_msg = command_msg ) ! Check if size of the file has changed. If not, it is supposed that file wasn't modified. (Not always true!) inquire ( file = path // pages_dir // trim ( page2edit ), size = file_size_after ) if ( file_size_before == file_size_after ) recorded = . false . end subroutine edit_page","tags":"","loc":"proc/edit_page.html","title":"edit_page – fBlog"},{"text":"public subroutine edit_post(rank, recorded) Arguments Type Intent Optional Attributes Name integer, intent(in) :: rank logical, intent(out) :: recorded Description Display the editor to edit a post entry that already exist. Calls proc~~edit_post~~CallsGraph proc~edit_post edit_post init_conf init_conf proc~edit_post->init_conf data_post data_post proc~edit_post->data_post init_data init_data proc~edit_post->init_data i18n i18n proc~edit_post->i18n terminate terminate proc~edit_post->terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=19), public :: edit_file character(len=256), public :: command_msg = \"\" integer, public :: command_status = 0 integer, public :: exit_status = 0 integer, public :: file_size_after integer, public :: file_size_before Source Code subroutine edit_post ( rank , recorded ) !! Display the editor to edit a post entry that already exist. integer , intent ( in ) :: rank logical , intent ( out ) :: recorded integer :: command_status = 0 , exit_status = 0 , file_size_after , file_size_before character ( len = 19 ) :: edit_file character ( len = 256 ) :: command_msg = \"\" ! recorded = . true . ! Initialisation required. call init_conf () call init_data () if ( rank > total_entries . or . rank <= 0 ) call terminate ( error_code = 1081 , inf_msg = i18n ( this_number_is_wrong )) edit_file = data_post ( rank , 6 )% date // '.blog' inquire ( file = path // data_dir // trim ( edit_file ( 1 : 19 )), size = file_size_before ) call execute_command_line ( command = editor // ' ' // path // data_dir // trim (( edit_file ( 1 : 19 ))), exitstat = exit_status , cmdstat & & = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1082 , cmd_msg = command_msg ) ! Check if size of the file has changed. If not, it is supposed that file wasn't modified. (Not always true!) inquire ( file = path // data_dir // trim ( edit_file ( 1 : 19 )), size = file_size_after ) if ( file_size_before == file_size_after ) recorded = . false . end subroutine edit_post","tags":"","loc":"proc/edit_post.html","title":"edit_post – fBlog"},{"text":"public subroutine list_css() Arguments None Description Display the list of all cascading style sheets avalaible. Calls proc~~list_css~~CallsGraph proc~list_css list_css terminate terminate proc~list_css->terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: command_msg = \"\" integer, public :: command_status = 0 integer, public :: exit_status = 0 Source Code subroutine list_css () !! Display the list of all cascading style sheets avalaible. integer :: command_status = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! call execute_command_line ( command = \"ls -1 \" // path // styles_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1151 , cmd_msg = command_msg ) end subroutine list_css","tags":"","loc":"proc/list_css.html","title":"list_css – fBlog"},{"text":"public subroutine list_pages() Arguments None Description Display the list of all static pages. Calls proc~~list_pages~~CallsGraph proc~list_pages list_pages terminate terminate proc~list_pages->terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=256), public :: command_msg = \"\" integer, public :: command_status = 0 integer, public :: exit_status = 0 Source Code subroutine list_pages () !! Display the list of all static pages. integer :: command_status = 0 , exit_status = 0 character ( len = 256 ) :: command_msg = \"\" ! call execute_command_line ( command = \"ls -1 \" // path // pages_dir , exitstat = exit_status , cmdstat = command_status , cmdmsg = & & command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1161 , cmd_msg = command_msg ) end subroutine list_pages","tags":"","loc":"proc/list_pages.html","title":"list_pages – fBlog"},{"text":"public subroutine list_posts(limit) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: limit Description Display a list of post entries (last ones or all of them). Calls proc~~list_posts~~CallsGraph proc~list_posts list_posts data_post data_post proc~list_posts->data_post init_data init_data proc~list_posts->init_data i18n i18n proc~list_posts->i18n Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer, public :: i logical, public :: ok_limit Source Code subroutine list_posts ( limit ) !! Display a list of post entries (last ones or all of them). integer , intent ( in ), optional :: limit logical :: ok_limit integer :: i ! ok_limit = present ( limit ) call init_data () if ( ok_limit ) then if ( limit < total_entries ) total_entries = limit end if if ( total_entries == 0 ) print '(a)' , i18n ( no_post ) do i = total_entries , 1 , - 1 print '(a,g0,a)' , '#' , i , ' [' // data_post ( i , 6 )% date ( 1 : 4 ) // '-' // data_post ( i , 6 )% date ( 5 : 6 ) // '-' // data_post ( i , 6 )& &% date ( 7 : 8 ) // ' (' // data_post ( i , 6 )% date ( 9 : 10 ) // ':' // data_post ( i , 6 )% date ( 11 : 12 ) // ')] ' // trim ( data_post ( i , 7 )& &% post_title ) end do end subroutine list_posts","tags":"","loc":"proc/list_posts.html","title":"list_posts – fBlog"},{"text":"private function console_menu(items) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: items Return Value character(len=1) Description Auxilary routine for displaying the menus in console mode. Calls proc~~console_menu~~CallsGraph proc~console_menu console_menu terminate terminate proc~console_menu->terminate Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~console_menu~~CalledByGraph proc~console_menu console_menu proc~console console proc~console->proc~console_menu proc~menu_main menu_main proc~console->proc~menu_main proc~menu_page menu_page proc~menu_page->proc~console_menu proc~menu_page->proc~menu_page proc~menu_page->proc~menu_main proc~menu_css menu_css proc~menu_css->proc~console_menu proc~menu_css->proc~menu_css proc~menu_css->proc~menu_main proc~menu_post menu_post proc~menu_post->proc~console_menu proc~menu_post->proc~menu_post proc~menu_post->proc~menu_main proc~menu_main->proc~console_menu proc~menu_main->proc~menu_page proc~menu_main->proc~menu_css proc~menu_main->proc~menu_post proc~menu_main->proc~menu_main Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=1), public :: keystroke character(len=80), public, dimension(10) :: item character(len=len(items)), public :: read_items integer, public :: command_status = 0 integer, public :: exit_status = 0 integer, public :: i integer, public :: ios integer, public :: j integer, public :: k integer, public :: pos Source Code function console_menu ( items ) !! Auxilary routine for displaying the menus in console mode. character ( len =* ), intent ( in ) :: items character ( len = 1 ) console_menu integer :: command_status = 0 , exit_status = 0 , i , ios , j , k , pos character ( len = len ( items )) :: read_items character ( len = 80 ), dimension ( 10 ) :: item character ( len = 1 ) :: keystroke ! read_items = items j = 1 do i = 1 , 10 pos = index ( string = read_items (:), substring = \",\" ) if (( pos == 0 ) . and . ( len_trim ( read_items ) == 0 )) exit if (( pos == 0 ) . and . ( len ( read_items ) > 0 )) then item ( i ) = read_items exit end if item ( i ) = read_items (: pos - 1 ) read_items = read_items ( pos + 1 :) j = j + 1 end do write ( unit = * , fmt = '(a)' , advance = 'no' ) set_bold do k = 1 , j print '(2x,i1,a)' , k - 1 , \"  \" // trim ( item ( k )) end do print '(a)' , ga call execute_command_line ( command = 'stty raw' , exitstat = exit_status , cmdstat = command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1231 , cmd_msg = command_msg ) write ( unit = * , fmt = '(a)' , advance = 'no' ) set_blue read ( unit = * , fmt = '(a)' , advance = 'no' , iostat = ios ) keystroke write ( unit = * , fmt = '(a)' , advance = 'no' ) reset call execute_command_line ( command = 'stty ' // trim ( terminal_settings ), exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1232 , cmd_msg = command_msg ) print * console_menu = keystroke end function console_menu","tags":"","loc":"proc/console_menu.html","title":"console_menu – fBlog"},{"text":"public subroutine console() Uses: iso_fortran_env Arguments None Description Head routine for console mode. Calls proc~~console~~CallsGraph proc~console console i18n i18n proc~console->i18n init_conf init_conf proc~console->init_conf create_blog create_blog proc~console->create_blog proc~menu_main menu_main proc~console->proc~menu_main terminate terminate proc~console->terminate proc~console_menu console_menu proc~console->proc~console_menu proc~menu_main->i18n proc~menu_main->proc~menu_main proc~menu_main->terminate proc~menu_main->proc~console_menu init_data init_data proc~menu_main->init_data config config proc~menu_main->config update update proc~menu_main->update proc~menu_page menu_page proc~menu_main->proc~menu_page proc~menu_css menu_css proc~menu_main->proc~menu_css proc~menu_post menu_post proc~menu_main->proc~menu_post proc~console_menu->terminate proc~menu_page->i18n proc~menu_page->proc~menu_main proc~menu_page->terminate proc~menu_page->proc~console_menu proc~menu_page->proc~menu_page list_pages list_pages proc~menu_page->list_pages delete_page delete_page proc~menu_page->delete_page edit_page edit_page proc~menu_page->edit_page proc~menu_css->i18n proc~menu_css->proc~menu_main proc~menu_css->terminate proc~menu_css->proc~console_menu proc~menu_css->proc~menu_css delete_css delete_css proc~menu_css->delete_css list_css list_css proc~menu_css->list_css edit_css edit_css proc~menu_css->edit_css proc~menu_post->i18n proc~menu_post->proc~menu_main proc~menu_post->terminate proc~menu_post->proc~console_menu proc~menu_post->proc~menu_post edit_post edit_post proc~menu_post->edit_post list_posts list_posts proc~menu_post->list_posts add_post add_post proc~menu_post->add_post delete_post delete_post proc~menu_post->delete_post Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine console () !! Head routine for console mode. ! use , intrinsic :: iso_fortran_env , only : compiler_version , compiler_options ! print '(a,2/,a,2/)' , show_version , compiler_version () // ' (' // compiler_options () // ')' inquire ( file = path // fblog_dir // '.' , exist = file_exist ) if (. not . file_exist ) then inquire ( file = path // FBLOG_DIR // '.' , exist = directory_exist ) if (. not . directory_exist ) then call execute_command_line ( command = 'stty -g > ' // path // 'stty_g' , exitstat = exit_status , cmdstat = command_status ,& & cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1131 , cmd_msg = command_msg ) open ( newunit = lu_stty_g , file = path // 'stty_g' , status = 'old' , action = 'read' , iostat = ios , iomsg = system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1132 , sys_msg = system_msg ) read ( unit = lu_stty_g , fmt = '(a)' ) terminal_settings close ( unit = lu_stty_g , status = 'delete' ) else if ( directory_exist ) then call execute_command_line ( command = 'stty -g > ' // path // fblog_dir // 'stty_g' , exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1133 , cmd_msg = command_msg ) open ( newunit = lu_stty_g , file = path // fblog_dir // 'stty_g' , status = 'old' , action = 'read' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1134 , sys_msg = system_msg ) read ( unit = lu_stty_g , fmt = '(a)' ) terminal_settings close ( unit = lu_stty_g , status = 'delete' ) end if choice = console_menu ( i18n ( quit ) // ',' // i18n ( create_new_blog )) select case ( choice ) case ( 'q' , 'Q' , '0' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '1' ) call create_blog () print '(a)' , ok case default call terminate ( error_code = 1135 , inf_msg = i18n ( wrong_entry )) end select end if call execute_command_line ( command = 'stty -g > ' // trim ( path ) // fblog_dir // 'stty_g' , exitstat = exit_status , cmdstat = & & command_status , cmdmsg = command_msg ) if ( exit_status /= 0 . or . command_status /= 0 ) call terminate ( error_code = 1136 , cmd_msg = command_msg ) open ( newunit = lu_stty_g , file = path // fblog_dir // 'stty_g' , status = 'old' , action = 'read' , iostat = ios , iomsg = & & system_msg ) if ( ios /= 0 ) call terminate ( error_code = 1137 , sys_msg = system_msg ) read ( unit = lu_stty_g , fmt = '(a)' ) terminal_settings close ( unit = lu_stty_g , status = 'delete' ) call init_conf () call menu_main () error stop 'Internal error in subroutine console()' end subroutine console","tags":"","loc":"proc/console.html","title":"console – fBlog"},{"text":"private recursive subroutine menu_main() Uses: iso_fortran_env Arguments None Description Provide top menu in console mode. Calls proc~~menu_main~~CallsGraph proc~menu_main menu_main proc~menu_main->proc~menu_main init_data init_data proc~menu_main->init_data config config proc~menu_main->config update update proc~menu_main->update proc~menu_page menu_page proc~menu_main->proc~menu_page proc~menu_css menu_css proc~menu_main->proc~menu_css terminate terminate proc~menu_main->terminate proc~console_menu console_menu proc~menu_main->proc~console_menu proc~menu_post menu_post proc~menu_main->proc~menu_post i18n i18n proc~menu_main->i18n proc~menu_page->proc~menu_main proc~menu_page->proc~menu_page proc~menu_page->terminate proc~menu_page->proc~console_menu proc~menu_page->i18n list_pages list_pages proc~menu_page->list_pages delete_page delete_page proc~menu_page->delete_page edit_page edit_page proc~menu_page->edit_page proc~menu_css->proc~menu_main proc~menu_css->proc~menu_css proc~menu_css->terminate proc~menu_css->proc~console_menu proc~menu_css->i18n delete_css delete_css proc~menu_css->delete_css list_css list_css proc~menu_css->list_css edit_css edit_css proc~menu_css->edit_css proc~console_menu->terminate proc~menu_post->proc~menu_main proc~menu_post->terminate proc~menu_post->proc~console_menu proc~menu_post->proc~menu_post proc~menu_post->i18n edit_post edit_post proc~menu_post->edit_post list_posts list_posts proc~menu_post->list_posts add_post add_post proc~menu_post->add_post delete_post delete_post proc~menu_post->delete_post Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~menu_main~~CalledByGraph proc~menu_main menu_main proc~menu_main->proc~menu_main proc~menu_css menu_css proc~menu_main->proc~menu_css proc~menu_post menu_post proc~menu_main->proc~menu_post proc~menu_page menu_page proc~menu_main->proc~menu_page proc~menu_css->proc~menu_main proc~menu_css->proc~menu_css proc~menu_post->proc~menu_main proc~menu_post->proc~menu_post proc~console console proc~console->proc~menu_main proc~menu_page->proc~menu_main proc~menu_page->proc~menu_page Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=1), public :: choice logical, public :: config_has_been_recorded Source Code recursive subroutine menu_main () !! Provide top menu in console mode. use , intrinsic :: iso_fortran_env , only : compiler_version , compiler_options logical :: config_has_been_recorded character ( len = 1 ) :: choice ! choice = console_menu ( & i18n ( quit ) // ',' // & i18n ( update_all ) // ',' // & i18n ( posts ) // ',' // & i18n ( pages ) // ',' // & i18n ( styles ) // ',' // & i18n ( edit_settings ) & ) select case ( choice ) case ( 'q' , 'Q' , '0' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '1' ) call update () print '(a)' , ok call menu_main () case ( '2' ) call init_data () call menu_post () case ( '3' ) call menu_page () case ( '4' ) call menu_css () case ( '5' ) call config ( recorded = config_has_been_recorded ) if ( config_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_main () case default print '(a)' , false_entry // i18n ( wrong_entry ) // reset call menu_main () end select end subroutine menu_main","tags":"","loc":"proc/menu_main.html","title":"menu_main – fBlog"},{"text":"private recursive subroutine menu_page() Arguments None Description Provide sub menu for static pages in console mode. Calls proc~~menu_page~~CallsGraph proc~menu_page menu_page proc~menu_page->proc~menu_page list_pages list_pages proc~menu_page->list_pages delete_page delete_page proc~menu_page->delete_page edit_page edit_page proc~menu_page->edit_page proc~menu_main menu_main proc~menu_page->proc~menu_main terminate terminate proc~menu_page->terminate proc~console_menu console_menu proc~menu_page->proc~console_menu i18n i18n proc~menu_page->i18n proc~menu_main->proc~menu_page proc~menu_main->proc~menu_main proc~menu_main->terminate proc~menu_main->proc~console_menu proc~menu_main->i18n init_data init_data proc~menu_main->init_data config config proc~menu_main->config update update proc~menu_main->update proc~menu_css menu_css proc~menu_main->proc~menu_css proc~menu_post menu_post proc~menu_main->proc~menu_post proc~console_menu->terminate proc~menu_css->proc~menu_main proc~menu_css->terminate proc~menu_css->proc~console_menu proc~menu_css->i18n proc~menu_css->proc~menu_css delete_css delete_css proc~menu_css->delete_css list_css list_css proc~menu_css->list_css edit_css edit_css proc~menu_css->edit_css proc~menu_post->proc~menu_main proc~menu_post->terminate proc~menu_post->proc~console_menu proc~menu_post->i18n proc~menu_post->proc~menu_post edit_post edit_post proc~menu_post->edit_post list_posts list_posts proc~menu_post->list_posts add_post add_post proc~menu_post->add_post delete_post delete_post proc~menu_post->delete_post Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~menu_page~~CalledByGraph proc~menu_page menu_page proc~menu_page->proc~menu_page proc~menu_main menu_main proc~menu_page->proc~menu_main proc~menu_main->proc~menu_page proc~menu_main->proc~menu_main proc~menu_css menu_css proc~menu_main->proc~menu_css proc~menu_post menu_post proc~menu_main->proc~menu_post proc~menu_css->proc~menu_main proc~menu_css->proc~menu_css proc~menu_post->proc~menu_main proc~menu_post->proc~menu_post proc~console console proc~console->proc~menu_main Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=1), public :: choice character(len=512), public :: page_2_delete character(len=512), public :: page_2_edit logical, public :: page_has_been_recorded Source Code recursive subroutine menu_page () !! Provide sub menu for static pages in console mode. character ( len = 1 ) :: choice character ( len = 512 ) :: page_2_delete , & page_2_edit logical :: page_has_been_recorded ! choice = console_menu ( & i18n ( up ) // ',' // & i18n ( show_full_list_pages ) // ',' // & i18n ( edit_a_page ) // ',' // & i18n ( delete_a_page ) & ) select case ( choice ) case ( 'q' , 'Q' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '0' ) call menu_main () case ( '1' ) call list_pages print '(a)' , ok call menu_page () case ( '2' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_filename_of_the_page_created ) // \" \" read ( unit = * , fmt = * ) page_2_edit print '(a,g0,a)' , set_blue , trim ( page_2_edit ), reset call edit_page ( page2edit = page_2_edit , recorded = page_has_been_recorded ) if ( page_has_been_recorded ) then print '(a)' , i18n ( edited_page ) // \" \" // trim ( page_2_edit ) // new_line ( 'a' ) // i18n ( now_you_could_edit_settings ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_page () case ( '3' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_filename_of_the_page_deleted ) // \" \" read ( unit = * , fmt = * ) page_2_delete print '(a,g0,a)' , set_blue , trim ( page_2_delete ), reset call delete_page ( page2delete = page_2_delete ) print '(a)' , i18n ( deleted_page ) // \" \" // trim ( page_2_delete ) // new_line ( 'a' ) // i18n ( now_you_could_edit_settings ), ok call menu_page () case default print '(a)' , false_entry // i18n ( wrong_entry ) // reset call menu_page () end select end subroutine menu_page","tags":"","loc":"proc/menu_page.html","title":"menu_page – fBlog"},{"text":"private recursive subroutine menu_post() Arguments None Description Provide sub menu for post entries in console mode. Calls proc~~menu_post~~CallsGraph proc~menu_post menu_post proc~menu_post->proc~menu_post i18n i18n proc~menu_post->i18n edit_post edit_post proc~menu_post->edit_post list_posts list_posts proc~menu_post->list_posts add_post add_post proc~menu_post->add_post proc~menu_main menu_main proc~menu_post->proc~menu_main terminate terminate proc~menu_post->terminate proc~console_menu console_menu proc~menu_post->proc~console_menu delete_post delete_post proc~menu_post->delete_post proc~menu_main->proc~menu_post proc~menu_main->i18n proc~menu_main->proc~menu_main proc~menu_main->terminate proc~menu_main->proc~console_menu init_data init_data proc~menu_main->init_data config config proc~menu_main->config update update proc~menu_main->update proc~menu_page menu_page proc~menu_main->proc~menu_page proc~menu_css menu_css proc~menu_main->proc~menu_css proc~console_menu->terminate proc~menu_page->i18n proc~menu_page->proc~menu_main proc~menu_page->terminate proc~menu_page->proc~console_menu proc~menu_page->proc~menu_page list_pages list_pages proc~menu_page->list_pages delete_page delete_page proc~menu_page->delete_page edit_page edit_page proc~menu_page->edit_page proc~menu_css->i18n proc~menu_css->proc~menu_main proc~menu_css->terminate proc~menu_css->proc~console_menu proc~menu_css->proc~menu_css delete_css delete_css proc~menu_css->delete_css list_css list_css proc~menu_css->list_css edit_css edit_css proc~menu_css->edit_css Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~menu_post~~CalledByGraph proc~menu_post menu_post proc~menu_post->proc~menu_post proc~menu_main menu_main proc~menu_post->proc~menu_main proc~menu_main->proc~menu_post proc~menu_main->proc~menu_main proc~menu_css menu_css proc~menu_main->proc~menu_css proc~menu_page menu_page proc~menu_main->proc~menu_page proc~menu_css->proc~menu_main proc~menu_css->proc~menu_css proc~console console proc~console->proc~menu_main proc~menu_page->proc~menu_main proc~menu_page->proc~menu_page Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=1), public :: choice integer, public :: int_keystroke integer, public :: ios integer, public :: rank_val logical, public :: post_has_been_recorded Source Code recursive subroutine menu_post () !! Provide sub menu for post entries in console mode. character ( len = 1 ) :: choice integer :: int_keystroke , ios , rank_val logical :: post_has_been_recorded ! if ( total_entries > 0 ) then choice = console_menu ( & i18n ( up ) // ',' // & i18n ( show_last_posts ) // ',' // & i18n ( new_post ) // ',' // & i18n ( modify_a_post ) // ',' // & i18n ( delete_a_post ) // ',' // & i18n ( show_full_list_posts ) & ) select case ( choice ) case ( 'q' , 'Q' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '0' ) call menu_main () case ( '1' ) call list_posts ( limit = post_amount ) print '(a)' , ok call menu_post () case ( '2' ) print '(a)' , ok call add_post ( recorded = post_has_been_recorded ) if ( post_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_main () case ( '3' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_rank_of_the_post_to_modify ) // \" \" read ( unit = * , fmt = * , iostat = ios ) int_keystroke if ( ios /= 0 ) call terminate ( error_code = 1141 , inf_msg = i18n ( wrong_entry )) rank_val = int_keystroke print '(a,g0,a)' , set_blue , rank_val , reset call edit_post ( rank = rank_val , recorded = post_has_been_recorded ) if ( post_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_main () case ( '4' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_rank_of_the_post_to_delete ) // \" \" read ( unit = * , fmt = * , iostat = ios ) int_keystroke if ( ios /= 0 ) call terminate ( error_code = 1142 , inf_msg = i18n ( wrong_entry )) rank_val = int_keystroke print '(a,g0,a)' , set_blue , rank_val , reset call delete_post ( rank = rank_val ) print '(a, g0, 2a)' , i18n ( deleted_file ) // \" \" , rank_val , new_line ( 'a' ), i18n ( now_you_should_update ) print '(a)' , ok call menu_main () case ( '5' ) call list_posts () print '(a)' , ok call menu_post () case default print '(a)' , false_entry // i18n ( wrong_entry ) // reset call menu_post () end select else choice = console_menu ( & i18n ( up ) // ',' // & i18n ( new_post ) & ) select case ( choice ) case ( 'q' , 'Q' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '0' ) call menu_main () case ( '1' ) call add_post ( recorded = post_has_been_recorded ) print '(a)' , ok if ( post_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_main () case default print '(a)' , false_entry call menu_post () end select end if end subroutine menu_post","tags":"","loc":"proc/menu_post.html","title":"menu_post – fBlog"},{"text":"private recursive subroutine menu_css() Arguments None Description Provide a sub menu for CSS in console mode. Calls proc~~menu_css~~CallsGraph proc~menu_css menu_css proc~menu_css->proc~menu_css i18n i18n proc~menu_css->i18n delete_css delete_css proc~menu_css->delete_css proc~menu_main menu_main proc~menu_css->proc~menu_main list_css list_css proc~menu_css->list_css edit_css edit_css proc~menu_css->edit_css proc~console_menu console_menu proc~menu_css->proc~console_menu terminate terminate proc~menu_css->terminate proc~menu_main->proc~menu_css proc~menu_main->i18n proc~menu_main->proc~menu_main proc~menu_main->proc~console_menu proc~menu_main->terminate init_data init_data proc~menu_main->init_data config config proc~menu_main->config update update proc~menu_main->update proc~menu_page menu_page proc~menu_main->proc~menu_page proc~menu_post menu_post proc~menu_main->proc~menu_post proc~console_menu->terminate proc~menu_page->i18n proc~menu_page->proc~menu_main proc~menu_page->proc~console_menu proc~menu_page->terminate proc~menu_page->proc~menu_page list_pages list_pages proc~menu_page->list_pages delete_page delete_page proc~menu_page->delete_page edit_page edit_page proc~menu_page->edit_page proc~menu_post->i18n proc~menu_post->proc~menu_main proc~menu_post->proc~console_menu proc~menu_post->terminate proc~menu_post->proc~menu_post edit_post edit_post proc~menu_post->edit_post list_posts list_posts proc~menu_post->list_posts add_post add_post proc~menu_post->add_post delete_post delete_post proc~menu_post->delete_post Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~menu_css~~CalledByGraph proc~menu_css menu_css proc~menu_css->proc~menu_css proc~menu_main menu_main proc~menu_css->proc~menu_main proc~menu_main->proc~menu_css proc~menu_main->proc~menu_main proc~menu_post menu_post proc~menu_main->proc~menu_post proc~menu_page menu_page proc~menu_main->proc~menu_page proc~menu_post->proc~menu_main proc~menu_post->proc~menu_post proc~console console proc~console->proc~menu_main proc~menu_page->proc~menu_main proc~menu_page->proc~menu_page Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=1), public :: choice character(len=512), public :: css_2_delete character(len=512), public :: css_2_edit logical, public :: css_has_been_recorded Source Code recursive subroutine menu_css () !! Provide a sub menu for CSS in console mode. logical :: css_has_been_recorded character ( len = 1 ) :: choice character ( len = 512 ) :: css_2_delete , css_2_edit ! choice = console_menu ( & i18n ( up ) // ',' // & i18n ( show_full_list_css ) // ',' // & i18n ( edit_a_css ) // ',' // & i18n ( delete_a_css ) & ) select case ( choice ) case ( 'q' , 'Q' ) print '(a)' , bye call terminate ( error_code = 0 ) case ( '0' ) call menu_main () case ( '1' ) call list_css () print '(a)' , ok call menu_css () case ( '2' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_filename_of_the_page_created ) // \" \" read ( unit = * , fmt = '(a)' ) css_2_edit print '(a,g0,a)' , set_blue , trim ( css_2_edit ), reset call edit_css ( css2edit = css_2_edit , recorded = css_has_been_recorded ) if ( css_has_been_recorded ) then print '(a)' , i18n ( now_you_should_update ), ok else print '(a)' , i18n ( not_modified ), ok end if call menu_css () case ( '3' ) write ( unit = * , fmt = '(a)' , advance = 'no' ) i18n ( enter_the_filename_of_the_css_deleted ) // \" \" read ( unit = * , fmt = * ) css_2_delete print '(a,g0,a)' , set_blue , trim ( css_2_delete ), reset call delete_css ( css2delete = css_2_delete ) print '(a)' , i18n ( is_deleted ) // \" \" // trim ( css_2_delete ), ok call menu_css () case default print '(a)' , false_entry // i18n ( wrong_entry ) // reset call menu_css () end select end subroutine menu_css","tags":"","loc":"proc/menu_css.html","title":"menu_css – fBlog"},{"text":"The core of fBlog. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: version = '9999-r412' character(len=*), private, parameter :: copyright = '2016' character(len=*), public, parameter :: config_file = 'fBlog/fblog.conf' character(len=*), public, parameter :: styles_dir = 'fBlog/styles/' character(len=*), public, parameter :: data_dir = 'fBlog/data/' character(len=*), public, parameter :: export_html_dir = 'fBlog/export_http/' character(len=*), public, parameter :: fblog_dir = \"fBlog/\" character(len=*), public, parameter :: pages_dir = 'fBlog/pages/' character(len=*), public, parameter :: empty_page = '[...]' character(len=*), private, parameter :: default_editor = 'vi' character(len=*), private, parameter :: nl = new_line('a') character(len=*), public, parameter :: show_version = 'fBlog '//version//nl//'Copyright (C) '//copyright//' Denis Bernard'//nl//nl//'License GPLv3+: GNU GPL version 3 or later '//' .'//nl//'This is free software: you are free to change and redistribute it.'//nl//'There is NO WARRANTY, to the extent permitted by law.'//nl//nl//'Written by Denis Bernard.' character(len=3), private, save :: direction = 'ltr' character(len=80), private, dimension(12) :: monthes = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"] character(len=:), private, allocatable :: archive character(len=:), private, allocatable :: blog_title character(len=:), private, allocatable :: charset character(len=:), private, allocatable :: css_file character(len=:), private, allocatable :: css_print_file character(len=:), private, allocatable :: description character(len=:), public, allocatable :: editor character(len=:), private, allocatable :: footer character(len=:), private, allocatable :: footer_1 character(len=:), private, allocatable :: header_1 character(len=:), private, allocatable :: header_2 character(len=:), private, allocatable :: home character(len=:), private, allocatable :: language character(len=:), private, allocatable :: menu_html character(len=:), public, allocatable :: path character(len=:), private, allocatable :: permalink character(len=:), private, allocatable :: printer_friendly character(len=:), private, allocatable :: str_i18n integer, public, parameter :: post_amount = 9 integer, private :: entries_per_page integer, public :: total_entries integer, private :: year1 integer, private :: year2 integer, private, allocatable :: stats (:,:) logical, private :: css logical, private :: css_print type( post_t ), public, allocatable :: data_post (:,:) Enumerations enum, bind(c) Enumerators enumerator :: bad_argument = 0 enumerator :: begin_update = 1 enumerator :: create_new_blog = 2 enumerator :: copy_css = 3 enumerator :: copy_css_print = 4 enumerator :: deleted = 5 enumerator :: delete_a_css = 6 enumerator :: delete_a_page = 7 enumerator :: delete_a_post = 8 enumerator :: deleted_file = 9 enumerator :: deleted_page = 10 enumerator :: deleted_you_could_update_the_config = 11 enumerator :: edit_a_page = 12 enumerator :: edit_a_css = 13 enumerator :: edited_page = 14 enumerator :: edit_settings = 15 enumerator :: end_clearing_subdirectory = 16 enumerator :: enter_the_filename_of_the_css_deleted = 17 enumerator :: enter_the_filename_of_the_page_created = 18 enumerator :: enter_the_filename_of_the_page_deleted = 19 enumerator :: enter_the_rank_of_the_post_to_delete = 20 enumerator :: enter_the_rank_of_the_post_to_modify = 21 enumerator :: error_css = 22 enumerator :: error_css_print = 23 enumerator :: files_generated_inside_the_subdirectory = 24 enumerator :: initialisation_reading_conf = 25 enumerator :: initialisation_reading_data = 26 enumerator :: is_a_wrong_argument = 27 enumerator :: is_deleted = 28 enumerator :: make_archive_pages = 29 enumerator :: make_clear_subdirectory = 30 enumerator :: make_home_page = 31 enumerator :: make_pages = 32 enumerator :: make_permalink_pages = 33 enumerator :: modify_a_post = 34 enumerator :: monthly_archive_pages_built = 35 enumerator :: new_post = 36 enumerator :: no_fblog_directory_at = 37 enumerator :: no_fblog_directory_here = 38 enumerator :: no_post = 39 enumerator :: not_modified = 40 enumerator :: now_you_could_edit_settings = 41 enumerator :: now_you_should_update = 42 enumerator :: pages = 43 enumerator :: pages_built = 44 enumerator :: permalink_pages_built = 45 enumerator :: posts = 46 enumerator :: quit = 47 enumerator :: show_last_posts = 48 enumerator :: show_full_list_css = 49 enumerator :: show_full_list_pages = 50 enumerator :: show_full_list_posts = 51 enumerator :: styles = 52 enumerator :: the_folowing_files_and_directories_will_be_created = 53 enumerator :: there_is_already_a_blog = 54 enumerator :: there_is_not_directory = 55 enumerator :: this_file_doesnt_exist = 56 enumerator :: this_number_is_wrong = 57 enumerator :: too_much_arguments = 58 enumerator :: up = 59 enumerator :: update_all = 60 enumerator :: update_done = 61 enumerator :: shell_said = 62 enumerator :: system_said = 63 enumerator :: warn_about_no_css = 64 enumerator :: warn_about_no_css_print = 65 enumerator :: wrong_entry = 66 enum, bind(c) Enumerators enumerator :: en = 0 enumerator :: fr = 1 Derived Types type, private :: post_t Components Type Visibility Attributes Name Initial character(len=14), public :: date = \"\" character(len=512), public :: post_title = \"\" integer, public :: year = 0 integer, public :: month = 0 integer, public :: day = 0 integer, public :: hour = 0 integer, public :: minute = 0 integer, public :: seconde = 0 Functions private function clock () Arguments None Return Value character(len=15) Description Print the computer clock time for update messages. public function i18n (msg) Arguments Type Intent Optional Attributes Name integer, intent(in) :: msg Return Value character(len=:),\n  allocatable Description Provide sentences in the language according the LANG environment variable. Subroutines private subroutine html_home (user_home) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: user_home Description Make HTML code for home page. private subroutine html_month_archive (n_pages) Arguments Type Intent Optional Attributes Name integer, intent(out) :: n_pages Description Make HTML code for monthly index pages. private subroutine html_page (n_pages) Arguments Type Intent Optional Attributes Name integer, intent(out) :: n_pages Description Make HTML code of extra Web pages private subroutine html_permalink () Arguments None Description Make HTML code for permalink pages. private subroutine html_year_archive () Arguments None Description Make HTML code of main index page. public subroutine init_conf () Arguments None Description Initialisation according the settings of the configuration file and environment.\n (This is the first step of two.) public subroutine init_data () Arguments None Description Collect titles and dates of entries. (This is the second step of two.) public subroutine update () Arguments None Description Build all pages of the blog. The most important procedure of the project!\n This procedure could be called from an other program by including in it module fblog_m. public subroutine terminate (error_code, cmd_msg, inf_msg, sys_msg) Arguments Type Intent Optional Attributes Name integer, intent(in) :: error_code character(len=*), intent(in), optional :: cmd_msg character(len=*), intent(in), optional :: inf_msg character(len=*), intent(in), optional :: sys_msg Description Double role: error function and normal terminaison of job. In case of malfunction,\n an error code is provided. This error code gives location of the failure in source\n code.","tags":"","loc":"module/fblog_m.html","title":"fblog_m – fBlog"},{"text":"Set of routines that are called either by command line interface\n or by console interface. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: config_txt_1 = include'config_txt_1.inc' character(len=*), public, parameter :: config_txt_2 = include'config_txt_2.inc' character(len=*), public, parameter :: help = include'help.inc' character(len=*), public, parameter :: css_standard_1 = include'css_standard_1.inc' character(len=*), public, parameter :: css_standard_2 = include'css_standard_2.inc' character(len=*), public, parameter :: css_standard_3 = include'css_standard_3.inc' character(len=*), public, parameter :: css_standard_print = include'css_standard_print.inc' character(len=*), public, parameter :: css_standard = css_standard_1//css_standard_2//css_standard_3 character(len=*), public, parameter :: lorem_ipsum = include'lorem_ipsum.inc' character(len=:), public, allocatable :: config_txt Subroutines public subroutine add_post (recorded) Arguments Type Intent Optional Attributes Name logical, intent(out) :: recorded Description Display editor to edit a new post entry. public subroutine config (recorded) Arguments Type Intent Optional Attributes Name logical, intent(out) :: recorded Description Display the editor for modification of the configuration file. public subroutine create_blog () Arguments None Description Create directories, files and install a new blog. public subroutine delete_css (css2delete) Arguments Type Intent Optional Attributes Name character(len=512), intent(in) :: css2delete Description Delete a given cascading style sheet. public subroutine delete_page (page2delete) Arguments Type Intent Optional Attributes Name character(len=512), intent(in) :: page2delete Description Delete a given static page. public subroutine delete_post (rank) Arguments Type Intent Optional Attributes Name integer, intent(in) :: rank Description Delete a given post entry. public subroutine edit_css (css2edit, recorded) Arguments Type Intent Optional Attributes Name character(len=512), intent(in) :: css2edit logical, intent(out) :: recorded Description Display the editor to create or modify a cascading style sheeet. public subroutine edit_page (page2edit, recorded) Arguments Type Intent Optional Attributes Name character(len=512), intent(in) :: page2edit logical, intent(out) :: recorded Description Display the editor to create or modify a static page. public subroutine edit_post (rank, recorded) Arguments Type Intent Optional Attributes Name integer, intent(in) :: rank logical, intent(out) :: recorded Description Display the editor to edit a post entry that already exist. public subroutine list_css () Arguments None Description Display the list of all cascading style sheets avalaible. public subroutine list_pages () Arguments None Description Display the list of all static pages. public subroutine list_posts (limit) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: limit Description Display a list of post entries (last ones or all of them).","tags":"","loc":"module/io_m.html","title":"io_m – fBlog"},{"text":"Provide interactive menu using POSIX command stty.\n There is no use of the well known programming library Curses ).\n Instead the command-line stty is used to set the terminal in raw mode in order to catch a unique key stroke without the need to press the key <Enter> . (This could be done with a call to libc to set canon / icanon .) Some ECMA-48 characters are emitted in order to change attributs (colors,\n  font weight) of strings displayed in console menus. (ECMA-48 is also known as\n \"ANSI escape sequences\") . References man pages stty(1) and console_codes(4), Open group , ECMA-48 . Variables Type Visibility Attributes Name Initial character(len=*), private, parameter :: bye = char(27)//'[1m'//char(27)//'[33m'//'BYE'//char(27)//'[0m' character(len=*), private, parameter :: ga = char(27)//'[1m'//char(27)//'[33m'//'GA'//char(27)//'[0m' character(len=*), private, parameter :: ok = char(27)//'[1m'//char(27)//'[32m'//'OK'//char(27)//'[0m' character(len=*), private, parameter :: reset = char(27)//'[0m' character(len=*), private, parameter :: set_blue = char(27)//'[1m'//char(27)//'[34m' character(len=*), private, parameter :: set_bold = char(27)//'[1m' character(len=*), private, parameter :: false_entry = char(27)//'[1m'//char(27)//'[31m' character(len=1), private :: choice character(len=256), private :: command_msg = \"\" character(len=256), private :: system_msg character(len=512), private :: terminal_settings integer, private :: command_status = 0 integer, private :: exit_status = 0 integer, private :: ios integer, private :: lu_stty_g logical, private :: file_exist logical, private :: directory_exist Functions private function console_menu (items) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: items Return Value character(len=1) Description Auxilary routine for displaying the menus in console mode. Subroutines public subroutine console () Arguments None Description Head routine for console mode. private recursive subroutine menu_main () Arguments None Description Provide top menu in console mode. private recursive subroutine menu_page () Arguments None Description Provide sub menu for static pages in console mode. private recursive subroutine menu_post () Arguments None Description Provide sub menu for post entries in console mode. private recursive subroutine menu_css () Arguments None Description Provide a sub menu for CSS in console mode.","tags":"","loc":"module/tty_m.html","title":"tty_m – fBlog"},{"text":"Calls program~~fblog~~CallsGraph program~fblog fblog path path program~fblog->path i18n i18n program~fblog->i18n edit_post edit_post program~fblog->edit_post delete_page delete_page program~fblog->delete_page delete_post delete_post program~fblog->delete_post list_css list_css program~fblog->list_css create_blog create_blog program~fblog->create_blog delete_css delete_css program~fblog->delete_css init_conf init_conf program~fblog->init_conf config config program~fblog->config terminate terminate program~fblog->terminate list_posts list_posts program~fblog->list_posts list_pages list_pages program~fblog->list_pages edit_css edit_css program~fblog->edit_css add_post add_post program~fblog->add_post console console program~fblog->console update update program~fblog->update edit_page edit_page program~fblog->edit_page Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Attributes Name Initial character(len=512) :: css_2_delete character(len=512) :: css_2_edit character(len=512) :: page_2_edit character(len=512) :: page_2_delete character(len=80) :: arg (0:2) character(len=80) :: char_rank integer :: argc integer :: i integer :: ios integer :: len_path integer :: rank_val logical :: config_has_been_recorded logical :: css_has_been_recorded logical :: file_exist logical :: page_has_been_recorded logical :: post_has_been_recorded Source Code program fblog ! use :: fblog_m , only : config_file , bad_argument , deleted , deleted_file , deleted_you_could_update_the_config , fblog_dir , i18n ,& & is_a_wrong_argument , init_conf , path , no_fblog_directory_at , no_fblog_directory_here , not_modified , now_you_should_update & &, post_amount , show_version , terminate , there_is_not_directory , too_much_arguments , update use :: io_m , only : add_post , config , create_blog , delete_css , delete_page , delete_post , edit_css , edit_page , edit_post , help ,& & list_css , list_pages , list_posts use :: tty_m , only : console ! implicit none ! logical :: config_has_been_recorded , css_has_been_recorded , file_exist , page_has_been_recorded , post_has_been_recorded integer :: argc , i , ios , len_path , rank_val character ( len = 80 ) :: arg ( 0 : 2 ), char_rank character ( len = 512 ) :: css_2_delete , css_2_edit , page_2_edit , page_2_delete ! argc = command_argument_count () if ( argc > 2 ) call terminate ( error_code = 1091 , inf_msg = i18n ( too_much_arguments )) do i = 0 , argc call get_command_argument ( number = i , value = arg ( i )) end do if ( argc == 0 ) then path = \"\" call console () end if if ( argc == 1 . and . ( arg ( 1 )( 1 : 1 ) /= '-' )) then path = trim ( arg ( 1 )) len_path = len ( path ) if ( path ( len_path : len_path ) /= '/' ) path = path // '/' inquire ( file = path // '.' , exist = file_exist ) if (. not . file_exist ) call terminate ( error_code = 1092 , inf_msg = i18n ( there_is_not_directory ) // \" \" // path (: len ( path ) - 1 )) call console () end if if ( argc == 2 . and . ( arg ( 2 )( 1 : 1 ) == '-' )) call terminate ( error_code = 1093 , inf_msg = i18n ( bad_argument ) // '\"' // trim ( arg ( 2 )) & & // '\"' ) if ( argc == 2 ) then path = trim ( arg ( 2 )) len_path = len ( path ) if ( path ( len_path : len_path ) /= '/' ) path = path // '/' inquire ( file = path // '.' , exist = file_exist ) if (. not . file_exist ) call terminate ( error_code = 1094 , inf_msg = i18n ( there_is_not_directory ) // \" \" // path ) end if select case ( trim ( arg ( 1 ))) case ( '-h' , '-help' , '--help' , '-?' , '?' ) print '(a)' , help call terminate ( error_code = 0 ) case ( '-v' , '--version' ) print '(a)' , show_version call terminate ( error_code = 0 ) end select inquire ( file = path // config_file , exist = file_exist ) if ( file_exist ) call init_conf () if ( arg ( 1 ) == '--create' ) then call create_blog call terminate ( error_code = 0 ) end if inquire ( file = path // fblog_dir // '.' , exist = file_exist ) if ((. not . file_exist ) . and . ( len ( path ) > 0 )) call terminate ( error_code = 1095 , inf_msg = i18n ( no_fblog_directory_at ) // \" \" // & & path ) if ((. not . file_exist ) . and . ( len ( path ) == 0 )) call terminate ( error_code = 1096 , inf_msg = i18n ( no_fblog_directory_here )) if ( arg ( 1 )( 1 : 12 ) == '--edit-post=' ) then char_rank = trim ( arg ( 1 )( 13 :)) read ( unit = char_rank , fmt = * , iostat = ios ) rank_val if ( ios /= 0 ) call terminate ( error_code = 1097 , inf_msg = trim ( char_rank ) // \" \" // i18n ( is_a_wrong_argument )) call edit_post ( rank = rank_val , recorded = post_has_been_recorded ) if ( post_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) end if end if if ( arg ( 1 )( 1 : 11 ) == '--edit-css=' ) then css_2_edit = trim ( arg ( 1 )( 12 :)) call edit_css ( css2edit = css_2_edit , recorded = css_has_been_recorded ) if ( css_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( not_modified )) end if end if if ( arg ( 1 )( 1 : 12 ) == '--edit-page=' ) then page_2_edit = trim ( arg ( 1 )( 13 :)) call edit_page ( page2edit = page_2_edit , recorded = page_has_been_recorded ) if ( page_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( not_modified )) end if end if if ( arg ( 1 )( 1 : 14 ) == '--delete-post=' ) then char_rank = trim ( arg ( 1 )( 15 :)) read ( unit = char_rank , fmt = * , iostat = ios ) rank_val if ( ios /= 0 ) call terminate ( error_code = 1098 , inf_msg = trim ( char_rank ) // \" \" // i18n ( is_a_wrong_argument )) call delete_post ( rank = rank_val ) call terminate ( error_code = 0 , inf_msg = i18n ( deleted_file ) // \" \" // trim ( char_rank ) // new_line ( 'a' ) // & & i18n ( now_you_should_update )) end if if ( arg ( 1 )( 1 : 14 ) == \"--delete-page=\" ) then page_2_delete = trim ( arg ( 1 )( 15 :)) call delete_page ( page2delete = page_2_delete ) call terminate ( error_code = 0 , inf_msg = 'Page ' // trim ( arg ( 1 )( 15 :)) // \" \" // i18n ( deleted_you_could_update_the_config )) end if if ( arg ( 1 )( 1 : 13 ) == \"--delete-css=\" ) then css_2_delete = trim ( arg ( 1 )( 14 :)) call delete_css ( css2delete = css_2_delete ) call terminate ( error_code = 0 , inf_msg = 'Css ' // trim ( arg ( 1 )( 14 :)) // \" \" // i18n ( deleted )) end if select case ( trim ( arg ( 1 ))) case ( '-L' , '--list-all' ) call list_posts () call terminate ( error_code = 0 ) case ( '-l' , '--list-last' ) call list_posts ( limit = post_amount ) call terminate ( error_code = 0 ) case ( '-u' , '--update' ) call update () call terminate ( error_code = 0 ) case ( '-a' , '--add-post' ) call add_post ( recorded = post_has_been_recorded ) if ( post_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( not_modified )) end if case ( '-c' , '--config' ) call config ( recorded = config_has_been_recorded ) if ( config_has_been_recorded ) then call terminate ( error_code = 0 , inf_msg = i18n ( now_you_should_update )) else call terminate ( error_code = 0 , inf_msg = i18n ( not_modified )) end if case ( '--list-css' ) call list_css () call terminate ( error_code = 0 ) case ( '--list-pages' ) call list_pages () call terminate ( error_code = 0 ) case default call terminate ( error_code = 1099 , inf_msg = i18n ( bad_argument ) // ' \"' // trim ( arg ( 1 )) // '\"' ) end select error stop 'Internal error in Main' end program fblog","tags":"","loc":"program/fblog.html","title":"fblog – fBlog"}]}